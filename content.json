{"pages":[],"posts":[{"title":"","text":"干货满满！10分钟看懂Docker和K8S2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。LXC，就是Linux容器虚拟技术（Linux container） 后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。 正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。 什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。Open Source，开源 有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。 2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。Solomon Hykes（今年刚从Docker离职） 不开则已，一开惊人。 越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。 Docker的人气迅速攀升，速度之快，令人瞠目结舌。 开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。 此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。 Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。 Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。 在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。虚拟机，类似于“子电脑” 在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是相互隔离的，互不影响。 虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。 虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。 而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。沙箱 它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。容器和虚拟机的对比 正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。 我们具体来看看Docker。 大家需要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎。 想要搞懂Docker，其实看它的两句口号就行。 第一句，是“Build, Ship and Run”。也就是，“搭建、发送、运行”，三板斧。 举个例子： 我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。 但是，跑来一个老巫婆，教会我一种魔法。 这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。怎么样？是不是很神奇？ 所以，Docker的第二句口号就是：“Build once，Run anywhere（搭建一次，到处能用）”。 Docker技术的三大核心概念，分别是： 镜像（Image） 容器（Container） 仓库（Repository） 我刚才例子里面，那个放在包里的“镜像”，就是Docker镜像。而我的背包，就是Docker仓库。我在空地上，用魔法造好的房子，就是一个Docker容器。 说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。 每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！ 也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。 这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？于是乎，就变成了一个大的公共仓库。 负责对Docker镜像进行管理的，是Docker Registry服务（类似仓库管理员）。 不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？ 所以，Docker Registry服务对镜像的管理是非常严格的。 最常使用的Registry公开服务，是官方的Docker Hub，这也是默认的Registry，并拥有大量的高质量的官方镜像。 好了，说完了Docker，我们再把目光转向K8S。 就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。 就在这个时候，K8S出现了。 K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。 和Docker不同，K8S的创造者，是众人皆知的行业巨头——Google。 然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的Borg系统。 K8S是2014年6月由Google公司正式公布出来并宣布开源的。 同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。 之后的一年内，VMware、HP、Intel等公司，也陆续加入。 2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。 目前，kubernetes的版本已经发展到V1.13。 K8S的架构，略微有一点复杂，我们简单来看一下。 一个K8S系统，通常称为一个K8S集群（Cluster）。 这个集群主要包括两个部分： 一个Master节点（主节点） 一群Node节点（计算节点）一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。 深入来看这两种节点。 首先是Master节点。Master节点包括API Server、Scheduler、Controller manager、etcd。 API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。 Scheduler负责对集群内部的资源进行调度，相当于“调度室”。 Controller manager负责管理控制器，相当于“大总管”。 然后是Node节点。Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是Pod。 Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。 Docker，不用说了，创建容器的。 Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。 Kube-proxy，主要负责为Pod对象提供代理。 Fluentd，主要负责日志收集、存储与查询。 是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。 Docker和K8S都介绍完了，然而文章并没有结束。 接下来的部分，是写给核心网工程师甚至所有通信工程师看的。 从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。 但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。 变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。 就算变来变去，还是服务器，是计算节点，是CPU。 既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。 前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是容器化。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。 以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。VoLTE相关的网元 而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。 简直完美！ 5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。精细化分工 按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。 至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！ 转自：https://my.oschina.net/jamesview/blog/2994112","link":"/2020/10/02/10%E5%88%86%E9%92%9F%E7%9C%8B%E6%87%82Docker%E5%92%8CK8S/"},{"title":"","text":"PVE使用日志安装1.下载proxmox 6.2镜像，基于dabain 10.5 buster（清华大学镜像站）：https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/2.使用rufus软件写入ISO镜像到U盘，使用DD方式写入 默认LVM分区处理pve删除lvm扩容根目录先备份虚拟机删除虚拟机删除local-lvmlvremove pve/data查看空闲空间vgdisplay pve | grep Free增加分区空间lvextend -l +100%FREE -f pve/rootfsdisk -l执行上边的扩容操作resize2fs /dev/mapper/pve-root恢复已经备份的虚拟机 更改为国内软件源更改debain apt源：cp /etc/apt/source.list /etc/apt/source.list.bakcat &gt; /etc/apt/source.list &lt;&lt;EOF deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free EOF 更改pve apt源：cp /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.bakcat &gt; /etc/apt/sources.list.d/pve-enterprise.list&lt;&lt;EOF deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian buster pve-no-subscription EOF 更改pve lxc镜像源查找设定下载源的文件grep -rn &quot;download.proxmox.com&quot; /usr/share/perl5/PVE/*sed -i.bak &quot;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g&quot; /usr/share/perl5/PVE/APLInfo.pmwget -O /var/lib/pve-manager/apl-info/mirrors.ustc.edu.cn https://mirrors.ustc.edu.cn/proxmox/images/aplinfo.dat 备份系统：tar pczvf ./sysback.tgz --exclude=/lost+found --exclude=/mnt --exclude=/srv --exclude=/proc --exclude=/run --exclude=/tmp --exclude=/sys --exclude=/meida --exclude=/mnt --exclude=/pve-directory /注意目标目录要在最后，排除目录要在前面 PVE开启直通前提：硬件支持并在UEFI或BIOS里面开启VT-D虚拟化 打开直通修改grub文件vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot; #改为 GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot; update-grub 修改module文件vim /etc/module加入 vfio_iommu_type1 vfio_virqfd vfio_pci vfio 重启系统生效 win10设置显卡直通以下截图是我的win10硬件配置：下载虚拟化驱动的iso，虚拟机win10的驱动靠它了https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/列出设备地址，确定显卡vendorIDlspci -nn 00:02.0 VGA compatible controller [0300]: Intel Corporation HD Graphics 610 [8086:5902] (rev 04) 定义为GPU直通vfio设备，并防止VGA仲裁echo &quot;options vfio-pci ids=8086:5917 disable_vga&quot; &gt; /etc/modprobe.d/vfio.conf禁止默认VGA驱动在启动时加载echo &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.confecho &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.confecho &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf启动进入虚拟机即可参考：https://star.us.org/Cs/win10-installation-and-gpu-passthrough-on-proxmox-6.html?replyTo=25 LXC使用在配置的存储目录中，点击模板，可以看到里面有很多system模板和turnkey的应用模板，这样可以大大减少应用的部署时间而专注于业务上。配置模板很简单，最后设置密码后启动即可。如果忘记密码，可以通过PVE主机进入进行修改：ptc enter 容器ID名再使用passwd 用户名修改ubuntu container ssh的问题：默认ubuntu不允许root进行ssh，可以新建一个用户，把用户添加到sudoer里面就行：useradd 用户名 -d -s /bin/bash使用passwd更改密码添加用户到sudoer：vim /etc/sudoer或者visudoer","link":"/2020/09/30/PVE%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/"},{"title":"","text":"hexo搭建到gihub准备nodejs环境：hexo基于node.js，需要在该环境下进行操作本人在proxmox ve里面下载debain10-turnkey-nodejs模板，省去了搭建的烦恼使用ssh工具到创建的容器上执行修改npm为国内淘宝源：npm config set registry https://registry.npm.taobao.org更新npm版本npm install -g npm查看npm和node版本npm -vnode -v安装hexo-clinpm install -g hexo-cli查看hexo版本：hexo -v github环境注册github账号新建仓库，仓库名应该为：用户名.github.io，以这种方式命名，github会自动认为是web项目，会自动建立custom_pages的选项，可以添加域名回到容器上执行设置user.name和user.email配置信息git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;生成ssh密钥文件ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;直接回车到最后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制打开GitHub_Settings_keys 页面，新建new SSH KeyTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入 ：ssh git@github.com如上则说明成功 域名部署到github上可以使用github自带的域名，需要自定义域名则需要到各大网站申请一个域名。默认可以用用户名.github.io来访问你的hexo博客。申请域名后，进行域名绑定：如我的域名为blog.hellshan.top，添加解析为我的github用户名.github.io，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名即可 hexo初始化执行hexo init blog会在当前目录下生成blog文件夹，也就是你hexo网站项目的名称在blog根目录里的_config.yml文件称为站点配置文件，根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件将我们的Hexo与GitHub关联起来：cd blog/vim _config.yml最后一行修改为 deploy: type: git repo: git@gitee.com:xxx/xxx.git branch: master 如图：安装git部署插件：npm install hexo-deployer-git --save执行：hexo cleanhexo ghexo d即提交成功，可以到你的github上看到 编辑博客文章可以使用在线markdown编辑器编辑，可写即可见：http://marxi.co/，编辑完保存md文件，然后传到blog/source/_posts/下在提交到github就行也可以使用markdown工具进行编辑如markdownpad2创建CNAME文件：上面在github上绑定了域名，还不会生效，需要在项目目录下建立CNAME文件才生效：vim blog/source/CNAME填上域名保存即可再次运行hexo cleanhexo ghexo d本地浏览：hexo s本地浏览器输入IP:4000即可浏览 使用其他主题在github上可以搜索Hexo的主题，下载下来放到theme文件夹，然后修改_config.yml中theme的名字即可 hexo问题处理图片无法显示问题hexo默认无法自动处理文章插入本地图片，需要通过扩展插件支持配置_config.yml里面的post_asset_folder:false这个选项设置为true:vim blog/_config.yml post_asset_folder:true 安装hexo-asset-image：npm install https://github.com/CodeFalling/hexo-asset-image --save在/source/_posts文件夹内新建一个与博客名称.md同名的文件夹，把图片放入该文件夹，然后使用![](xxx.png)直接插入图片即可。再次提交时，gihub就会自动生成相关文件夹和上传图片。 markdown使用数学公式hexo的默认md渲染器和标准不太一样，更接近与html格式，数学公式$之类的符号不能显示。同时使用的md语法可能在浏览器显示不正常。首先更换新的渲染器：npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save在根目录下开始(node_modules\\kramed\\lib\\rules\\inline.js)修改以下两处: //escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_&gt;])/, escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/, //em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 更换网站图标找到(next\\source\\images) 添加你选择的图片 注意最好是.ico格式在主题的配置文件中搜索”favicon” favicon: small: /images/favicon16.ico medium: /images/favicon32.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 将small,medium更换为你的图片,small是16x16 medium为32x32格式的。apple_touch_icon和safari_pinned_tab时ios上的识别图标，有需要也可以改 发布新的栏目首先在gitbash发布栏目hexo new page &quot;photos&quot;在主题的配置文件里搜索“menue”，然后新添加一行“||”的单词后是图标名 menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive 相册: /photos/ || photo #新添加 about: /about/ || user #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 添加social链接在主题的配置文件里搜索“social”，然后新添加一行。注意||后的图片一定要填正确，不知道可以去找网站搜一下，否则网站会打不开。 social: GitHub: https://github.com/yourname || github Codeforces: http://codeforces.com/profile/hello201999 || code CSDN: https://blog.csdn.net/weixin_43769146 || csdn b站: https://space.bilibili.com/99326686 || tv QQ: 1003423057 || qq WeChat: jjl1003423057 || wechat #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 参考出处：https://zhuanlan.zhihu.com/p/26625249https://blog.csdn.net/weixin_43769146/article/details/105066795","link":"/2020/09/30/hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"}],"tags":[],"categories":[]}