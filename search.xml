<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hueman主题使用补充</title>
    <url>/archives/9040e6a2/</url>
    <content><![CDATA[<p><img src="/archives/9040e6a2/4.jpg" alt=" "></p>
<h2 id="config-yml说明"><a href="#config-yml说明" class="headerlink" title="_config.yml说明"></a>_config.yml说明</h2><h3 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">customize:</span></span><br><span class="line">    <span class="attr">logo:</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">165</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">images/logo-header.png</span></span><br><span class="line">    <span class="attr">theme_color:</span> <span class="string">&#x27;#4169E1&#x27;</span></span><br><span class="line">    <span class="attr">highlight:</span> <span class="string">tomorrow-night-eighties</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">left</span> <span class="comment"># sidebar position, options: left, right</span></span><br><span class="line">    <span class="attr">thumbnail:</span> <span class="literal">true</span> <span class="comment"># enable posts thumbnail, options: true, false</span></span><br><span class="line">    <span class="attr">favicon:</span> <span class="string">css/images/favicon.png</span> <span class="comment"># path to favicon</span></span><br><span class="line">    <span class="attr">social_links:</span> <span class="comment"># for more icons, please see http://fontawesome.io/icons/#brand</span></span><br><span class="line">        <span class="attr">github:</span> <span class="string">https://github.com/helllllp</span></span><br><span class="line">        <span class="attr">weibo:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">qq:</span> <span class="string">/524311610</span></span><br><span class="line">        <span class="attr">weixin:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">rss:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>定义了自定义选项：<br><strong>logo</strong>：网站头部和脚部的logo，width和height是显示在网页上的大小，图片路径按照images/xxx.png来获取<br><strong>theme_color</strong>：主题色，影响关注我的banner颜色，超链接颜色和侧边栏文章标题颜色<br><strong>highlight</strong>: 代码高亮，可以<code>ls themes/hueman/source/css/_highlight/</code>查看有多少个主题样式，效果可以到highlightjs官网根据预览效果来选取：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a><br><strong>favicon</strong>：网站图标，图片路径按照css/images/xxx.png来获取</p>
<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">insight:</span> <span class="literal">false</span> <span class="comment"># you need to install `hexo-generator-json-content` before using Insight Search</span></span><br><span class="line">    <span class="attr">swiftype:</span> <span class="string">xxxxxxxxxx</span> <span class="comment"># enter swiftype install key here</span></span><br><span class="line">    <span class="attr">baidu:</span> <span class="literal">false</span> <span class="comment"># you need to disable other search engines to use Baidu search, options: true, false</span></span><br></pre></td></tr></table></figure>
<p>搜索引擎，当前版本配置了三个搜索引擎，insight需要npm安装hexo-generator-json-content，我这里安装后没有效果，故使用swiftype，百度官方不推荐<br>1、申请swiftype账号：<a href="https://app.swiftype.com/">https://app.swiftype.com/</a><br>使用邮箱注册，貌似使用qq和139邮箱申请不行，我用了自己阿里云域名的邮箱才行：crontab@hellshan.top<br>2、点击create new engine，创建新引擎，填上你的域名，进入后点击Setup and integration，复制install key到配置文件就OK<br><img src="/archives/9040e6a2/1.PNG" alt=" "></p>
<h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">disqus:</span> <span class="comment"># enter disqus shortname here</span></span><br><span class="line">    <span class="attr">duoshuo:</span> <span class="comment"># enter duoshuo shortname here</span></span><br><span class="line">    <span class="attr">youyan:</span> <span class="comment"># enter youyan uid here</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="comment"># enter true to enable</span></span><br><span class="line">    <span class="attr">isso:</span> <span class="comment"># options for isso.</span></span><br><span class="line">    <span class="attr">changyan:</span></span><br><span class="line">    <span class="attr">valine:</span> <span class="comment"># Valine Comment System https://github.com/xCss/Valine</span></span><br><span class="line">        <span class="attr">on:</span>  <span class="literal">true</span> <span class="comment"># enter true to enable valine</span></span><br><span class="line">        <span class="attr">appId:</span> <span class="string">4O7x2fxxxxxxrdxFIAJn3v-gzGzoHsz</span> <span class="comment"># enter the leancloud application appId here</span></span><br><span class="line">        <span class="attr">appKey:</span> <span class="string">k2d5KmEjtQeLw5IuRficyYsN</span> <span class="comment"># enter the leancloud application appKey here</span></span><br><span class="line">        <span class="attr">notify:</span> <span class="comment"># enter true to enable &lt;Mail notifier&gt;, default: false; https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE</span></span><br><span class="line">        <span class="attr">verify:</span> <span class="literal">true</span> <span class="comment"># enter true to enable &lt;Validation code&gt;, default: false</span></span><br><span class="line">        <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">Do</span> <span class="string">It</span> <span class="comment"># enter the comment box placeholder</span></span><br><span class="line">        <span class="attr">avatar:</span> <span class="string">identicon</span> <span class="comment"># (&#x27;&#x27;/mm/identicon/monsterid/wavatar/retro/hide), more to see https://valine.js.org/avatar.html</span></span><br><span class="line">        <span class="attr">avatar_cdn:</span> <span class="string">https://gravatar.loli.net/avatar/</span> <span class="comment"># avatar CDN address, default gravatar.cat.net</span></span><br><span class="line">        <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comments of one page</span></span><br><span class="line">        <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># count reading numbers; If true, the numbers will also show below the title of every post</span></span><br><span class="line">        <span class="attr">recordip:</span> <span class="comment">#false # If true, record commenter&#x27;s ip, which is shown in LeanCloud pannel</span></span><br><span class="line">    <span class="attr">gitalk:</span></span><br></pre></td></tr></table></figure>
<p>评论系统，这里使用了valine，详见<a href="https://valine.js.org/avatar.html">https://valine.js.org/avatar.html</a>操作指引<br>1、请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用：<br><img src="/archives/9040e6a2/2.PNG" alt=" "><br>2、应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：<br><img src="/archives/9040e6a2/3.PNG" alt=" "><br>3、把ID和KEY复制到配置文件即可</p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="source-css-style-styl"><a href="#source-css-style-styl" class="headerlink" title="source/css/style.styl"></a>source/css/style.styl</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">code</span></span><br><span class="line">    <span class="attr">margin:</span> <span class="number">0</span> <span class="string">2px</span></span><br><span class="line">    <span class="attr">color:</span> <span class="comment">#3CB371</span></span><br><span class="line">    <span class="attr">padding:</span> <span class="string">3px</span> <span class="string">5px</span></span><br><span class="line">    <span class="attr">font-size:</span> <span class="number">0.</span><span class="string">8em</span></span><br><span class="line">    <span class="attr">border-radius:</span> <span class="string">2px</span></span><br><span class="line">    <span class="attr">font-family:</span> <span class="string">font-mono</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#F0F8FF</span></span><br></pre></td></tr></table></figure>
<p>定义了代码的颜色，大小和边距，以及背景色</p>
<h3 id="source-css-variables-styl"><a href="#source-css-variables-styl" class="headerlink" title="source/css/_variables.styl"></a>source/css/_variables.styl</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// Colors</span><br><span class="line">color-default = #555</span><br><span class="line"><span class="selector-tag">if</span> <span class="selector-tag">hexo-config</span>(&quot;<span class="selector-tag">customize</span><span class="selector-class">.theme_color</span>&quot;)</span><br><span class="line">    color-theme = convert(hexo-config(&quot;customize.theme_color&quot;))</span><br><span class="line"><span class="selector-tag">else</span></span><br><span class="line">    color-theme = #3b8dbd</span><br><span class="line">color-grey = #aaa</span><br><span class="line">color-header-background = #2F4F4F</span><br><span class="line">color-main-background = #fff</span><br><span class="line">color-background = #eaeaea</span><br><span class="line">color-mobile-nav-background = #191919</span><br><span class="line">color-border = #ddd</span><br><span class="line">color-border-light = #eee</span><br><span class="line">color-nav-foreground = rgba(255,255,255,0.7)</span><br><span class="line">color-nav-background = #33363b</span><br><span class="line">color-nav-hover-background = rgba(0,0,0,0.1)</span><br><span class="line">color-sidebar-background = #f0f0f0</span><br><span class="line">color-sidebar-text = #777</span><br><span class="line">color-sidebar-text-dark = #444</span><br><span class="line">color-footer-background = #2F4F4F</span><br><span class="line"></span><br><span class="line">// Fonts</span><br><span class="line">font-sans = &quot;Titillium Web&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;Microsoft Yahei&quot;, sans-serif</span><br><span class="line">font-serif = Georgia, &quot;Times New Roman&quot;, serif</span><br><span class="line">font-mono = &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace</span><br><span class="line">font-icon-profile-size = 24px</span><br><span class="line">font-size = 14px</span><br><span class="line">font-size-article = 16px</span><br><span class="line">line-height = 1.6em</span><br><span class="line">line-height-title = 1.3em</span><br></pre></td></tr></table></figure>
<p>定义头部背景色，脚背景色，主页背景色，字体大小等。</p>
<h3 id="通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题"><a href="#通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题" class="headerlink" title="通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题"></a>通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题</h3><p>已经开启https，访问时还会提示您与此网站建立的链接并非完全安全，原因是我们的页面存在一些不安全的http请求，比如图片、js等静态文件。我们只需要将其升级为https请求即可。<br><code>vim /app/blog/themes/hueman/layout/common/head.ejs</code><br>页面的head中加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>年利润100%的合法生意，99%的人都能干倒闭</title>
    <url>/archives/54bfe784/</url>
    <content><![CDATA[<p><img src="/archives/54bfe784/1.png" alt=" "></p>
<p>原创 一棵青木  远方青木</p>
<p>这篇文章首发于2019年，我早就说了奶茶店是骗局了，来一个坑一个。</p>
<p>但没想到还是有人被坑，而且还被坑的这么惨。。。</p>
<p><img src="/archives/54bfe784/2.png" alt=" "></p>
<p>看完这个新闻后，我决定把以前写的这篇文章，重新发一遍，看看能不能拯救多一点人。</p>
<center>~~~</center>

<p>很多人积累了一点财富之后，都不满足于将钱放在银行，都在打听怎么投资，最好是一年能赚一倍那种。</p>
<p>有没有这样的好生意呢？还真有。</p>
<p>马克思曾经说过，为了100％的利润，资本就敢践踏一切人间法律。</p>
<p>这句话已经过时了，现在的中国，<font color="red">年利润100%的生意，比比皆是，而且还是合法的！</font></p>
<center><font color="blue" size="5">1</font></center>

<p>前几天，和亲戚聊天，我大姨和我说她退休后想开一个餐厅。</p>
<p>我大惊失色，问她为什么会有这种想法。</p>
<p>她说，餐厅赚钱快啊，我做菜又好吃，投资又不大，做这个肯定赚钱。</p>
<p>开餐厅的确很赚钱，我大姨做菜的手艺确实也很棒，餐厅的投资确实也不大，但是开餐厅，真的未必赚钱。</p>
<p>不少人创业，第一个想到的就是餐饮业，因为餐饮业的入行门槛相当低，<font color="red">看起来谁都可以干，而且非常暴利。</font></p>
<p>而投身于这一行的创业者，总觉得自己具有非常大的优势，比如自己有个秘方、能挖来几个厨师、懂选址、具备丰富的餐饮工作经历、有特色食材资源等。</p>
<p>他们认为自己凭这些，就能开好一家餐馆了，<font color="red">很快就能做大做强，然后冲出亚洲。</font></p>
<p>真是想太多，餐饮业的确很暴利，<font color="red">餐饮业的平均年利润，是100%，非常惊人，但是这个钱，不是那么好赚的。</font></p>
<p>你震惊了，我的钱存银行，一年才4%收益，投个P2P才8%，餐饮业的利润居然是100%，这钱怎么就不好赚了，风险再大都值得啊，还能比P2P更大？</p>
<p>还真被你猜对了，<font color="red">投资餐饮业，风险比P2P要大多了。</font></p>
<center><font color="blue" size="5">2</font></center>

<p>1989年，俏江南创始人张兰扔下8岁的汪小菲到加拿大打黑工，洗盘子擦桌子什么都干，白手起家，这种暗无天日的黑工生活，她干了三年。</p>
<p>1992年，张兰带着打黑工赚的2万美元，回国创业，在北京开了一家“阿兰餐厅”，发财了。</p>
<p>1995年，赚了大钱的张兰，在亚运村开了一家“百鸟园花园鱼翅海鲜大酒楼”，到1997年，这个酒楼的日营业额达到了50万元，年营业额近2亿人民币。</p>
<p>做过餐饮，知道餐饮业毛利率的，都知道这个营业额带来的利润有多恐怖，那才是1997年。</p>
<p>日进斗金的张兰，把这个大酒楼给卖了，创办了“俏江南”，立志做出自己的品牌。</p>
<p>2007年，俏江南年营收达到10亿元。</p>
<p>2008年，俏江南成为奥运会唯一指定中餐馆。</p>
<p>2009年，张兰荣登胡润餐饮富豪榜第三名。</p>
<p>2010年11月，张兰之子汪小菲和大S在北京订婚。</p>
<p>俏江南，想当餐饮界的LV。</p>
<p><img src="/archives/54bfe784/3.png" alt=" "></p>
<p>开个餐厅而已，张兰怎么就赚到了数十亿身家呢，这就要从餐饮业的暴利说起了。</p>
<p>普通的餐厅，平均回本周期大概是15~18个月左右，如果你和别人说你想开一个新餐厅，预估2年才能回本，让别人投钱入股，那是没有人会搭理你的。</p>
<p>因为在你做投资预估时，一个狂吹牛的阶段，都只敢把回本周期吹成24个月，比市场平均值还低，别人要真投了钱，死都不知道怎么死的。</p>
<p>而海底捞，把回本周期做到了6~12个月，<font color="red">平均值大概是10个月左右。</font></p>
<p>回本周期10个月是什么意思呢，就是你今天投资100万，从钱到账那一天开始算，连装修、开业、培训员工的时间都算上，扣除食材成本、员工工资、租金、税费后，平均一个月可以给你赚10万块，熬10个月不死，你就赚回了初始本金，后面的利润，就是无风险躺着数钱了。</p>
<p>大厨不是你，大堂经理不是你，服务员也不是你，你只需要投资100万，每个月付完他们工资和一切成本，还可以净赚10万到手。</p>
<font color="red">爽不爽，月入10万的金领生活，正在对你招手。</font>

<p>而你需要投资的金额，仅仅只够在北京买一个厨房，还不速来。</p>
<p><img src="/archives/54bfe784/4.png" alt=" "></p>
<p>哪怕你做不到海底捞那种程度，搞个餐饮业的平均值，15个月左右回本也行，<font color="red">只需要我投资150万，一个月也可以净赚10万，从此过上衣食无忧的资本家生活，狠狠的剥削那些大厨和服务员。</font></p>
<p>你想得美哦，100多万而已，你以为凭大厨的工资就攒不出来？</p>
<p>就算不开大店，花二三十万开个小店也是没问题的，他自己为啥不会去开店？</p>
<font color="red">是他傻，还是你觉得他傻？</font>

<p>投资创业期间，到底是老板剥削员工，还是员工剥削老板，那真得看情况，不好说的。</p>
<p>还记得那个巅峰时年纳税上亿，雇佣20几万员工，气吞万里如虎的俏江南么。</p>
<p>因经营不善，张兰的俏江南后来被债权人给强制卖掉了。</p>
<center><font color="blue" size="5">3</font></center>

<p>按投资回报周期12个月来算，年利润是100%，投资1个亿，只要按这种利润率稳定赚10年，你就有1024亿。</p>
<p>如果你能稳定赚20年，你就会拥有1024乘以1024个亿，这数额太大，我不敢算。</p>
<p>为啥没有出现过这样的巨无霸餐饮集团，因为无数网红餐厅，前赴后继的关门了，俏江南不是第一个，小肥羊也不是最后一个。</p>
<p>海底捞火锅厉害吧，回本周期短的吓人，按理说这样的公司不说统一中国餐饮界，至少得统一中国火锅届吧。</p>
<p>但实际上，中国的火锅市场极度分散，冠军海底捞，仅占据总市场份额的2.2%。</p>
<p><img src="/archives/54bfe784/5.png" alt=" "></p>
<p>同时，海底捞还是全球中式餐饮市场份额第一名，占中式餐饮总份额的0.2%。</p>
<p>为什么海底捞利润率这么高，居然只有这么一点市场份额，它不会扩张么？</p>
<p>因为海底捞发展的时间短啊，以前的餐饮第一名可不是海底捞，而是俏江南。</p>
<p>海底捞什么时候会倒我不知道，但是它早晚会倒，因为它如果能再维持这种速度发展10年以上，整个地球都是它的了。</p>
<p>中国至今没有一个餐饮龙头，能活10年之久。</p>
<center><font color="blue" size="5">4</font></center>

<p>一个餐厅，最核心的就是菜品，这些菜品都是厨师做出来的，按理说，厨师应该是餐厅的核心竞争力。</p>
<p>依这个逻辑，厨师开餐厅，胜率应该是非常高的。</p>
<p>很多厨师，其实也是这么想的，大厨工资本来就高，攒几十万轻轻松松，回老家开个小餐馆自己当老板，多爽。</p>
<p>餐饮界有个定律，10个厨师开餐厅，9个会倒闭。</p>
<p>不开餐厅的人，永远不知道开店有多难，绝对不是把菜做好就万事大吉的。选址、装修、消防、营销，每一个门槛都能弄死一批新老板。</p>
<p>最难的，还是带团队，管理之所以能成为一门学问，正是因为他真的很难。</p>
<p>餐馆招募的普通员工，老板不盯着，完全没有积极主动性，怎么偷工减料怎么来，提高工资、提高分红、承诺股权，这些手段完全无法激发他们的主观能动性，<font color="red">他们什么都想要，但是什么都干不好。</font></p>
<font color="red">高薪如果一定能养廉，治天下就太简单了。</font>我随便拉一个微信员工，用30亿的年薪激励他，他也变不成张小龙。

很多餐厅老板，就是死在管理不善上，最后一核算，开个餐馆赚的钱，扣掉本钱后还不够自己工资。

开个餐馆，冒着赔本的风险，操最多的心，最后一算账，自己的收入还没员工的高，这样的餐馆，当然只有倒闭一条路，老板出去打工赚钱。

其实能收回本金的餐馆已经很不错了，现在出现了很多“三月死”的饭店，意思就是开张三个月，生意不好，只能关门，至于本钱，当然就打水漂了。

大家的小区周围，都一定出现过这种餐厅，你在开业大酬宾的时候光顾一次，过几个月刚想第二次尝尝，发现已经倒闭了。。。

三个月就血本无归的生意，风险当然比P2P大。

干餐饮，至少要开满一年多才能回本，但你冒那么大风险，只是为了回本么？

开餐厅想真正赚到钱，至少要存活3年以上，中间不能有任何差错，这很难。99%的新人都做不到。

刘强东人生中的第一次创业，开的就是一家小饭馆，最后亏了20多万，<font color="red">90年代的20多万。</font>

<p>绝大部分人干餐饮，都死的很惨，新餐馆像流水一样的出现，又像流水一样的倒闭。</p>
<center><font color="blue" size="5">5</font></center>

<p>奶茶店，是餐饮界中的一个异类，这个新兴起的网红产业，曾经遍地黄金。</p>
<p>当年，奶茶店是不折不扣的暴利行业，回本周期曾经短到惊人的3个月。</p>
<p>传统珍珠奶茶的毛利率，达到90%以上，而即便是用水果鲜奶这种上等原料制作出来的新一代奶茶，毛利率也有70%以上。</p>
<p><img src="/archives/54bfe784/6.png" alt=" "></p>
<p>开个火锅店动辄500~1000平米，而开个奶茶店只要5~20平米就可以了，投资那么低，利润那么高，营业额还不小，回本周期岂能不快。</p>
<font color="red">当年开奶茶店，确实是谁开谁赚钱，在风口上，猪都可以飞。</font>

<p>在利润的驱使下，大量的奶茶店，像韭菜一样长起来了，奶茶店的回本周期急速攀升，直到让人无法忍受。</p>
<p>2017年，是奶茶店盛极而衰的转折点，这一年，全国奶茶店开了9.6万家，倒闭7.8万家，存活率仅仅18.8%。</p>
<p><img src="/archives/54bfe784/7.png" alt=" "></p>
<p>那几年好多大学生辞职创业，首选就是奶茶店，后面的下场，就是全赔。。。</p>
<p>奶茶这玩意门槛太低了，谁都可以干，没有任何行政门槛，资金门槛也低的吓人。</p>
<p>既然门槛那么低，那就要问一下了，<font color="red">凭什么你发财呢？你长的很像王思聪么？</font></p>
<p>到了2017年，单纯的开奶茶店已经赚不到钱了，只会亏钱，能赚到钱的奶茶店，都有一个特征，就是创新出了新式爆款品种。</p>
<p>凭这个爆款饮品吸引了流量，才能赚到大钱，最典型的，就是喜茶、奈雪の茶、答案茶等。</p>
<p>但是奶茶配方太容易模仿了，抄袭简直不要太简单，所以短暂的火爆过后，虽然这些创造出爆款的茶饮还能靠品牌效应继续赚钱，但是明显越来越难。</p>
<p>奶茶界的规矩，一个爆款茶饮，最多6~12个月的生命周期，然后就会泛滥，最终逐步被消费者淘汰。</p>
<p>如果不能每年推出一个爆款，哪怕是喜茶这样的茶饮，也会迅速凋零。</p>
<p>鹿角巷曾是一家爆火的网红奶茶，最火时店门口放了个牌子：排队预计等5个小时。</p>
<p>但在开店不到15个月后，它在深圳的第一家门店就关门倒闭了。</p>
<p>在2018年，答案茶也曾火爆全网，一年之内加盟店高达500家，覆盖全国27省份。</p>
<p><img src="/archives/54bfe784/8.png" alt=" "></p>
<p>2019年，答案茶直接凉凉，现在你在中国再也见不到这个奶茶店了，它也成为了奶茶加盟的典型反面教材。</p>
<center><font color="blue" size="5">6</font></center>

<p>在奶茶市场搏杀白热化之后，面对越来越难赚钱的现状，一些人动起了歪脑筋。</p>
<p>做爆款茶饮太难，做品牌效应也太难，直接卖奶茶赚不到钱，怎么办呢？</p>
<p>奶茶业<font color="red">曾经短暂存在过的真实暴利，给了他们钻空子的机会。</font></p>
<font color="red">宣传奶茶创业，宣传奶茶暴利，灌输无脑发财的思想。</font>

<p>只需要交几万加盟费，就可以获得总部的一系列扶持，什么扶持都有，你要啥给啥，反正送佛送到家，总部免费培训你成为一名奶茶老板。</p>
<p>具体条款我就不列了，打开百度，一堆奶茶店加盟的广告，随手截一个给大家感受一下，这条件优惠的，我看了都心动。</p>
<p><img src="/archives/54bfe784/9.png" alt=" "></p>
<p>只要交了加盟费，你的财富由此起航。</p>
<p>既然真那么暴利，为啥不自己干，这么好的项目，银行为什么不贷款给他自己做？</p>
<p>等你真交了加盟费，一切就真相大白了。</p>
<p>除了房租是你自己交之外，装修由总部统一负责，当然，钱需要你出，设备总部统一配备，钱是你出，原材料也要用总部的，钱还是你出。</p>
<p>美其名曰保姆式培养，实质是在骗你手中的钱，开这个奶茶店，你赚不赚钱不重要，<font color="red">开业之前，总部就已经把钱给赚饱了。</font></p>
<p>当你开1个月的奶茶店之后，你就会深深意识到自己的无知和愚昧，贪婪蒙蔽了你的眼睛，让你看不到这个世界的险恶。</p>
<p>你不想玩了，想退钱，想回去好好上班，当个打工仔。</p>
<font color="red">想得美，交出去的钱还想拿回去，门都没有。</font>

<p>投资有风险难道不懂么？人家可是聘请了专业法务的，打官司你的胜率就是零。</p>
<p>奶茶加盟店，已经被普遍认为是骗局，甚至出现了“<font color="red">奶茶传销</font>”这一词汇，直接把奶茶加盟和传销骗局相提并论。</p>
<p>如果你现在还幻想开一家奶茶店当老板，从此走上财富自由之路，<font color="red">我建议你先喝杯冰镇奶茶冷静一下。</font></p>
<center><font color="blue" size="5">7</font></center>

<p>现在有很多媒体，为了吸引眼球，故意灌输成功学毒鸡汤，夸大创业的成果，隐藏创业的难度，拿成功的个例当成普遍现象，导致无数的人误入歧途。</p>
<p>而餐饮业，正是重灾区，因为这个行业，暴利和暴亏同时存在，最容易产生暴富神话和成功很容易的幻觉。</p>
<p><img src="/archives/54bfe784/10.png" alt=" "></p>
<font color="red">开一家餐馆的刺激程度，不亚于去澳门赌场。</font>

<p>而高风险高收益，其实是个伪命题，高风险未必一定带来高收益。</p>
<font color="red">人才干这事，只有高收益，而韭菜干这事，只有高风险。</font>

<p>创业，重点是创这个字，你必须跳出现有的维度，从更高的维度实现降维打击，你才可能创业成功。</p>
<p>你的眼光，至少要领先别人四五步，如果你做的东西，几年前就有人在干了，那不叫创业，叫做生意。</p>
<p>什么叫做生意呢，做生意就是不领先，只跟随，不享受风口红利，纯粹和你拼质量，拼成本，吃苦耐劳，质量优异，是做生意成功的唯一办法。</p>
<p>这个也很难，其实难度丝毫不亚于创业，<font color="red">成功的原因只有一个，死亡的原因千奇百怪。</font></p>
<p>99%以上的餐馆，活不过3年以上，所以整个餐饮行业的平均回本周期，才被压制在了15~18个月以内。</p>
<p>死亡率这么高的前提下，只有这么暴利，才会有人敢参与。</p>
<font color="red">一个行业如果看起来很暴利，而你又不是世界上第一个发现它的人，那就请你一定要注意了，里面一定有陷阱。</font>

<p>创业是一个注定只有少数人能成功的事情，和一系列的条件都有关，你有一个条件出现了短板，就只有死路一条。</p>
<p>现在蛊惑创业的毒鸡汤铺天盖地，我揭露一些潜在风险你们也未必信。</p>
<p>不过不管你信不信，听我一句劝，你创业可以，一定记住最多只用自己积蓄的一半去创业，哪怕看起来这个项目再诱人，也不要把身家性命全部砸进去。</p>
<p>尤其是在创业艰难的时候，绝对不要投入剩下的保命钱，不要认为挺过这关就好了，创业的难关一个接一个，根本没有尽头，永远都有下一关等着你，一旦哪一关你没熬过去，所有投入就全部打了水漂。</p>
<p>一旦你的积蓄耗光，你就会想到借贷，想到信用卡，想到抵押房产。</p>
<p>如果你这么做了，那么后果大概率就是<font color="red">妻离子散。</font></p>
<p>而如果你只用一半的积蓄去创业，那么哪怕失败，至少你还可以保持正常的生活。</p>
<font color="red">我不知道你和你的亲朋好友，有多少人曾经被朋友圈无处不在的创业毒鸡汤给洗脑，从而蠢蠢欲动。</font>

<p>希望看完我这篇文章之后，能够让你们稍微清醒一下，做足市场调研，有了充分把握再考虑创业的事情，因为这注定是九死一生的买卖。</p>
<p>人总是误会自己的擅长和不擅长，在自己不擅长的领域里，因为只看到些皮毛，就觉得很简单，自己完全可以。而在自己非常擅长的领域里，因为看到了更深处的困难和瓶颈，所以做事反而瞻前顾后，畏首畏尾。</p>
<p>我一贯主张创业最多用一半积蓄这个铁的原则，希望你们也是如此。这样能在最不利情况出现时，让你们少损失很多钱，<font color="red">有一个重整旗鼓再出发的机会。</font></p>
<font color="red">珍爱生命，拒绝朋友圈的那些创业毒鸡汤。</font>

]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack、虚拟机以及和当前流行的k8s、Docker四者之间的关系</title>
    <url>/archives/28b8f600/</url>
    <content><![CDATA[<p><img src="/archives/28b8f600/1.png" alt=" "></p>
<h2 id="OpenStack与虚拟机之间的关系"><a href="#OpenStack与虚拟机之间的关系" class="headerlink" title="OpenStack与虚拟机之间的关系"></a>OpenStack与虚拟机之间的关系</h2><p>OpenStack使用Python语言开发，是虚拟资源管理工具，他可以协助你搜集各种资源，并加以利用以及管理，实现物理资源的高效使用和安全。虚拟化物理机这个动作，OpenStack无法完成，需要一个中间层例如KVM、Xen、VMware等来基于硬件做资源的虚拟化，然后此时OpenStack通过各种API接口来接管这些资源。</p>
<p>OpenStack 主要针对 IaaS平台，以资源为中心，可以为上层的 PaaS 平台提供存储、网络、计算等资源。</p>
<p><img src="/archives/28b8f600/2.png" alt=" "></p>
<h2 id="与Docker和k8s的关系"><a href="#与Docker和k8s的关系" class="headerlink" title="与Docker和k8s的关系"></a>与Docker和k8s的关系</h2><ol>
<li><p>OpenStack：公认的云计算IaaS平台，其管理的核心目标对象是机器（虚拟机或物理机），当然也可以管理存储和网络，但那些也大都是围绕着机器所提供的配套资源。近年来容器技术火了之后，OpenStack也开始通过各种方式增加对容器的支持，但目前OpenStack还不被视为管理容器的主流平台。</p>
</li>
<li><p>Docker：这里我假定你指的是Docker engine（也叫做Docker daemon，或最新的名字：Moby），它是一种容器运行时（container runtime）的实现，而且是最主流的实现，几乎就是容器业界的标准。Docker是用来创建和管理容器的，它和容器的关系就好比KVM和虚拟机之间的关系。当然，Docker公司对Docker engine本身的定位和期望不仅仅在于在单机上管理容器，所以近年来一直在向Docker engine中加入各种各样的高级功能，比如：组建多节点的Docker集群、容器编排、服务发现，等等。</p>
</li>
<li><p>Kubernetes（k8s）：搭建容器集群和进行容器编排的主流开源项目（亲爹是Google），适合搭建PaaS平台。容器是Kubernetes管理的核心目标对象，它和容器的关系就好比OpenStack和虚拟机之间的关系，而它和Docker的关系就好比OpenStack和kvm之间的关系。一般来说，Kubernetes是和Docker配合使用的，Kubernetes调用每个节点上的Docker去创建和管理容器，所以，你可以认为Kubernetes是大脑，而Docker是四肢。</p>
</li>
</ol>
<h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><p>OpenStack是管理虚拟机的（web可视化平台，在linux里边部署配置），k8s是管理容器的（web可视化平台，在linux里边部署配置）；上层的应用是部署在容器上的，而一般容器又是创建在虚拟机上的，所以OpenStack是属于IaaS层面的，k8s是属于PaaS层面的，上层应用是属于SaaS层面的。</p>
<p><em>摘自<a href="https://www.cnblogs.com/chenbin93/p/13378181.html?utm_source=tuicool">https://www.cnblogs.com/chenbin93/p/13378181.html?utm_source=tuicool</a></em></p>
]]></content>
      <categories>
        <category>热点</category>
        <category>平台</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>劳动力价值归零、共产主义临界、星际争霸时代</title>
    <url>/archives/5d04ac6b/</url>
    <content><![CDATA[<p><img src="/archives/5d04ac6b/1.png" alt=" "></p>
<p>原创 微信公众号一棵青木 远方青木</p>
<p>今天，我打算和大家聊一点有趣的事情。</p>
<p>我以前考虑过一个问题，随着机器人技术越来越发达，人工智能越来越先进，普通人在未来还有存在的意义么？</p>
<p>刚发明的机器人是非常昂贵的，但只要技术提高到一定地步，机器人的制造成本就可以非常低廉，就好像一百年前的汽车和今天的汽车一样。</p>
<p>如果将来有一天，我们可以用很低的成本去制造机器人，比如说20万一个，而机器人又具备了很高的智慧，可以替代人类做绝大部分工作，那怎么办？</p>
<p>机器人可以干家务，可以当服务员，可以当工人，甚至还可以当工程师和医生，而且是不眠不休24小时不停干活。</p>
<p>由于机器人的知识承载量是无穷大的，智慧型机器人个个都是最顶级的医学专家，而且是全科医生，啥病都能看，连科室都不用分了。</p>
<font color="red">那普通人还能干啥，还能去哪找工作？</font>

<p>更可怕的是，机器人也是劳动力，它自己可以制造出更多的机器人。</p>
<p>每一个机器人，都拥有人类世界全部的知识，也可以从事任意一份工作，既能当建筑工人，也能当电站设计师，还能自己动手建立新的机器人工厂。</p>
<p>你把少量机器人扔到一个荒凉的星球上，它可以从无到有建立一个庞大的基地，里面有发电站、有工厂，机器人的数量会迅速从10个攀升到10万亿，一直达到这个星球的资源极限为止。 </p>
<p>而每一个机器人，都比普通人类要能干。</p>
<p><img src="/archives/5d04ac6b/2.png" alt=" "></p>
<font color="red">当机器人的供应极其充沛时，整个社会的劳动力价值就趋近于零。</font>

<p>这一天，我称之为<font color="red">共产主义临界。</font></p>
<center><font color="blue" size="5">1</font></center>

<p>资本主义制度和市场经济，已经被证实可以极大的解放生产力、促进生产力。</p>
<p>在私有制的前提下，工人在追逐奖金，资本家在追逐利润，所有人都在努力的创造价值。</p>
<p>出于对利润的追逐，资本家在不断的研发新技术，一切都是为了增加劳动效率。</p>
<p>自动化一直在摧毁工作机会，美国农业自动化后，农民的数量从45%急剧减少到了2%，而中国的农业机械普及后，目前也在出现这种趋势。</p>
<p>自动化越发达，需要的人力越少，这一点在所有行业的工厂中，都有体现出来。</p>
<p>自动化虽然摧毁了老旧低端的工作机会，但更加富有的人民会创造出新的就业机会，所以整个社会依然在蒸蒸日上。</p>
<p>但这种技术进步带来的幸福，有其极限所在，那就是机器人革命突破临界点，造成劳动力价值归零的那一天。</p>
<p>如果一家工厂已经发达到全部由机器人管理，可以自己发电、自己挖矿、自己制造维修新的机器人，整个过程不需要任何人类的参与，也不需要任何管理人员，每天都会自动产出一定数量的商品。</p>
<p>请问这些商品的价值应该是多少？</p>
<p>答案是零。</p>
<p>商品的价格，不是由它的成本或价值所决定的，而是由需求和供给所决定的。</p>
<p>空气对你的价值，明显比保时捷要大的多，但是没有保时捷你可以接受，没有空气你万万不能接受。</p>
<p>在月球上，1克空气和1克黄金是等价的。</p>
<p>但是在地球上，你愿意为空气付出的价格，是零。</p>
<p>因为地球上可以源源不断的自动产出空气，供给太过充沛，所有人都不缺空气，不存在任何稀缺性，所以也就没有价格。</p>
<p>在智慧机器人时代，道理类似。</p>
<p>整个资本主义的存在有一个巨大的理论基石，那就是假定利润可以驱动所有人。</p>
<p>在目前的生产力水平下，这的确是有效的，所有人都在为了利润而奔跑，人类社会也在为了利润而进化。</p>
<p>但是在机器人可以完成一切的时代，这个基石就坍塌了。</p>
<p>如果资本家追逐利润，那么他的选择必然是开除所有员工，自己一个人和一堆机器人统治世界，因为这么做，效率最高。</p>
<p>但是当工人失去一切收入时，商品也就没有了意义，因为无人有钱购买，整个社会的需求几乎消失，资本家也就没有生产的动力，哪怕机器人工厂的生产成本趋近于零，他也不愿意生产。</p>
<font color="red">没有需求，就没有生产。</font>

<p>整个社会的秩序，就这么崩溃了，资本家和工人都很迷茫，我每天到底应该干嘛。</p>
<p>而智慧机器人+资本主义，会产生奇妙的化学反应。</p>
<p>追逐更高的生产效率和更多的利润，是资本家的天性，也是我们所鼓励的目标。</p>
<p>但是当生产效率高到临界点的时候，麻烦就来了。</p>
<font color="red">这个临界点，就是智慧机器人可以用趋近于零的成本，胜任所有的工作。</font>

<p>我刚才说了，机器人可以采矿，可以建工厂，可以自己全自动生产更多的机器人，同时也可以生产世界上所有的商品和服务。</p>
<p>除非你索取的报酬比机器人还低，否则人类劳动力就没有存在的价值。</p>
<p>但机器人的成本已经接近于零，你还能怎么低，你总要吃饭吧。</p>
<p>这个时候，如果社会还在坚持资本主义私有制，那就会出现一个很可怕的事情。</p>
<p>99%的普通人类，都会失去工作，只留下少数精英科学家和大资本家。</p>
<p>如果彻底坚持私有制，那么这些普通人类都会被淘汰消灭掉。</p>
<p>由于机器人可以不断自我繁殖、扩大生产规模，接下来残存的1%人类里，会再度分化，剩余人口的99%会被再次淘汰，遗留万分之一的超级资本家。</p>
<p>最后，整个地球会只剩下1个终极资本家，他一个人控制无数的机器人，可以用更高的效率完成之前全人类的所有生产任务，同时占有了全地球所有的资源。</p>
<p>这个人有个专有名词，叫<font color="red">终产者。</font></p>
<p>但人类是群居性生物，如果地球上的人类社会消亡了，人类文明也就消亡了，没有同类可以沟通，整个地球就是一个巨大的囚笼，这个终产者也不会有什么幸福可言。</p>
<p>所以，在智慧型机器人时代，如果彻底坚持私有制和资本主义，整个人类社会将步入自我毁灭。</p>
<p>这就是典型的生产力不匹配生产关系。</p>
<p>先进的生产力，理应带来更大的幸福，如果反而带来了痛苦和迷茫，那就说明人类世界需要更先进的生产关系。</p>
<p>这就是共产主义临界，这种科技革命带来的生产力爆发，会直接颠覆原有的生产关系。</p>
<center><font color="blue" size="5">2</font></center>

<p>这种等级的生产力，还会带来一个附带的效果，<font color="red">那就是人类将飞速进入星际时代。</font></p>
<p>目前的人类社会，绝对不可能步入星际时代，所谓的探索月球，探索火星，其实都是给披着和平的外表在做洲际导弹试验。</p>
<p>地球上最差劲的地方，都会比火星上最强的地方要好的多，至少在地球上空气是免费的，水源也不贵。</p>
<p>我宁可开发撒哈拉大沙漠，也不可能去开发什么火星资源，很明显大沙漠更适宜人类居住。</p>
<p>地球上这么多戈壁、沙漠、海底世界都闲着，我有什么必要去殖民火星，那不是有毛病么。</p>
<p>为什么我们放弃了沙漠？因为开发沙漠资源需要人力，而维持人力需要资源，如果开发出的资源小于消耗的人力资源，那开发沙漠就是不划算的事情，我们宁可放弃。</p>
<p>但是在铺天盖地可以自我繁殖的智慧机器人面前，这都不是问题，他们可以靠核聚变的动力，用沙漠里的沙子和石头合成新的机器人，然后不断的自我复制，然后用极低的成本开发整个沙漠。</p>
<p>最后，机器人会代替人类征服地球的每一个角落，甚至可以潜入深海去开发资源。</p>
<p>地球的机器人数量，会很快达到整个地球可以承载的资源极限，提供无数的产品来供应整个人类。</p>
<p>这个时候，开发火星就有价值了，因为人类的力量等于占领的星球数量，机器人的繁殖不需要空气，不需要水源，只要有核燃料和岩石就可以，而这些东西，每个星系都会有。</p>
<font color="red">只要一艘殖民舰落地，机器人很快就会占满整个星球，然后利用星球的资源复制出数万艘殖民舰。</font>

<p>出于对更强生产力的追求，人类社会将在新的生产关系下，集中全人类的力量，突破星际旅行技术，然后把机器人工厂种满星空的每一个角落。</p>
<p>如果碰到了其他也在争夺星球资源的高等文明，那就有可能引发一场星际之战。</p>
<p><img src="/archives/5d04ac6b/3.png" alt=" "></p>
<p>刚才分析过，资本主义的生产关系和星际时代的生产力互不兼容，所以到时候和异星文明战斗的，不可能是资本主义战士，只能是共产主义战士。</p>
<p><img src="/archives/5d04ac6b/4.png" alt=" "></p>
<p>这并不是开玩笑，生产力决定生产关系，生产反作用于生产力。</p>
<p>如果人类发展不出智慧型机器人，那人类的生产力不可能会出现爆发式增长，永生永世会被困在地球上，直到漫长的时间过后，地球环境变化，人类和恐龙一样走向灭亡。<br>如果人类发展出智慧型机器人，那自我繁殖的机器人会很快让劳动价值归零，也只有发达到足以让劳动价值归零的先进生产力，才有可能帮助人类突破星球的枷锁。<br>而这种级别的生产力，会导致资本主义制度直接解体。</p>
<p>现阶段的生产力，资本主义制度占优势，但星际时代的生产力，则会毁灭资本主义制度。</p>
<center><font color="blue" size="5">3</font></center>

<p>资本主义制度的存在，在不断的提升人类的生产力。</p>
<p>但生产力越发达，资本主义制度就越衰弱，生产力发达到一定程度，资本主义制度要么自我灭亡，要么就自我改良成变种的共产主义。</p>
<p>最近几十年，科技越发达，欧美的工人福利就越高，越来越像共产主义国家了，这就是他们逐步改良，缓步进入共产主义的证明。</p>
<p>所以我认为马克思的理论没有任何问题，最大的问题可能就是超越了时代。</p>
<p>中国后来从共产主义改为社会主义，承认市场经济，承认私有制，也是出于这个原因，现阶段生产力不够发达，不匹配超前的生产关系。</p>
<p>目前的人类世界，靠利润驱动个体，是社会生产最优的选择。</p>
<font color="red">所以，科学技术是第一生产力，消灭资本主义制度的主力军不是部队，而是科学家。</font>

<p>过于发达的生产力会毁灭资本主义制度，但这些资本主义国家发展生产力却非常积极。</p>
<p>目前世界上最先进的机器人技术，是美国波士顿动力公司，一个彻头彻尾的资本制公司。</p>
<div><iframe scrolling="no" frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=w0749vrxbh4" style="min-height:600px;width:100%;height:100%;" allowfullscreen="true"></iframe></div>

<p>因为追逐更高利润，追逐更先进生产力，是资本的天性，哪怕即将抵达共产临界，也会有资本家突破那层隔膜。</p>
<font color="red">你不做，别的资本家做，谁先做谁利润更高。</font>

<p>当然，如果人类科技真发展到那个地步，金钱也许就失去了意义，荣誉和地位才是所有人追逐的目标。</p>
<p>希望这一天早点到来，<font color="red">到时候我带一艘殖民舰，选一个荒凉的小星球，和老婆孩子一起到那里，在数千亿机器人的服务下每天看星星。</font></p>
<font color="red">到了那一天，点赞转发的人，每人我送一颗星球给你玩。</font>

<center>--end--</center>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247525489&amp;idx=1&amp;sn=068a1b2194598b2c1ee71795034c5b6f&amp;chksm=fe0e0c67c97985710f49b8547b3bcfa9678734ce95baeba572e266d9796e5a21fcb0257ed4d5&amp;mpshare=1&amp;scene=1&amp;srcid=1125hrYlosR3l65SIfdyZKgt&amp;sharer_sharetime=1606273428353&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=0d6e55fbf9699bbd58ad1ae84b1d14b920c9a1ff0e7cc91218376e3452615f7e3788ad2dab19b81b29863746469184d5520caf58dd07e3256c2b37ebefc655da7ae97d9884470ca7989a9ae97d38995bfa60d934beca7633dd7483b32e1652bde7f8d6cc4c9345d92bacce989a7790b9232461d46d76bc2a7f1a9e0705b1776f&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A83d0XuPkfb7Ys7GuJlHfyI%3D&amp;pass_ticket=rTtuoKflXWMAZRFpE8f4oSkRd3tKyqvEyOEAQGoYYjPXxZqPLapBxytxLiC6l714&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>docker下搭建prometheus+grafana</title>
    <url>/archives/cf0240fb/</url>
    <content><![CDATA[<p><img src="/archives/cf0240fb/1.png" alt=" "></p>
<h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><p>Prometheus是一个最初在SoundCloud上构建的开源监控系统 。它现在是一个独立的开源项目，为了强调这一点，并说明项目的治理结构，Prometheus 于2016年加入CNCF，作为继Kubernetes之后的第二个托管项目。</p>
<p>Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库。从字面上理解，Prometheus由两个部分组成，一个是监控报警系统，另一个是自带的时序数据库（TSDB）</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>具有由 metric 名称和键/值对标识的时间序列数据的多维数据模型</li>
<li>PromQL，有一个灵活的查询语言</li>
<li>不依赖分布式存储，只和本地磁盘有关</li>
<li>通过 HTTP 的服务拉取时间序列数据</li>
<li>也支持推送的方式来添加时间序列数据</li>
<li>通过服务发现或静态配置发现目标</li>
<li>多种图形和仪表板支持</li>
</ul>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p>此图说明prometheus的体系结构及其一些系统组件</p>
<p><img src="/archives/cf0240fb/2.png" alt=" "></p>
<p>图片左侧是各种数据源主要是各种符合 Prometheus 数据格式的 exporter,除此之外为了支持推动数据 类型的 Agent,可以通过 Pushgateway 组件,将 Push 转化为 Pull。Prometheus 甚至可以从其它的 Prometheus 获取数据,组建联邦集群。Prometheus 的基本原理是通过 HTTP 周期性抓取被监控组件的状态,任意组件只要提供对应的 HTTP 接口 并且符合 Prometheus 定义的数据格式,就可以接入 Prometheus 监控。</p>
<p>图片的上侧是服务发现,Prometheus 支持监控对象的自动发现机制,从而可以动态获取监控对象。 图片中间是 Prometheus Server,Retrieval 模块定时拉取数据,并通过 Storage 模块保存数据。PromQL 为 Prometheus 提供的查询语法,PromQL 模块通过解析语法树,调用 Storage 模块查询接口获取监控数据。 图片右侧是告警和页面展现,Prometheus 将告警推送到 alertmanger,然后通过 alertmanger 对告警进行处 理并执行相应动作。数据展现除了 Prometheus 自带的 webui,还可以通过 grafana 等组件查询 Prometheus 监控数据。</p>
<h3 id="与其他监控系统的比较"><a href="#与其他监控系统的比较" class="headerlink" title="与其他监控系统的比较"></a>与其他监控系统的比较</h3><p>在Prometheus 之前市面已经出现了很多的监控系统,如 Zabbix、Open-falcon 等。那么 prometheus 和这些监控系统有啥异同呢?我们先简单介绍一下这些监控系统</p>
<p>Zabbix 是由 Alexei Vladishev 开源的分布式监控系统,支持多种采集方式和采集客户端,同时支持 SNMP、 IPMI、JMX、Telnet、SSH 等多种协议,它将采集到的数据存放到数据库中,然后对其进行分析整理,如果 符合告警规则,则触发相应的告警。</p>
<p>Zabbix 核心组件主要是 Agent 和 Server,其中 Agent 主要负责采集数据并通过主动或者被动的方式采集数据发送到 Server/Proxy,除此之外,为了扩展监控项,Agent 还支持执行自定义脚本。Server 主要负责 接收 Agent 发送的监控信息,并进行汇总存储,触发告警等。为了便于快速高效的配置 zabbix 监控项,zabbix 提供了模板机制,从而实现批量配置的目的。</p>
<p>Zabbix Server 将收集的监控数据存储到 Zabbix Database 中。Zabbix Database 支持常用的关系型 数据库,如果 MySQL、PostgreSQL、Oracle 等,默认 是 MySQL。Zabbix Web 页面(PHP 编写)负责数据 查询。Zabbix 由于使用了关系型数据存储时序数据,所以在监控大规模集群时常常在数据存储方面捉襟见 肘。为此 zabbix 4.2 版本后也开始支持时序数据存储,不过目前还不成熟。</p>
<p><img src="/archives/cf0240fb/3.png" alt=" "></p>
<p>Open-Falcon 是小米开源的企业级监控工具,用 Go 语言开发而成,包括小米、滴滴、美团等在内的互 联网公司都在使用它,是一款灵活、可扩展并且高性能的监控方案,主要组件包括:</p>
<p>Falcon-agent:用 Go 语言开发的 Daemon 程序,运行在每台 Linux 服务器上,用于采集主机上的各种 指标数据,主要包括 CPU、内存、磁盘、文件系统、内核参数、Socket 连接等,目前已经支持 200 多项监 控指标。并且,Agent 支持用户自定义的监控脚本,</p>
<p>Hearthbeat server:简称 HBS 心跳服务,每个 Agent 都会周期性地通过 RPC 方式将自己的状态上报给 HBS,主要包括主机名、主机 IP、Agent 版本和插件版本,Agent 还会从 HBS 获取自己需要执行的采集任务 和自定义插件。</p>
<p>Transfer:负责接收 Agent 发送的监控数据,并对数据进行整理,在过滤后通过一致性 Hash 算法发送 到 Judge 或者 Graph</p>
<p>Graph:RRD 数据上报、归档、存储的组件。Graph 在收到数据以后,会以 rrdtool 的数据归档方式来存 储,同时提供 RPC 方式的监控查询接口。</p>
<p>Judge:告警模块,Transfer 转发到 Judge 的数据会触发用户设定的告警规则,如果满足,则会触发邮 件、微信或者回调接口。这里为了避免重复告警引入了 Redis 暂存告警,从而完成告警的合并和抑制。</p>
<p>Dashboard:面向用户的监控数据查询和告警配置界面</p>
<p><img src="/archives/cf0240fb/4.png" alt=" "></p>
<p>从开发语言上看,为了应对高并发和快速迭代的需求,监控系统的开发语言已经慢慢从 C 语言转移到 Go。不得不说,Go 凭借简洁的语法和优雅的并发,在 Java 占据业务开发,C 占领底层开发的情况下,准确 定位中间件开发需求,在当前开源中间件产品中被广泛应用。</p>
<p>从系统成熟度上看,Zabbix 是老牌的监控系统:Zabbix 是在 1998 年出现的,系统功能比较稳定,成熟 度较高。而 Prometheus 和 Open-Falcon 都是最近几年才诞生的,虽然功能还在不断迭代更新,但站在巨人 的肩膀之上,在架构设计上借鉴了很多老牌监控系统的经验;</p>
<p>从系统扩展性方面看,Zabbix 和 Open-Falcon 都可以自定义各种监控脚本,并且 Zabbix 不仅可以做到 主动推送,还可以做到被动拉取,Prometheus 则定义了一套监控数据规范,并通过各种 exporter 扩展系统 采集能力;</p>
<p>从数据存储方面来看,Zabbix 采用关系数据库保存,这极大限制了 Zabbix 采集的性能,Open-Falcon 采用 RDD 数据存储,并且可以对接到 OpenTSDB,而 Prometheus 自研一套高性能的时序数据库,在 V3 版 本可以达到每秒千万级别的数据存储,通过对接第三方时序数据库扩展历史数据的存储;</p>
<p>从配置和维护的复杂度上看,prometheus 只有一个核心 server 组件,一条命令便可以启动,相比而言, 其他系统配置相对麻烦,尤其是 open-falcon。</p>
<p>从社区活跃度上看,目前 Zabbix 社区活跃度比较低,Open-Falcon 虽然也比较活跃,但基本都是国内 的公司参与,Prometheus 在这方面占据绝对优势,社区活跃度最高,并且受到 CNCF 的支持,后期的发展 值得期待;</p>
<p>从容器支持角度看,由于 Zabbix 出现得比较早,当时容器还没有诞生,自然对容器的支持也比较差。 Open-Falcon 虽然提供了容器的监控,但支持力度有限。Prometheus 的动态发现机制,不仅可以支持 swarm 原生集群,还支持 Kubernetes 容器集群的监控,是目前容器监控最好解决方案。Zabbix 在传统监控系统中, 尤其是在服务器相关监控方面,占据绝对优势。伴随着容器的发展,Prometheus 开始成为主导及容器监控 方面的标配,并且在未来可见的时间内被广泛应用。总体来说,对比各种监控系统的优劣,Prometheus 可 以说是目前监控领域最锋利的“瑞士军刀”了。</p>
<h2 id="使用docker搭建监控linux主机"><a href="#使用docker搭建监控linux主机" class="headerlink" title="使用docker搭建监控linux主机"></a>使用docker搭建监控linux主机</h2><p>可以参考官方方法：<a href="https://prometheus.io/docs/guides/node-exporter/">https://prometheus.io/docs/guides/node-exporter/</a><br>可以知道，监控linux主机需要node-exporter，所以docker镜像需要node-exporter，prometheus，grafana</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>docker pull prom/node-exporter</code><br><code>docker pull prom/prometheus</code><br><code>docker pull grafana/grafana</code></p>
<h3 id="启动node-exporter"><a href="#启动node-exporter" class="headerlink" title="启动node-exporter"></a>启动node-exporter</h3><p>node_exporter设计用于监控主机系统。不建议将其部署为Docker容器，因为它需要访问主机系统。请注意，您要监视的任何非根安装点都需要绑定到容器中。如果启动容器以进行主机监视，请指定path.rootfs参数。此参数必须与host root的bind-mount中的路径匹配。node_exporter将path.rootfs用作访问主机文件系统的前缀。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; run_node_exporter.sh &lt;&lt; EOF</span><br><span class="line">docker stop node_exporter</span><br><span class="line">docker rm node_exporter</span><br><span class="line">docker run -d --name node_exporter \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=<span class="string">&quot;host&quot;</span> \</span><br><span class="line">--pid=<span class="string">&quot;host&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/proc:/host/proc:ro&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/sys:/host/sys:ro&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/:/rootfs:ro&quot;</span> \</span><br><span class="line">prom/node-exporter \</span><br><span class="line">--path.procfs=/host/proc \</span><br><span class="line">--path.rootfs=/rootfs \</span><br><span class="line">--path.sysfs=/host/sys \</span><br><span class="line">--collector.filesystem.ignored-mount-points=<span class="string">&#x27;^/(sys|proc|dev|host|etc)($$|/)&#x27;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>启动后访问<a href="http://IP:9100/metrics">http://IP:9100/metrics</a>，正常会显示：</p>
<p><img src="/archives/cf0240fb/5.png" alt=" "></p>
<p>这些都是收集到数据，有了它就可以做数据展示了</p>
<h3 id="启动prometheus"><a href="#启动prometheus" class="headerlink" title="启动prometheus"></a>启动prometheus</h3><p>新建目录prometheus，编辑配置文件prometheus.yml:<br><code>mkdir -p prometheus/conf</code><br><code>vim prometheus/conf/prometheus.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">60s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;IP:9090&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;IP:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>
<p>IP修改为自己服务器IP，其他名字如job_name可以自行修改，如果要监控多台服务器，则在targets里面添加<br>参考官方配置：<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></p>
<p>修改目录权限，默认prometheus使用nobody的内置用户，对应UID为65534：<br><code>chonw -R 65534.root prometheus</code><br><code>chmod -R 775 prometheus</code></p>
<p>启动container：<br><code>docker run  -d -p 9090:9090 -v /opt/prometheus/conf:/etc/prometheus -v /opt/prometheus:/prometheus prom/prometheus</code></p>
<p>container默认配置文件在/etc/prometheus/prometheus.yml<br>启动后访问：<a href="http://IP:9090/graph">http://IP:9090/graph</a>，正常显示：</p>
<p><img src="/archives/cf0240fb/6.png" alt=" "></p>
<p>访问targets，<a href="http://IP:9090/targets">http://IP:9090/targets</a>，正常显示：</p>
<p><img src="/archives/cf0240fb/7.png" alt=" "></p>
<h3 id="启动grafana"><a href="#启动grafana" class="headerlink" title="启动grafana"></a>启动grafana</h3><p>参考官方配置：<a href="https://grafana.com/docs/grafana/latest/installation/docker/">https://grafana.com/docs/grafana/latest/installation/docker/</a></p>
<p>新建目录来存储grafana的数据：<br><code>mkdir -p grafana/&#123;data,logs&#125;</code></p>
<p>修改目录权限，默认grafana使用用户grafana，对应UID为472：<br><code>chonw -R 472.root grafana</code><br><code>chmod -R 775 grafana</code></p>
<p>启动container：<br><code>docker run -d -p 3000:3000 --name=grafana -v /opt/grafana/data:/var/lib/grafana -v /opt/grafana/logs:/var/log/grafana grafana/grafana</code></p>
<p>访问URL：<a href="http://IP:3000">http://IP:3000</a><br>默认用户名和密码都是admin，首次登录需要修改密码，密码设置完成之后，就会跳转到首页，点击Add data source，由于使用的是镜像方式Prometheus：</p>
<p><img src="/archives/cf0240fb/8.png" alt=" "></p>
<p><img src="/archives/cf0240fb/9.png" alt=" "></p>
<p>name名字写Prometheus，type 选择Prometheus，因为数据都从它那里获取，url 输入Prometheus的ip+端口，点击下面的Save &amp; Test，如果出现绿色的，说明ok了。<br>使用grafana 的仪表盘模板导入ID=8919的仪表盘 ,点击 import导入即成功 (如果是docker监控模板推荐 8321)</p>
<p><img src="/archives/cf0240fb/10.png" alt=" "></p>
<p><img src="/archives/cf0240fb/11.png" alt=" "></p>
<p>导入后效果：</p>
<p><img src="/archives/cf0240fb/12.png" alt=" "></p>
<h2 id="监控windows主机"><a href="#监控windows主机" class="headerlink" title="监控windows主机"></a>监控windows主机</h2><p>node-exporter是监控linux主机使用的，官方没有监控windows的插件，可以从<a href="https://github.com/prometheus-community/windows_exporter/releases">https://github.com/prometheus-community/windows_exporter/releases</a>下载<br>下载后双击安装即可，默认端口为9182，然后访问<a href="http://IP:9182">http://IP:9182</a>，会出现跟node-exporter一样的页面，然后修改prometheus.yml文件，添加windows主机的监控项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">60s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;10.1.1.8:9090&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;10.1.1.8:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">windows</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;10.1.1.11:9182&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">home_win10</span></span><br></pre></td></tr></table></figure>
<p>重启prometheus的容器，此时再次访问<a href="http://IP:9090/targets">http://IP:9090/targets</a>，可以看到会多一个endpoint，就是刚配置上去的windows主机</p>
<p><img src="/archives/cf0240fb/13.png" alt=" "></p>
<p>回到grafana的dashboard市场<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a>，搜索windows，找到dashboard的ID</p>
<p><img src="/archives/cf0240fb/14.png" alt=" "></p>
<p>最后重复跟linux一样的导入操作即可</p>
<p><img src="/archives/cf0240fb/15.png" alt=" "></p>
<h2 id="监控docker"><a href="#监控docker" class="headerlink" title="监控docker"></a>监控docker</h2><p>使用docker镜像google/cadvisor，配置参考<a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a><br>配置完毕后访问<a href="http://ip:设置端口">http://ip:设置端口</a>可以查看网页：</p>
<p><img src="/archives/cf0240fb/16.png" alt=" "></p>
<p>其他跟监控windows一样，修改prometheus配置文件，新增一项job_name：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;10.1.1.8:8070&#x27;</span>]</span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>
<p>模板可以直接搜cadvisor</p>
<h2 id="grafana忘记登录密码"><a href="#grafana忘记登录密码" class="headerlink" title="grafana忘记登录密码"></a>grafana忘记登录密码</h2><ol>
<li>参考官方方法：<a href="https://grafana.com/docs/grafana/latest/administration/cli/#reset-admin-password">https://grafana.com/docs/grafana/latest/administration/cli/#reset-admin-password</a><br>进入grafana的container，运行<br><code>grafana-cli admin reset-admin-password xxx</code></li>
<li>google方法：<br>找到grafana的数据文件grafana.db<br>进入数据库，如：<br><code>sqlite3 /var/lib/grafana/grafana.db</code><br>查看表：<br>.table<br>查看表数据：<br><code>select * from user;</code><br>更改密码为admin:<br><code>update user set password = &#39;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&#39;, salt = &#39;F3FAxVm33R&#39; where login = &#39;admin&#39;;</code><br>退出：<br>.exit<br>更改后，会重置密码为admin</li>
</ol>
<p><em>参考出处</em><br><em><a href="https://www.cnblogs.com/wangxu01/articles/11646053.html">https://www.cnblogs.com/wangxu01/articles/11646053.html</a></em><br><em><a href="https://www.cnblogs.com/lz1996/p/12741489.html">https://www.cnblogs.com/lz1996/p/12741489.html</a></em><br><em><a href="https://www.jianshu.com/p/87e1ca5b84c9">https://www.jianshu.com/p/87e1ca5b84c9</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>丁戊奇荒和粮食规律</title>
    <url>/archives/69bbce32/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木  <em>首发于2019-12-15</em></p>
<p><img src="http://img.soogif.com/20201116113326934.gif" alt></p>
<p>1875年，中国的气候悄悄发生了变化，华北地区，尤其是山西省的降雨突然减少，土地变的干旱。</p>
<p>根据文献记载，此时已经有零星地区出现了歉收的记录，但在当时，并未引起人们的警觉。</p>
<p>1876年，南方各省出现了大暴雨，农作物损失惨重。但北方各省却出现了大面积的干旱，随后又遭遇了蝗灾，山西的一些地区，已经有人开始靠吃树皮活命。</p>
<p>而那些以为熬过今年，等明年就能吃上饭的灾民，做梦也不会想到，在未来的两年，连树皮都成了奢侈物。</p>
<p>1877年，也就是光绪三年，大饥荒正式拉开序幕。</p>
<p>这一年，干旱依旧，华北各地依然大面积歉收，旱情没有丝毫缓解，但民间的储备粮已经彻底耗尽。</p>
<p>清政府立即进行救灾行动，但虚弱的政府给予的赈灾粮杯水车薪。</p>
<font color="red">当粮缸彻底见底时，大恐怖降临了。</font>

<p>英国外交报告中记录：</p>
<blockquote>
<p>吃人已非个别现象，人们组合成不同的团伙，集体外出“狩猎”，将猎获的俘虏杀死烹食。</p>
</blockquote>
<p>清政府中央救灾大员阎敬铭上书朝廷： </p>
<blockquote>
<p>“往来二三千里，目之所见，皆系鹄面鸠形；耳之所闻，无非男啼女哭。枯骸塞途，绕车而过，残喘呼救，望地而僵。”<br>陕西“赤地千里，几不知禾稼为何物矣……饥民相率抢粮，甚而至于拦路纠抢，私立大纛，上书‘王法难犯，饥饿难当’八字。”</p>
</blockquote>
<p>生产秩序崩溃后，次年灾情依旧，1878年的农作物再次歉收。</p>
<p>这一年，北方的灾荒已经到了毛骨悚然的程度，有一个曾经去过灾区的人回忆说：</p>
<blockquote>
<p>他们路过灾区的时候就听自己这马车在行进的时候”咔嚓咔嚓“直响，他探出头一看，发现路上全是累累白骨，那咔嚓声是车轮碾碎死人骨头的声音。<br>这人吓得缩在车里瑟瑟发抖不敢再看，没想到过了一会，刮风了，大风吹进车里很多黑色的毛发，吹的那人脸上身上都是，那人摘干净仔细一看，吓得差点尿裤子里，他发现那些毛发全是死人的头发，有的头发还能辨认出死者生前的发型，当时的灾区，饿殍遍野，那些荒野上的尸体的头皮已经被喜鹊和乌鸦啄烂了，死尸的头发被大风吹遍原野，于是山西大地上吹起黑色的风。。。<br>就这样，灾民们曾经留在这个世界的最后证据也在风中吹散了。。。</p>
</blockquote>
<p>类似这样的场景和描述，在《丁戊奇荒》这本书里，记载的数不胜数，我就不一一赘述了。</p>
<p><img src="/archives/69bbce32/1.png" alt=" "></p>
<p>曾国藩的弟弟曾国荃曾经这么评价丁戊奇荒：</p>
<blockquote>
<p>“就是地狱也不过如此了。“</p>
</blockquote>
<p>这场大灾荒从1876年正式拉开序幕，持续到1879年才得到缓解，期间又以1877和1878这两年死亡人数最多。</p>
<p>这次大旱灾影响的居民人数在1.6亿到2亿之间，约占当时清朝人口的一半，直接死于饥荒和瘟疫的人数在一千万以上，其中山西500万人，而逃离灾区的灾民大约有2000万人。</p>
<p>清朝官员称这场旱灾为：</p>
<blockquote>
<p>“有清一代二百三十余年末见之惨凄，未闻之悲痛”。</p>
</blockquote>
<p>1877年为丁丑年，1878年为戊寅年。</p>
<p>所以这次大灾荒，被称之为<font color="red">丁戊奇荒。</font></p>
<hr>
<center><font color="orange" size="4">1</font></center>

<hr>
<p>现在的中国人，每天最操心的事情不是如何填饱肚子，而是怎么把身上的赘肉给减下去。</p>
<p>体重计上的数字时刻在提醒你，<font color="red">把碗里的肉扔掉，别再吃了。</font></p>
<p>中国人已经忘记了饥饿的滋味，也不认为自己会吃不上饭。</p>
<p>但是国家没有忘，粮为国之本，中国对粮食安全的重视程度为世界之最。</p>
<p>农业，是一个靠天吃饭的行业，气候对收成的影响非常大。今年能够产出多少农作物，老天爷说了算。</p>
<font color="red">不管十年一遇，还是百年一遇，我们总会有那么不走运的几年里，遇到特大自然灾害。</font>

<p>而粮食这种东西，是世界上刚需程度最大的商品，极其特殊。</p>
<p>一个普通的成年男性，一个月只需要25斤粮食，重体力劳动者也只需要45斤。</p>
<p>按3块钱一斤的粮价计算，一个月75块就可以保证你饿不死。</p>
<p>但哪怕你富如马云，身家数千亿，你一个月也不可能吃250斤粮食。</p>
<p>你可以吃很贵的山珍海味，但是你的粮食消耗总量并不大，毕竟富豪也不是外星人。</p>
<p>粮食多了，我们可以拿来养猪、养牛、甚至酿酒，改善饮食结构。</p>
<p>但粮食少了，问题就大条了。</p>
<font color="red">粮食的绝对刚需就体现在，它永远只能多不能少。</font>

<p>假设世界上的铁矿石产量突然减少10%，那么铁矿石价格会上涨10%吗？</p>
<p>不，你错了，价格会大幅上涨，<font color="red">直到有10%的下游企业买不起铁矿石为止。</font></p>
<p>我们可以没有钢铁，也可以没有石油，但是不能没有粮食。</p>
<p>粮食的刚需程度，远大于铁矿石。</p>
<font color="red">偏偏粮食的需求弹性还特别小，富人没办法多吃，穷人也没办法少吃。

如果粮食减产10%，那么带来的绝对不是每人少吃10%的粮食，而是饿死10%的人为止。
富人绝对不愿意省那点钱去挨饿，所以粮价会无限上涨，直到有10%的人吃不起粮食被饿死。因为他们对粮食的需求，只有饿死的时候才会停止。</font>

<p>大家小的时候，都玩过抢板凳的游戏。</p>
<p>如果N个人，有N个板凳，每人只能坐一个板凳的话，那么大家都很淡定，慢悠悠的走到空闲的板凳那里坐下，大家都很有风度，也不着急。</p>
<p>但如果只给N个人提供N-1个板凳的话，大家就像疯了一样的抢板凳，以最快的速度抢凳子，同时还疯狂的推挤旁边的人，毫无优雅和风度，这还是游戏惩罚很低的情况下。</p>
<font color="red">如果告诉这N个人，抢不到板凳的那个人会死。相信我，这个游戏会瞬间血腥激烈无数倍。

当粮食短缺10%甚至5%的时候，就会开启一场同样的游戏，异常残酷。</font>

<p>2018年，印度的洋葱丰收，部分地区的价格甚至跌到了1卢比/公斤。</p>
<p>但2019年，印度的洋葱出现了歉收，价格上升到25卢比/公斤。</p>
<p>自2019年9月开始，印度洋葱的价格疯狂上涨，目前已经涨到了80卢比/公斤。</p>
<p>之所以会出现3~80倍这么恐怖的涨幅，是因为洋葱是咖喱的主材料，而印度人特别喜欢吃咖喱。</p>
<p>这只是做饭的辅料歉收，如果是粮食不足，你可以想象，价格会飙升到何等地步。<br>袁隆平院士在一次采访时曾经说过：</p>
<blockquote>
<p>“一粒粮食能够救一个国家，也可以绊倒一个国家。要把中国人的饭碗牢牢地掌握在中国人自己手里。”</p>
</blockquote>
<hr>
<center><font color="orange" size="4">2</font></center>

<hr>
<p>现在，你应该已经了解到缺粮的可怕之处了，那么国家怎么做才能避免出现缺粮的情况呢？</p>
<font color="red">首先是科学，科学技术是第一生产力。</font>

<p>农药、化肥、现代水利设施、培育各种良种，都是稳定农业生产最强大的手段。</p>
<p>在这些科学技术发明出来之前，哪怕是西方强国也被粮食问题所困扰。</p>
<p>1500年到1800年间，法国一共发生过40次全国性饥荒；1523年到1623年间，英国一共发生17次全国性饥荒，平均7年一次。</p>
<p>1845-1851年，一场虫害横扫爱尔兰，导致了超级饥荒的诞生，6年时间里，爱尔兰的人口从800万骤降到400万，成为了人间炼狱。</p>
<p>农业科技爆发+人口增长停滞后，全世界的粮食问题，才算得到缓和。</p>
<p>目前，中国的主要农作物品种平均每隔5年，就大规模更新换代一次，同时在水利设施上持续大规模投资，并大规模推广高产高效的农业生产技术。</p>
<p>今天中国粮食作物平均亩产为374.7公斤，超过新中国成立初期的5倍多，同时远超世界平均水平。</p>
<p><img src="/archives/69bbce32/2.png" alt=" "></p>
<p>自2004年以来，中国的粮食生产实现“十五连丰”，在水利设施上的投资，和一群如袁隆平院士这样的农业科学家，功不可没。</p>
<font color="red">然后，是坚守18亿亩耕地红线。</font>

<p>中国很久以前，就划定了18亿亩的耕地红线，这是红线，也是底线。</p>
<p>这些年，土地疯狂涨价，很多地方到处卖地，屡屡尝试侵占基本农田，试图吹风中央，把18亿亩这个标准降一降。</p>
<p>但不管卖地的利益再怎么大，18亿亩红线都坚决不能碰，宁可让很多城市被迫高价拆城中村，也绝不允许他们大肆占用城市周边的农田。</p>
<p>留给城市发展的农田，有，但给的数额是有限的，并不是无限的。</p>
<font color="red">18亿亩耕地的红线，绝不允许被挑战。</font>

<p>我国拥有全球9%的耕地、6%的淡水资源，却需要养活世界近20%的人口。</p>
<p>不管中国再怎么努力，也不可能把粮食的人均拥有量提升到和美国一样多。</p>
<p>所以，中国的粮食安全战略，是吃得饱+吃得好。</p>
<p>什么叫吃得饱，就是在假设国外对中国实行粮食封锁，一切全靠自力更生的前提下，中国能够凭手里的耕地和农业技术，在不那么极端的气候灾害面前，确保全国人有饭吃，不会被饿死。</p>
<p>这就叫吃得饱战略，也是18亿亩耕地红线的由来。</p>
<p>但是在和平时期，外国愿意卖给中国粮食的时候，中国适当进口一些农产品，提升人均粮食占有量，让中国人能吃得上鸡鱼肉蛋。</p>
<font color="red">充沛的食物供应，让你看到肉就想吐、天天头疼减肥的那种食物供应，给人民带来的幸福感和安全感，是无以伦比的。</font>

<p>这就叫吃得好战略，也是目前正在执行的粮食战略。</p>
<font color="red">最后，就是粮食储备战略。</font>

<p>哪怕水利设施修的再好，培育的良种再优秀，碰到极端气候灾难，你也没辙。</p>
<font color="red">别管十年一遇还是百年一遇，时间拖的足够长，你总有机会碰到的。

但这样的事情，你连一次都承受不起。</font>

<p>所以，我们需要粮食储备，大量的储备。</p>
<p>2005年12月到2008年7月，全球气候异常，大量国家和地区粮食歉收。</p>
<p>按粮食专家的测算，全球差不多有1000万人的粮食缺口。</p>
<p>总共60亿人，产生了1000万人的粮食缺口供应，粮食产量比最低供应线少了0.15%，就少那么一点点。</p>
<p>结果，国际小麦的价格从300涨到1330（单位：蒲尔/美分），涨幅3.4倍，国际玉米价格从185涨到758，涨了3.2倍。</p>
<p>这里面有国际炒家的因素，但你敢不买么，你愿意成为那0.15%的人口么？</p>
<p>所以这是阳谋，你只能买。</p>
<p>而同期，中国国内的粮食价格，只上涨了0.7倍，远远小于国际涨幅。</p>
<p>大量涌入中国境内的投机炒作资本，全被国家队给打服了。</p>
<p>在国内粮价持续暴涨时，中国官方开始抛储了。</p>
<p>一开始，不管中国抛出多少吨储备粮，多方都一口吃掉，粮价持续上涨。</p>
<p>然后，中国开始逐步加大抛储强度，一开始是半个月一抛，后来是每周一抛，最密集的时候，每1~2天抛储一次。</p>
<p>最后多方都傻了，中国到底有多少吨储备粮，不留点做军粮么，到底要抛储到什么时候才算结束。</p>
<p>这个时候，中国放出风声，说中国的储备粮有一亿吨，够全国人不种田吃一年的，投机资本不怕死就继续来炒。</p>
<p>中国的储备粮数量一直是国家绝密，谁也不知道有多少。至于这个一亿吨是真的假，炒家也不敢确认。</p>
<p>但万一是真的呢？</p>
<p>恰逢金融危机，连锁反应之下，粮价暴跌，中国境内的粮食炒家血本无归。</p>
<p>等粮价暴跌之后，中国再慢慢吃回自己的储备。</p>
<p>这轮粮食攻防战，中国完胜，靠的就是天量的粮食储备战略。</p>
<p>在最先进的储备技术下，粮食最多只能放3~5年，然后就变成了陈化粮。</p>
<p>为什么我国土地那么少，还力推乙醇汽油，把大量的粮食做成乙醇给汽车烧掉，就是为了处理这些陈化粮。</p>
<p>把新鲜的粮食放成陈化粮，会带来巨大的损失，但是这些损失，国家愿意承受，这等于是在给国家买保险。</p>
<font color="red">缺粮导致的损失，和粮价相比，要贵百倍千倍。</font>

<p>而源源不断轮换出来的陈化粮，必须通过乙醇工厂来处理掉。</p>
<p>所以，当你使用乙醇汽油的时候，其实就是在给中国的粮食安全做贡献。</p>
<p>当时，这0.15%的缺口，是靠非洲人给消化的。</p>
<p><img src="/archives/69bbce32/3.png" alt=" "></p>
<p>这就是中国的储备粮制度，是中国人饭碗的最后保护神，<font color="red">我们不想成为非洲人。</font></p>
<hr>
<center><font color="orange" size="4">3</font></center>

<hr>
<p>即便中国有世界上最庞大的水利设施，即便中国有一群袁隆平这样的农业科学家，即便中国有世界上最强的粮食储备。</p>
<p>中国的官方，依然对粮食问题极度重视。</p>
<p>每次中国出现区域性旱灾，都能惊动国家最高层级的人物去视察处理，这一切，都是在确保中国人的饭碗。</p>
<p><img src="/archives/69bbce32/4.png" alt=" "></p>
<font color="red">虽然粮食不值钱，但粮食的供应却是国之命脉，绝对不允许有丝毫动摇。</font>

<p>如果我不出去购物的话，我家里所有的存粮，把冰箱里的腊肉、巧克力、挂面什么的都算上，最多吃一星期就断粮了。</p>
<p>但我丝毫不担心我会饿死，每次外出也只买三四天的食物，以确保新鲜。</p>
<p>我观察了一下，我整个小区，甚至整个城市都是这样，在家里储备几百斤粮食的人，根本不存在。</p>
<p>大家从不担心自己未来会吃不上饭，<font color="red">国人能有这么强烈的信心，是对中国粮食安全工作人员的最大褒奖。</font></p>
<p>1978年之后的新一代的中国人，已经忘了饥饿的滋味。</p>
<p>希望这样的盛世能持续下去，<font color="red">希望丁戊奇荒永远不会再出现在中国大地上，无论怎样极端的气候灾害，都不允许出现。</font></p>
<p>中国的粮食安全储备战略花再多钱，我认为都值！</p>
<font color="red">因为这些东西，是拿来给中国人保命用的。</font>

<center>-end-</center>
]]></content>
      <categories>
        <category>文摘</category>
        <category>政治</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域常用设置</title>
    <url>/archives/7bb52d79/</url>
    <content><![CDATA[<p><img src="/archives/7bb52d79/1.png" alt></p>
<h2 id="指定域用户拥有添加计算机进域权限"><a href="#指定域用户拥有添加计算机进域权限" class="headerlink" title="指定域用户拥有添加计算机进域权限"></a>指定域用户拥有添加计算机进域权限</h2><h3 id="禁用所有用户添加权限"><a href="#禁用所有用户添加权限" class="headerlink" title="禁用所有用户添加权限"></a>禁用所有用户添加权限</h3><p>默认domain user拥有10个添加计算机进域的权限，需要把ms-DS-MachineAccountQuota参数改为0，即禁止所有用户添加进域，可以打开ADSI编辑器查看和更改：<br>点击开始—管理工具—ADSI编辑器，右击ADSI编辑器连接到默认确定，点击展开默认上下文，右击文件夹属性，找到ms-DS-MachineAccountQuota，修改为0即可</p>
<p><img src="/archives/7bb52d79/2.png" alt></p>
<h3 id="单独分配用户或组权限"><a href="#单独分配用户或组权限" class="headerlink" title="单独分配用户或组权限"></a>单独分配用户或组权限</h3><ol>
<li>首先开启Active Directory用户和计算机管理器的高级功能，拥有更多设置：<br>打开Active Directory用户和计算机管理器，点击查看，点击高级功能</li>
<li>找到Computers容器，右击打开属性，在安全一栏，点击高级，权限框中单击以选中创建计算机对象和 删除计算机对象，确定就OK。这时，该用户或组就拥有该权限啦。</li>
</ol>
<p><img src="/archives/7bb52d79/3.png" alt></p>
<h2 id="禁止非域计算机不能访问服务器共享"><a href="#禁止非域计算机不能访问服务器共享" class="headerlink" title="禁止非域计算机不能访问服务器共享"></a>禁止非域计算机不能访问服务器共享</h2><p>要禁止非域计算机访问服务器资源设置比较复杂，需要配合IP策略来限制，可以参考<a href="https://blog.51cto.com/weber213/676492">https://blog.51cto.com/weber213/676492</a>，但实际上，只要灵活配置用户权限，一样可以达到此效果：<br>非域计算机想访问服务器共享，需要输入用户名和密码，外来用户没有账号从而杜绝安全问题。但是如果使用了员工的域账号来访问，岂不是一样不安全？可以针对该用户取消访问所有计算机，只允许从某个计算机登录，这样无论是公司其他电脑还是外面的电脑使用该账号登录，也会提示没权限访问该资源的。</p>
<p><img src="/archives/7bb52d79/4.png" alt></p>
<h3 id="设置从网络访问本地计算机权限"><a href="#设置从网络访问本地计算机权限" class="headerlink" title="设置从网络访问本地计算机权限"></a>设置从网络访问本地计算机权限</h3><p>有时候设置了域账户绑定计算机访问后，也可以设置该用户不能从网络访问此计算机：<br>点击开始—管理工具—本地安全策略，在本地策略—用户权限分配一项，找到从网络访问此计算机，然后就添加只允许从网络访问此计算机的账户或组就行。</p>
<p><img src="/archives/7bb52d79/5.png" alt></p>
<h2 id="域策略更新及导出"><a href="#域策略更新及导出" class="headerlink" title="域策略更新及导出"></a>域策略更新及导出</h2><p>强制刷新域策略gpupdate /force</p>
<p>导出域策略结果GPRESULT /H d:\GPReport.html</p>
<p>查看当前策略rsop.msc</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB架构简述</title>
    <url>/archives/5c1c7ec1/</url>
    <content><![CDATA[<p><img src="/archives/5c1c7ec1/1.png" alt=" "></p>
<h2 id="WEB访问过程"><a href="#WEB访问过程" class="headerlink" title="WEB访问过程"></a>WEB访问过程</h2><p>首先简述一下访问网页的过程：<br>在浏览器地址栏输入网址如京东：”jd.com“回车，浏览器很智能，会把你输入的地址转换成标准url即：<a href="http://jd.com/:80">http://jd.com/:80</a>，最后面”/“指请求资源的uri，不带任何字符则是请求根目录，”:80”指端口号，指访问地址的对应端口，默认”/“和80端口会隐藏，让普通用户看起来不疑惑，专注于网页内容。你可能看到返回的网址会变成<a href="https://www.jd.com">https://www.jd.com</a>，是因为京东的web服务器对用户输入的jd.com做处理了，返回一个安全的页面。实际是发送http请求。<br>浏览器会先对域名进行DNS解析，把域名解析成公网地址。浏览器会通过以下几步来获取解析：</p>
<ol>
<li>先检查浏览器本身DNS缓存</li>
<li>查找系统HOST文件是否有对应记录</li>
<li>查找系统DNS缓存</li>
<li>查找本地的DNS服务器缓存</li>
<li>发送DNS请求到根服务器来获得IP地址<br>获取到IP地址后，就向该地址服务器发送HTTP请求，服务器响应请求并返回一个页面，浏览器收到响应后渲染页面。</li>
</ol>
<p><img src="/archives/5c1c7ec1/2.png" alt=" "></p>
<h3 id="从点击访问到看到页面经历哪些时间"><a href="#从点击访问到看到页面经历哪些时间" class="headerlink" title="从点击访问到看到页面经历哪些时间"></a>从点击访问到看到页面经历哪些时间</h3><ol>
<li>DNS解析时间：通常在20-50ms左右</li>
<li>数据传输时间：发送HTTP请求（跟网络带宽有关），接收并返回数据（请求数据内容大小有关）</li>
<li>处理请求时间：建立连接，等待服务器响应（服务器查库，计算，生成页面）</li>
<li>浏览器渲染时间（浏览器算法不一样渲染的时间也不一样）</li>
</ol>
<h2 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a>单机架构</h2><p>LNMP+ECSHOP开源商城搭建在同一台服务器</p>
<ol>
<li>单点故障（可以定期备份）</li>
<li>性能有瓶颈</li>
<li>web和db在一起会相互影响（web忙的时候查询数据库，数据库也很忙，就会很慢，web处理请求就会很慢，就会一堆请求排队，会导致web更慢，这是一个叠加的效应）</li>
</ol>
<h2 id="组件及读写分离"><a href="#组件及读写分离" class="headerlink" title="组件及读写分离"></a>组件及读写分离</h2><p>实现方法：</p>
<ol>
<li>在web1上做负载均衡把请求分发到两台web服务器上，在web2上做备节点</li>
<li>弄两域名如web1.xxx.com和web2.xxx.com，无论用户访问哪个域名都是同一个页面（原理跟游戏选网络节点一样，是电信还是联通或者软件站下载通道），所有技术都是有应用场景，整个框架的设计是根据业务来决定的，而不是新技术。</li>
<li>DNS轮询，使用单条域名绑定多条A记录，有负载均衡的局限性：<ul>
<li>无法快速踢出故障节点：假如其中一台服务器宕机，即其中一条记录失效，需要手动删除失效的记录，但是DNS有缓存时间，在DNS时间失效前，访问就会出问题，当然可以使用脚本当宕机就直接切换IP。</li>
<li>负载不均衡：服务器硬件配置不同，DNS缓存影响，不同地区DNS缓存劫持不一样，有些地区永远获取到同一个地址</li>
</ul>
</li>
</ol>
<p>DNS轮询应用场景：</p>
<ol>
<li>有多个集群，有多个A记录，配成智能DNS，根据客户IP来做</li>
<li>全局负载均衡</li>
<li>用于主机流量的切换或节点的替换，给域名添加多一条记录就是新主机IP，在DNS失效前就是用DNS轮询</li>
</ol>
<p><img src="/archives/5c1c7ec1/3.png" alt="单机架构到集群演变"></p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>什么是集群<br>多台同构或异构的服务器集中起来对外提供相同的服务，可以叫这堆服务器做集群，服务器不一定是要全部是linux或windows的，也可以是异构的。<br>分类：</p>
<h3 id="负载均衡LB"><a href="#负载均衡LB" class="headerlink" title="负载均衡LB"></a>负载均衡LB</h3><p>提高资源利用率，使用多种调度策略，尽量把任务分发得更均匀。当出现故障能够快速切换，但不能把负载均衡配置在web服务器上，可以放到DB服务器上，因为要有第三方仲裁才能确保宕机的消息是可靠的。不能单纯PING不同就认为节点DONM了，有可能是到该节点的网络不通，也可能是网络拥堵，并不意味着服务器宕机，如果这时候切换，就会造成混乱。需要过一段时间再尝试PING，需要有次数限制，如果再不通，就设置一个SLEEP时间，过了SLEEP时间再尝试。经典案例是支付宝回调通知的一种方式。实现：</p>
<ol>
<li>DNS轮询</li>
<li>HTTP重定向：使用location跳转，一般为业务原因需要用到，或者备案原因</li>
<li>反向代理：代理用户的请求，向真实服务器发送请求，再把结果返回给用户，下载类网站不适合使用反向代理局限于带宽和性能问题，如果是下载类很容易把带宽占满，同时有高并发的情况，性能会很差。可以马上停掉从库，主库读写，然后从库再弄一个反向代理来分流，后面再优化架构。</li>
<li>IP负载均衡：<ul>
<li>如LVS的NAT模式：LB充当网关的功能，用户发送请求，目的地址是VIP虚拟IP，源地址是用户IP，到达LB设备后进行调度，发送数据包目的地址为服务器IP，源地址是用户IP，到达服务器后，服务器根据用户IP发送给网关，也就是LB设备，LB设备再修改数据包，把源IP改为VIP。这样最大特点是服务器的网关必须要设置成LB服务器的VIP，不然就无法通讯，LB设备对双向的数据包进行改写，与反向代理不同的是，LVS不向用户负责，只负责转发，不负责请求。而且LVS不支持健康检查，健康检查是keepalived或者是其他软件如heartbeat里面的active director做的。</li>
<li>LVS的DR模式：用户请求到达LB设备，LB设备进行调度，转发数据包到服务器，服务器直接返回给用户，不再经过LB设备。此模式实际上是二层负载均衡，LB设备只修改MAC地址（ARP协议）。缺点是配置麻烦，不能跨局域网，监听端口不能改。下载类可以用DR模式，少了一次转发。</li>
</ul>
</li>
</ol>
<h3 id="高可用HA"><a href="#高可用HA" class="headerlink" title="高可用HA"></a>高可用HA</h3><p>健康检查，高可用性，防止脑裂—仲裁设备：关机。两台反向代理服务器合理利用如何实现：</p>
<ol>
<li>多组互备：使用两套集群，集群A中代理A为主，B为备，集群B中代理A为备，B为主。缺点：雪崩效应</li>
<li>备机做服务器监控，数据库备份或者定时任务等</li>
<li>做web节点</li>
</ol>
<h3 id="高性能HPC"><a href="#高性能HPC" class="headerlink" title="高性能HPC"></a>高性能HPC</h3><h2 id="WEB架构集群"><a href="#WEB架构集群" class="headerlink" title="WEB架构集群"></a>WEB架构集群</h2><h2 id="WEB架构缓存"><a href="#WEB架构缓存" class="headerlink" title="WEB架构缓存"></a>WEB架构缓存</h2><p>打开京东网站，查看源代码，可以看到有link rel的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//misc.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img10.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img11.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img12.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img13.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img14.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img20.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img30.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//d.3.cn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//d.jd.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//www.jd.com/favicon.ico&quot;</span> <span class="attr">mce_href</span>=<span class="string">&quot;//www.jd.com/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个是HTML5的新功能，叫DNS预获取。在HTTP头部插入，把页面内所有需要获取DNS的元素先获取缓存一遍，这样当请求到对应资源的时候就会很快。</p>
<h2 id="WEB架构存储"><a href="#WEB架构存储" class="headerlink" title="WEB架构存储"></a>WEB架构存储</h2><h2 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h2><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有绝对好的架构，只有合适的架构，当引入一个新的架构，解决了当前问题，同时也会产生其他问题。没必要指点他人架构，存在即合理，当你看到别人的架构，多想想为何这样用，这种架构的好处是什么，优点是什么。一个好的架构，就是在有限的资源里，把架构做到最优，能充分利用所有资源，达到最大的效果。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>中国军队进化史解密中国地图里暗藏的天机，看完后发现历史和地理统统白学了！</title>
    <url>/archives/ce0cf91/</url>
    <content><![CDATA[<p>作者：长河飞舟 来源：天涯-纵论中西全史</p>
<p><img src="/archives/ce0cf91/1.jpg" alt></p>
<p><img src="/archives/ce0cf91/1.png" alt=" "></p>
<p>喜欢历史但地理太差，以至读过的历史都白读，只能记住雏形。怎么办？来读长河飞舟的这篇关于中国古代军事地理的雄文就够了。</p>
<p>说起古代的中华大地，经常会提及它的一个别称，九州。关于“九州”是哪九个州，历代划分有所不同。见于古籍的，《周礼》、《禹贡》、《吕氏春秋》、《尔雅》等就有多个版本。</p>
<p>这里我们不去细究九州的划分，但我们借用这个概念，将中国约略画成一个九宫格，就有了中国历史上的九大军事战略要地。</p>
<p>我先把这个九宫格画出来，然后再一一加以解说。</p>
<center>关中 山西 河北</center>

<center>汉中 中原 山东</center>

<center>巴蜀 荆楚 江东</center>

<p><img src="/archives/ce0cf91/2.png" alt=" "></p>
<p>现在，建议大家手边准备一幅中国地形图，下面我们会具体来说说这九个地区的地形结构。其间会多次提到山脉、河流、城市，如果对照地图，看起来会更加有趣一些。</p>
<p>评价一个地方是不是战略要地，主要就是两大要素：其一，山；其二，水。也就是古人常说的山川之险。</p>
<p>山的作用毋庸置疑，在飞机发明之前，高山几乎就等于不可逾越。那么在山脉之间的一些谷道，就成了连接两大区域间的唯一通道。历史上又经常在这些谷道上修筑一些易守难攻的关隘，就成了兵家必争的咽喉要道。</p>
<p>河流同样具有防御作用，但不如山脉那样明显。然而河流却同时具有另外两大功效：一，交通运输；二，农田灌溉。一个光险要而没有经济实力的地域是缺乏战略价值的，因而山、水两要素，必不可少。</p>
<p>就这两条而论，中华大地上最为得天独厚的地方，莫过于秦国的故土——关中。</p>
<p><img src="/archives/ce0cf91/3.png" alt=" "></p>
<center><font color="orange" size="4">01：关中</font></center>

<p>在中国历史的很长一段时间里，关中都是绝对的天下第一重地。这重地的中心，就是中国第一古都，长安。</p>
<p>长安周围，是渭河、泾河、洛河以及它们的支流所冲出来的一些平原，统称关中平原。周族人的老家，秦国的老家，都在这附近。因此这里也是中国开发最早的地区，沃野千里，人烟稠密。</p>
<p>这些河的许多支流，都从长安旁边流过，古有“八水绕长安”之说（泾、渭、灞、浐、丰、镐、潦、潏），简直就是天然的护城河。秦与西汉年间，又不断在此地修建水渠，使得长安周边无论是交通还是防御，都极其发达。</p>
<p>这说的是关中的腹心之地。下面再向外延伸，说说关中的四面边界。</p>
<p>关中最扎实的边界，当属南边的秦岭。秦岭是相当险峻的一条山脉，海拔在2000米以上的就有好几座，以奇绝壮美著称的华山也是秦岭的一支（不过海拔只有 1000米左右）。诸峰之中最重要的，是秦岭东段的崤山。我们还记得中国历史上最早的一场歼灭战，先轸导演的崤山之战就发生在这里。到战国初期，秦国就在崤山北麓上修建起了一座天下名关——函谷关。</p>
<p><img src="/archives/ce0cf91/4.png" alt=" "></p>
<h3 id="函谷关"><a href="#函谷关" class="headerlink" title="函谷关"></a>函谷关</h3><p>函谷关夹在崤山与黄河之间，旁边就是三门峡，与中条山隔河相望。也就是说，无论从南边还是北边，除非大范围迂回，否则很难绕过这里。它牢牢扼住了关中与中原的咽喉。只要守住这里，中原势力很难进入关中。战国时代，就有好多次多国部队攻打函谷关未遂的事情。</p>
<p>除了南边的秦岭之外，关中西边是陇山，北边也是群山环绕，只有东部边界的黄河算是稍稍容易过的地方了。所以战国时期秦魏对河西之地展开激烈争夺，争的其实就是关中的门户。</p>
<p>另外，除却函谷关，关中东南有武关通向中原，西南有散关通向汉中，西北萧关则是长安出发的丝绸之路上的重地。这四关史称“关中四塞”，差不多是进出关中最直接的四个直线出入口。其余的路，走起来就不大方便了。这一点我们后面还会提到。</p>
<p>关中就成了进可攻、退可守，安全而又富庶，这就难怪“得关中者王天下”了。</p>
<p><img src="/archives/ce0cf91/5.png" alt=" "></p>
<p>山西（西边和南边的黄河边界很明显，大家注意一下东边的太行边界）</p>
<center><font color="orange" size="4">02：山西</font></center>

<p>从关中向东，便是山西。所谓“山西”，是说太行山脉以西，指的是黄河“几”字右下角的直角弯与太行山夹出来的一个长条地带。</p>
<p>这也算是一个被包起来的地方。东面太行山脉极长，其间只有著名的太行八陉与东面的河北相通。它西面和南面的黄河内岸还有吕梁山、中条山为屏障，北面便是中华与蒙古草原的重要分界线阴山山脉。阴山以南，云中、雁门这等重要关隘把守着中国的北面门户。</p>
<p>整个山西地区，就像楔子一样插进关中与河北之间，是整个中国北方的枢纽地带。战国时秦图大业，商鞅力主首先攻魏；楚汉相争韩信略定北方，也自山西始。日后更有不计其数的大战在山西地带展开。</p>
<p>但山西内部的地形，就不像关中那么好。虽然一条汾河贯穿南北，可其间大小山脉交错纵横，使得山西很容易分裂成小的政治集团，所以历史上经常由外部力量统一山西。而山西一旦统一起来，由于它四面均易守难攻，就成了一个极佳的战略地带。</p>
<p><img src="/archives/ce0cf91/6.png" alt=" "></p>
<center><font color="orange" size="4">03：河北</font></center>

<p>从山西向东，来到河北。河北，自是指黄河以北。它南面是黄河，东、西、北三面又分别由渤海、太行山、燕山所包，据此亦可割据一方。</p>
<p>然而河北之地，没有关中八百里秦川的富庶，也不如汾河流域各平原丰饶，反而还饱受黄河改道的水患。自古它都不是一个经济发达地区。</p>
<p>但有一点，河北民风彪悍。燕赵多悲歌慷慨之士，自古闻名天下。赵武灵王胡服骑射之后，河北更是中国骑兵的重要产地。因此，凭借河北精兵，妥善运用，亦可与天下争雄。</p>
<p><img src="/archives/ce0cf91/7.png" alt=" "></p>
<center><font color="orange" size="4">04：山东</font></center>

<p>由河北向南跨过黄河，便是山东。</p>
<p>前面讲关中、山西、河北，都说了四面屏障。可是对山东来说，没有。它除了东面的渤海、黄海算是安全之外，其余三面，几乎无险可守。整个山东地区一马平川，一打就穿。战国时乐毅一口气吃掉整个齐国，然后田单又一口气将整个齐国吃回来，这种事情，也只有在山东地区才会出现。</p>
<p>但山东却又是兵家必争之地，为什么呢？原因很简单，这里很富。</p>
<p>山东渔盐之利天下闻名，而且山东也是中国传统的工商业发达地区。平原之上，粮食自然也相当充足。此地便成了历史上重要的经济基地。</p>
<p>对于山东的战略地位，清代地理大家顾祖禹在他的名作《读史方舆纪要》中写道：”山东以自守则易弱以亡，以攻人则足以自强而集事。“堪称至理。</p>
<p><img src="/archives/ce0cf91/8.png" alt=" "></p>
<center><font color="orange" size="4">05：中原</font></center>

<p>山东向西，便是古代中国的中心地带，自古战事最为激烈的地区——中原。</p>
<p>逐鹿中原、问鼎中原……尽管没有什么割据势力是从中原起兵的，但任何有野心的人物，心里都装着一个中原之梦。</p>
<p>至于中原地区究竟是个什么概念，说起来却有些复杂。我们只得将其再细分，划成四个小区域。</p>
<center>三川 河内</center>

<center>南阳 淮上</center>

<p>西北，为三川河谷。所谓三川，指的是黄河、伊河、洛河冲积出来的小平原，中原重镇洛阳正位于其上。三川地区除了北临黄河之外，三面环山。山间亦有险关，西面是函谷，东面是成皋，南面是伊阙，北面是黄河南岸的重要渡口孟津。这四处都是历史上的知名地带。函谷自不必提；当年刘邦为了给韩信的战略包围赢得时间，顶住项羽的疯狂进攻，守的便是成皋；战国时秦国与魏、韩争夺伊阙，白起斩杀二十四万人，足见此地之重要；周武王”八百诸侯会孟津“，虽有传说成分，但也能说明孟津的地位。三川河谷，可谓中原的重中之重。</p>
<p>西南，为南阳盆地。此地地势虽说不上有多险要，但确实是兵家必争的枢纽之地。它北面，是中原重地洛阳；西北面的武关是关中门户；南面的汉水、方城山又是荆楚的门户；另兼西接汉中、东临江淮，四通八达，不可不取。历史上，围绕南阳盆地两大重镇宛城、襄阳，发生的战争故事数不胜数。</p>
<p>东南，为淮河上游地区。此地最大的特点，河流众多，淮河、汝河、颍河、涡河、汴河等等，水运发达，堪称中原水系的命脉所在。我们知道在古代，河运极其重要，走水路比走陆路便宜太多。因而掌握这片地区，对于本国经济发展至关重要。又加上南面靠着大别山，是中原少见的有所屏障之地。</p>
<p>东北，是太行山与黄河夹出的一个区域，是关中、山西、河北、中原之间的一个过渡地区。汉代在此置河内郡，郡治在今河南沁阳地区。在即将讲述的刘秀统一战争中，此地便被刘秀定为兵马、粮草的转运中心。可见这里与中原其它地区一样，起着至关重要的枢纽作用。</p>
<p>以上讲到的五大战略要地，主要位于黄河流域，基本属于我们概念中的北方。在历史进行到公元前后，中国北方的生产力水平，远胜南方。因此以上五个地区，是之前历史的主体地区。但下面的四个地区，将在日后的历史中发挥越来越重要的作用。</p>
<p><img src="/archives/ce0cf91/21.png" alt=" "></p>
<p>整个中原：</p>
<p>西北洛阳附近为三川河谷</p>
<p>西南以襄阳、南阳（即宛城）为中心为南阳盆地</p>
<p>东南为淮河上游</p>
<p>东北黄河流域为河内</p>
<p><img src="/archives/ce0cf91/16.png" alt=" "></p>
<center><font color="orange" size="4">06：汉中</font></center>

<p>中原西边，为汉中。汉中地区，是秦岭和巴山之间夹出来的一个长条地带。秦岭隔开了汉中与关中，巴山则把汉中与巴蜀分在两侧。</p>
<p>汉中这个地方，在九大战略要地里面差不多是最小的。单独占据汉中，很难成事，必须要向关中或者巴蜀挺进，才能把根据地建得更加厚实。所以汉中的意义，主要在于与关中和巴蜀的联系。</p>
<p>汉中与关中隔着秦岭，其间只开了四条谷道曲折相通。自西向东，分别是陈仓道、褒斜道、傥骆道、子午道。</p>
<p>陈仓道自不必说，韩信暗度陈仓之策已是中国战史的经典，它的北口正是关中四塞之一的散关。褒斜道并不出名，但却开发最早，当年司马错正是从此道进入汉中，进而拿下蜀地的。傥骆道最为险峻，极少用兵，更加少为人知。而子午道却由于《三国演义》的宣传而极其有名。它实际上是公元5年才开发出来的，而且相比其它的谷道也有些绕远，当时不太受重视，所以魏延才觉得能起到奇袭的效果。</p>
<p>至于汉中与巴蜀间的巴山之中，谷道更少，只有两条。其中直通成都的叫金牛道，由于路途最短，最直接，所以为兵家必争。道上的剑门关也是古代名关之一，李白《蜀道难》中创造的名句“一夫当关，万夫莫开”，就是说这儿的。金牛道东边，还有条米仓道，就需要从巴中、阆中，绕到成都了。</p>
<p><img src="/archives/ce0cf91/17.png" alt=" "></p>
<center><font color="orange" size="4">07：巴蜀</font></center>

<p>下面我们就顺着这两条谷道穿过大巴山脉，来说说巴蜀之地。</p>
<p>就防御的角度而言，巴蜀比关中更加稳固。其南面是云贵高原，西面是青藏高原，敌人根本不可能攻上。仅有的两条通路，在北边和东边。</p>
<p>北边我们说过了，掐住剑门关，守住米仓道，便可保巴蜀腹心成都的安全。而巴蜀的东面门户，在重庆。重庆是全国有名的山城，因此从东面陆路进攻巴蜀，几乎不可能，只能走长江水路。而巴蜀又位居长江上游，顺流而下易，逆流而上难，加之有三峡阻隔，可谓万无一失。</p>
<p>所以说，巴蜀之险，几不可破。但这里有个问题，就是崇山峻岭太多，外面不容易进去，里面也不容易出来。因此巴蜀最容易出现局部割据的势力。然而，一旦巴蜀脱出局域，则变得极其重要。与东面的荆楚相连，则占尽长江天险，足以与北方抗衡；与北面的关中、汉中相连，则可顺流而下，直取荆楚、中原。加之成都平原也是一个巨大粮仓，使得巴蜀虽不是兵家必争（因为很难打下来），却是得之可安天下的重地。</p>
<p><img src="/archives/ce0cf91/18.png" alt=" "></p>
<center><font color="orange" size="4">08：荆楚</font></center>

<p>从巴蜀向东，跨过长江三峡，便是荆楚之地。这是整个南方的枢纽地带。与巴蜀相连，则顺江而下，江东岌岌可危；与江东相连，则据守三峡，足可困死巴蜀；又凭借长江、汉水之险，堪与北方对峙。任何一个立足于南方的政权，如果不拿到荆楚，就不会任何前途。因此，有人统计说《三国演义》一百二十回里有七十二回提到荆州，就是这个道理。</p>
<p>中国历史越往后发展，长江流域越发重要。</p>
<p><img src="/archives/ce0cf91/19.png" alt=" "></p>
<center><font color="orange" size="4">09：江东</font></center>

<p>我们再从荆楚顺江而下，便来到了我们九宫地域的最后一站——江东。</p>
<p>由于长江在安徽境内拐向东北，所以长江中下游的皖东南、江浙一带，历史上又称江东。此地是中国地图上水网最密集的一个地方。因而北方铁骑要想从此地跨江南渡，几乎不可能，必须取道荆楚。因而江东政权只要在西线防住荆楚，便足可割据一方。若能拿下荆楚，便有望争雄天下。春秋时期吴国可以置其余大国于不顾，盯着楚国打，就是这个道理。只不过没想到侧背出了个越国，才骤然灭亡。若吴越连成一体，则大事可图。</p>
<p>又由于发生在江东内部的战事极少，北方由于战乱所致的流民大量涌入江东，使得这个地区在历史上是越来越发达。江南鱼米之乡，三江五湖之利，此地便渐渐成为中国新的经济重心所在。</p>
<p>江东政权的另一个优势，就在于与它隔江相望的江淮之间地区，常常是各方势力的真空地带。它便很有机会跨过长江，在江北淮南之地建立根据地，为北进中原做好准备。</p>
<p><img src="/archives/ce0cf91/20.png" alt=" "></p>
<center><font color="orange" size="4">10：简论</font></center>

<p>关中、河北，居高临下，为天下之上游，西北、东北之边患，泰半源于两地。</p>
<p>山西又为关中、河北之上游，自古山西攻河北易，河北攻山西难，如高欢之并尔朱，则追亡逐北之余也。刘秀之入河东，则所对皆乌合之众也。</p>
<p>山西的优点是形式完固，自成一国，应有尽有，春秋时晋以此立国争霸，缺点是出击不如关中、河北平坦方便。山西吕梁、太行包住的中间类似于一个葫芦，葫芦腰容易被切断。</p>
<p>山东似一小关中，故齐之地，东有大海，西有大河，南有穆陵关，亦非全无险要可守，且擅渔盐之富，也是根据地的一选，后期运河发达，更是掐死北方咽喉，朱元璋取大都，则先定山东，断其运道，不过确实是利攻不利守。</p>
<p>洛阳西有崤山、函谷，东有荥阳、虎牢，北有黄河、孟津，南有龙门、伊阙，看似天险，实为天牢，因为从四处险固进至洛阳城下，都只须一天，战略纵深狭小，所以张良反对在此建都。</p>
<p>后来李世民灭王世充，大部分时间都用在攻占洛阳周围的据点上，等到占领四处险要，反而方便唐军阻断救援，王世充空有河南、安徽的大量援兵，只得做了瓮中之鳖，就连来救的窦建德也屯兵虎牢关下，被李世民寻机一并灭了。唐军河阳之溃后，李光弼弃洛阳守河阳，就是把史思明关进了天牢，任自己揉捏。可见洛阳看似天险的迷惑性害人不浅啊。</p>
<p>此外，方城山似在伏牛山与桐柏山交界之处，南阳盆地北端，而非南端。方城以为城，汉水以为池，比喻说法，二地貌似相距甚远。</p>
<p>楚灭申、邓，得方城，强则从此进取中原，宰割陈蔡郑宋，弱则退入方城，据此自守，晋人悬师在外，束手无策，且由于山西南下不易，晋人行动常比楚人慢半拍，直至用孟献子之策筑城虎牢，取得战略前沿。</p>
<p>荀文若曰：昔汉高据关中，光武定河内，皆深根固本以致天下。</p>
<p>后汉之世，寇恂则比于萧何，邓禹则差强张良，耿弇则仿佛韩信，但又都是缩水版。</p>
<p>以下内容来自问答平台：</p>
<p>01：为什么东周时的齐国灭亡之后，今山东省地区再没有作为独立而有重要影响力的割据板块出现过？</p>
<p>齐鲁的战略形势就是因为地理吃了亏。黄淮海平原一马平川，华北一体，山东丘陵地势稍高，但实在没有资质可以摆脱和燕赵淮泗一体的大格局。</p>
<p>山西同属华北。但西有黄河，与同样黄土高原的关中隔断，东有太行，与河北山东隔断。所以北方分裂，关中与河北为两个中心争夺北方，山西夹在其中，谁有了晋阳这个砝码，谁就基本稳赢了。</p>
<p>山东齐鲁不同。东边靠海，虽是边角，但没有秦楚那样大后方战略纵深。</p>
<p>更加没有肴函那样雄视天下的险要，他的命运只能被定格在附属于以河北为中心的关东集团，或臣服于以关中长安、河南洛阳为中心的北方、大一统天下。</p>
<p>偶然有几个例外爆表的超常表现。但也就蹦达那么几下。</p>
<p>但是说齐鲁之地内乏强兵，这就太绝对了。</p>
<p>齐国的崛起，占了开发优势、边角地理天然决定，以及经济发展。</p>
<p>最重要的一点。齐国开发的好，和中原一样甚至后来居上，现在也是，人口前几的人口资源大省。</p>
<p>人口分布密集，人口资源充足。</p>
<p>最直观的表象是什么？</p>
<p>人口多，从事农业人数足够，经济发展支柱完备，兵员充足，一整个逻辑链条下来，结果就是军事能力强！</p>
<p>岂不闻战国齐技击，魏武青州兵乎？</p>
<p>综上两点，这样一个有强大军事潜力的地方，同时又没有险要的地方，想控制他怎么办呢？</p>
<p>把他分割了！</p>
<p>齐鲁地大。秦并天下三十六郡，齐地分为齐郡、琅琊郡、薛郡三地。</p>
<p>刘邦出于其他考虑把整个齐地封给了大儿子刘肥，希望凭借齐王七十余城的强大力量牵制吕氏。后来铲除诸吕，内有周、陈勋戚，外有齐王宗室，朱虚侯居中协调，一举事成！</p>
<p>齐悼惠王刘肥者，高祖长庶男也。其母外妇也，曰曹氏。高祖六年，立肥为齐王，食七十城，诸民能齐言者皆予齐王。</p>
<p>可惜最后帝位没落在齐王支系上，给了戍边母家地位低微的代王文帝。</p>
<p>吕后已经早于文帝开始把齐国瓜分削弱了。</p>
<p>汉代的情况，看这张图就够了。齐鲁之地被青州、兖州、徐州瓜分，三州治下十数个郡国。这样你还能希望他作为整体有啥作为？</p>
<p>再给大家看看齐鲁在春秋战国时的大致范围。面积要比现在山东一省要大得多。还有它最盛时的声威，青州齐鲁本地，河北河南三大区域交接交通枢纽：兖州大部。再控制淮泗。这不是和秦国一样的东西二帝，还有别的人选吗？！</p>
<p>这是剧本乐毅伐齐的疆域全景。当然，这时候是齐国刚吞并宋国，很快就五国伐齐。齐国过度扩张成了众矢之的。之后复国达到了它的理想疆界。</p>
<p>战国时三晋错综复杂的交界，我中有你，你中有我是大难点，我曾经研究过，韩魏易地，赵魏易地，都产生了很大影响。</p>
<p>就这样，自秦汉之后，对这个有军事潜力、无险要地势的齐鲁，历代进行了尽可能最大化的分割治理。他想割据有所作为都难。</p>
<p>天下大分裂时一般作为以河北为中心的政治集团附属组成部分。大一统就被管的死死的。</p>
<p>但也有例外的时候，中晚唐淄青镇成为全国最大藩镇，为祸百年。</p>
<p>之后的时代，全国政治中心东移，长安、洛阳、南京、开封、北京。京杭运河，南北沟通。山东位于南北两个政治中心，南京北京交通必经之路。给控制的不能再死了。实在蹦达不了了，乖乖听两个老大哥的话。</p>
<p>综上，因为历代对齐鲁地区行政地区的规划施行分割压制政策，加上自身外无险要的特点。</p>
<p>齐鲁地区本身很难以在历史进程中以自己为核心根据地统治天下，说白了就是不适合做京畿，全国政治中心。</p>
<p>偶然的几个历史机会凭借军事潜力起家可以，比如：魏武帝借兖州之地，青州之兵起家。但发迹后，仍旧必须要把政治中心迁往河南内地，天下之中。</p>
<p>02：为什么秦汉以降，崤山、函谷关作为关隘的防御效应远不如先秦时期那么大，以至于后世史书上都不再怎么提及了？</p>
<h3 id="文：三种不同的红色"><a href="#文：三种不同的红色" class="headerlink" title="文：三种不同的红色"></a>文：三种不同的红色</h3><p>先说说函谷道的问题。</p>
<p>函谷道，有广义和狭义两种说法。</p>
<p>广义上的函谷道，指的是从函谷关到潼关之间长140里的道路，这条道路并不是一直狭小，事实上，它虽然非常险峻，倒也没有到“深险如函”的地步，中间也有好几个地方可以离开这条函谷道而转入他途。</p>
<p>真正的“函谷”，是指的狭义上的函谷道，这条道路长度仅仅15里，它其实是稠桑原上的一条裂缝。稠桑原是典型的黄土高原上的塬的地形，顶部平坦如原，但高度非常高，四周峭壁陡立，黄河从稠桑原北面流过，紧贴着原壁，所以东来的行人要进入关中，没有其他道路可以走，只能从这条裂缝通过。这条裂缝中，绝岸壁立，宽不过数米，真正的是“车不能方轨，马不能并鞍”。古代形如函谷关之险要，往往用一个词来形如，叫“丸泥可塞”，这四个字真不是夸张，函谷确实是丸泥可塞。</p>
<p>函谷关就位于这条裂缝的开口处，也就是今天河南灵宝县的王垛村。在稠桑原的东面，也就是函谷关的关前，就是弘农河（提起这条河，估计没几个人知道，但它有条支流却是大大有名，叫做断密涧，即李密丧命之所，将军犯地名啊）。今天看来弘农河水量很小，但在古代却不是这样，因此弘农河就成了函谷关天然的护城河，敌人要进攻函谷关，就必须先渡过弘农河，这已经是非常不容易的，而渡过河之后，由于弘农河紧贴着稠桑原东侧而流，河岸和关城之间的只有一条狭小的窄路，无论敌人有多少兵马也无法摆开，这是函谷关又一险要之处。</p>
<p><img src="/archives/ce0cf91/9.png" alt=" "></p>
<p>这是函谷关的模型。两边高地即稠桑原，中间裂隙即函谷，关城建在裂隙口，关前即是弘农河（模型没有显示出来）。</p>
<p>到今天，由于水土流失函谷已经基本湮没，但还有遗迹可寻。在河南灵宝县的王垛村，有一条沟壑，长7里，深有17米，这就是当年函谷的遗迹。</p>
<p><img src="/archives/ce0cf91/10.png" alt=" "></p>
<p>这是谷歌地图上的函谷遗迹，那条纵贯东西的大沟就是当年函谷，王垛村所在就是当年的函谷关。</p>
<p>从地图上来看，稠桑原上道路纵横，毫无天险可言，那为什么古代非要钻那条函谷呢？那是因为古代的稠桑原上都是森林，——听这个名字就知道了，“稠桑原”，可知其上桑树是何等密集。其实不单单是稠桑原上森林密布，从崤山到潼津，古代称作“桃林之塞”，又叫“松柏之塞”，可知这一百多里路，到处都是密集的森林。春秋时晋国曾派人驻守桃林之塞，以遏制秦国东进。其实驻守的地方就是后来的函谷关。——正是由于原上森林密布，人不得通行，只能在原体的一条裂缝中行走。所以只要扼守住这条裂缝，就能断绝东西交通。</p>
<p><img src="/archives/ce0cf91/10.png" alt=" "></p>
<p>这是今天函谷的模样，这么窄小的一条沟壑，自然是千百年来缺少维护塌方淤积的结果，但从这里却可以明显的知道什么叫做“丸泥可塞”。</p>
<p>函谷关为什么后来荒废了？</p>
<p>那是因为在汉武帝年间，汉武帝把函谷关向东挪动了300多里，挪到了新安。</p>
<p>为什么汉武帝要把函谷关挪到那地方去呢，按照传统的说法，说楼船将军杨仆，数立大功，但深以自己为关外之人而羞耻，因此向汉武帝请求，不愿封赏，但愿为关内人。于是为了照顾他，汉武帝就把函谷关向东移动了300多里，把杨仆的家乡圈了进了。现代有一些学者（如辛徳勇）不认同这种说法，说简直胡扯，杨仆算个神马东西，汉武帝犯得着为了他挪动函谷关？汉武帝挪动函谷关的真正原因，是为了扩大关中的领地。</p>
<p>不管怎么说吧，反正是汉武帝下令在新安重建了一座关城，并命名为函谷关，把原有的老关城毁弃，在其上建立了弘农县。</p>
<p>这样，从汉武帝开始，所说的函谷关就不再是战国、秦朝时说的函谷关了，而是新安县的那个。</p>
<p>但是，新安的函谷新关形胜远不如故关，在战略上的意义大大降低，而且并没有发生过大的战役（因为不是兵家必争之地了，比如赤眉入关中，就是兵分两路，绕过函谷新关，会师于弘农县（也就是函谷故关），由于弘农没有防御，因此得以轻松进入关中），所以新关的知名度远远小于故关。</p>
<p>正因为新关在军事战略上不能完全取代故关，所以新关虽设，但故关的战略任务仍然存在，只不过是由弘农县来承担罢了。但函谷关的荣耀毕竟雨打风吹去，我认为这里面的原因，除了新关迁置之外，故关（即弘农）附近的地形变化也应该是重要原因。</p>
<p>函谷故关的天险，实际上依赖于两点，一是黄河紧贴着稠桑原北壁而走，不留一点空隙。二是稠桑原上森林密布，人不得通行。但这两点都是非常容易发生变化的。</p>
<p>稠桑原是典型的黄土高原的地形，黄土高原的重要特性就是土质疏松，非常容易流失，特别是在流水作用下，河流的下切现象非常明显。一开始时，黄河紧贴着稠桑原，但随着河流不断冲刷，河道不断下切，黄河水位也随之不断降低，原来紧贴着原体的河道就会裸露出来，形成河滩。而这河滩一旦形成，函谷关的天险就将不复存在，因为人们都从河滩走了，千军万马不再挤函谷那条裂缝了。河滩的这条新路，在东汉末年就已经形成了，曹操征伐关中，因嫌函谷险恶，于是命令许褚于故关以北十里处凿建新路，并在那里建立了关城，史称魏函谷关。魏函谷关这条道，其实就是在黄河裸露出的河滩上形成的。随着新路的开辟，函谷故关的战略重要性极大的降低了。汉代弘农县城在函谷故关的关址之上（即今王垛村），但隋朝时将县城移往黄河边，其实就是为了封锁河滩上的那条新大路。从此之后，县城就一直在黄河边上，直到解放后，因为要修建三门峡水库，才将灵宝县城向南迁移到今天的地方。</p>
<p>另外，稠桑原上森林的消失，也使得函谷关的天险不再。那些森林是什么时候消失的，现在已经无从稽考，但可以肯定的是，森林的消失，必然导致函谷关丧失其战略意义。</p>
<p>再说潼关。</p>
<p>潼关之名首见于史册，是曹操大战马超，所谓割须弃袍于潼关，夺船避箭于渭水是也。因此有理由相信，潼关始建，应该在东汉末年。</p>
<p><img src="/archives/ce0cf91/12.png" alt="函谷关、函谷新关、潼关关系图"></p>
<p>潼关的地形也非常险要，它位于渭河与黄河的交汇点，春秋时称渭汭，对面就是黄河的重要渡口风陵渡。在黄河的南面，有两条河流，西面的一条叫潼水（这也是潼关得名的原因），东面一条叫远望沟，在潼水（及其支流禁沟）与远望沟之间，是一个塬，宽有两公里，高六、七百米，由于两侧常年被水流冲刷，因此峭壁陡立，非常险峻。在塬的北面就是黄河，和函谷关一样，黄河紧贴着塬体流淌，没有任何空隙，使得每个向西行进的人，都必须通过原上，而再无其他路可走。</p>
<p>要登上塬，就只有一条路可以通行，叫做黄巷坂，这条路和函谷一样，南面紧靠高原，北面和黄河之间有一高岸隆起，形成了南依高原，北临绝涧的形势，中间唯一孔道，宽仅数米，也是丸泥可塞，非常险峻。这条黄巷坂，当地人也叫“五里暗门”，“五里”言其长度，“暗门”形容其险峻。我记得上世纪90年代时，央视有一纪录片《孙子兵法》，片中编导人员走访潼关，在五里暗门经过，即使在屏幕中看，其险峻也是令人心惊胆战。</p>
<p>前面说函谷道有广义和狭义两种，狭义的函谷道仅仅指稠桑原上的那条孔道，但广义的函谷道指的是从函谷关到潼关整个140里长的道路，这140里的道路，其起点是15里函谷，其终点就是黄巷坂这条5里暗门，都是丸泥可塞的险峻之所，可谓造物奇绝。</p>
<p>沿着黄巷坂上了塬，就到了潼关。和函谷关不同，潼关并不是建在孔道的起点，而是建在了孔道终点的高原之上。</p>
<p><strong>“古今智谋”</strong>，读历史、懂智谋、学为我用！</p>
<p>在潼关之西，就是潼水及其支流禁沟。其中禁沟深数十米，其险峻超过了潼水，是潼关西面的屏障。然而，禁沟虽然阻断了东西，但禁沟之内仍可南北通行，当人们从黄巷坂登上塬头，经过潼关后，就由潼关南行，抵达禁沟，然后再从禁沟北上，到达禁沟与潼水的交汇点潼河沟口，出潼河沟口后，就可以沿渭水直奔长安了。</p>
<p><img src="/archives/ce0cf91/13.png" alt="潼关形势图1"></p>
<p>当然，这是汉朝建立潼关时的情况，事实上，潼关和函谷关面临着一个同样的问题，就是黄河的下切。汉朝初建潼关时，黄河紧贴着塬体流淌，要想通过只能登上高原，但随着黄河不断冲刷，河道不断加深，河床不断下降，原来的河床就会裸露出来，形成河滩，从而导致天险不再，行人从黄巷坂出来，不必再登塬，从河滩上过去就行了。如此一来，原上的汉潼关就成为了聋子的耳朵。因此从唐朝开始，就给潼关挪了地方，从塬上移到了河滩，而把原来塬上走禁沟的旧路废止了。</p>
<p>由于禁沟向南可以直抵秦岭，并通向武关，倘若敌人自禁沟北上，就可以到达潼关背后，因此禁谷的防御是潼关防守的重中之重，作为潼关防守的配套，在禁谷之中建立有十二个关隘，称作十二连城，在唐朝时是禁止人通行的，禁谷的所以名为“禁”，就是这个原因。黄巢攻潼关，就是派军队自禁沟北上，绕到潼关背面，两面夹击，从而攻破的。唐军之所以疏忽了对禁沟的防守，就是因为这条沟平时禁止通行，从而形成的思维定式，忘记了这里可以通行。明朝李自成攻潼关，也是自潼关南面绕道至关后，两面夹击从而破关，但却不是走禁沟，而是走是南山的山麓。因为明朝时禁沟是一条重要道路，明军不可能不防守。</p>
<p>因此，潼关北依黄河，南靠秦岭，东有黄巷坂之险阻，西有禁沟之天堑，自然是天下雄关，关中门户。</p>
<p><img src="/archives/ce0cf91/14.png" alt="潼关形势图2"></p>
<p>细细考究函谷关和潼关的兴废，有政治因素，也有千年之间地形变化的因素。</p>
<p>为什么一开始秦人设关时设的是函谷关，而不是潼关？</p>
<p>这里我认为有两个因素。</p>
<p>一是从政治上讲，函谷关之始建，是在战国时，这时潼关已经是秦国领土。秦人设函谷关的主要目的就是为了御敌于国门之外，既然在函谷关有非常险要的地形，那就没有必要退缩一百余里了。</p>
<p>二是从地形上讲，函谷关有一个非常优越的地方，就是它永远只面向一个方向的敌人，敌人永远只能从东面来，而没有第二条路可走。这点是潼关比不上的。潼关在地形险要方面不如函谷关，敌人可以从禁沟来（如黄巢），可以从秦岭南麓而来（如李自成），也可以从北面蒲津来（如曹操）。从这个意义上讲，函谷关的地形是要优于潼关的。</p>
<p><img src="/archives/ce0cf91/15.png" alt=" "></p>
<p>那为什么后来潼关又取代了函谷关呢？</p>
<p>也是两个方面，一是政治上的，汉武帝为了扩大关中领地，加强中央集权，将函谷关挪到了新安，从而降低了函谷故关在政治上的分量。</p>
<p>另一方面，也是地形和环境的变化。由于黄河的下切，使得稠桑原北侧可以通行，使得西向关中不再需要经过函谷关。同时，稠桑原上森林的消失，使得天险不再。失去了森林和唯一通道地位，函谷关就已经失去了军事上的意义，所以它必然要被取代。</p>
<p>在这种情况下，潼关作为函谷关的替代就出现了。虽然后来潼关也出现了黄河下切的问题，但潼关胜过函谷关的一点是，它不必依赖于森林作为自己的防护。所以黄河下切产生了新的道路，对于潼关来说只需要移动关城就可以继续镇守要津，作关中门户。</p>
<p>声明：本文来源于网络，版权归原作者所有，如有侵权请告知删除。</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>地理</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>朝鲜的38°和越南的17°</title>
    <url>/archives/df68c2e9/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 2019-07-30</p>
<p>1965年，美国发动“滚雷行动”，大规模派兵直接入侵越南。</p>
<p>1975年，美国狼狈撤退，结束十年越战。</p>
<p>美军在越南的十年，是黑暗的十年，越战流尽了美国人的血，让美国在和苏联争霸时直接处于弱势地位。</p>
<p>那么问题来了，整整十年，北越军队都在活蹦乱跳的独自抗衡美军，不仅完整保留了军队的建制，还能维持后方的经济生产。</p>
<p>反观北朝鲜军，美军参战后一个月不到，被打的几乎全军覆没，中苏双方给钱给装备都没用，最后还是中国志愿军亲自上阵，才把美军给打退。</p>
<p>这么一比，好像北越军队战斗力爆棚，但是这么牛逼的北越军队，在1979年的对越自卫反击战中，其北方守卫军团却被中国军队给瞬间打的全线崩盘。</p>
<font color="red">短短十几天，中国军队就兵临越南首都，如果不是顾忌苏联干涉，越南直接就没了。</font>

<p>要知道，1975年北越军队刚打退强大的美军，正是最巅峰辉煌的时候，怎么在中国军队手里败这么惨，难道美军比中国军队差很多？</p>
<p>要知道，中美双方刚在朝鲜战场上直接交手，至少也算个平局吧，美军战斗力没有那么弱。</p>
<p>那么问题出在哪呢？怎么会出现这么离奇的战果对比。</p>
<p>核心原因其实就是因为，中美军队刚刚在朝鲜战场上交过手。</p>
<hr>
<center><font color="orange" size="4">朝鲜的38°线</font></center>

<hr>
<p>1950年6月，朝鲜战争爆发，北朝鲜军势如破竹，将南朝鲜军压制在小小的釜山区域，再加一把劲，就可以把整个南朝鲜军给赶下大海。</p>
<p>这时候，美军为首的联合国军参战了，一个月之内，装备了大量苏制武器的北朝鲜军被打的几乎全军覆没。</p>
<font color="red">毛主席直接向美国发出警告，联合国军可以参战，但是不得越过38°线进入北朝鲜区域，否则中国将出兵参战。</font>

<p>但是以当时中国的国际威望，这句话并没有引起美国人的重视，在美国眼里，中国就是个半殖民地的农业国。</p>
<p>联合国军的总指挥麦克阿瑟向杜鲁门总统保证，中国军队不会参战。</p>
<blockquote>
<p>“即使赤色中国真的愚蠢地出兵，那将只是为他们创造了打回到石器时代的机会。”</p>
</blockquote>
<p>麦克阿瑟宣称，自己将在圣诞节前将战线推进至鸭绿江边，结束朝鲜战争，然后带美国士兵们回家过节。</p>
<p>在美军士兵越过38°线的当天，中国人民志愿军越过了鸭绿江，秘密入朝参战，把联合国军给包了饺子，骄横的麦克阿瑟被迫进行了大撤退，美军重新回到了38°线。</p>
<p>随后的五大战役里，中美双方屡屡交手，美国动用了其1/5的空军，1/3的陆军和大部分的海军，以及除核武器外的所有新式武器。</p>
<p>结果，美军震惊的发现，这个落后农业国里出来的军队，居然如此能打，怎么都打不死，自己还损失惨重。</p>
<p>中美双方，在朝鲜38°线上胶着，互有胜负，谁也无法奈何谁，最终，骄傲的美国人被迫谈和。</p>
<p>而迫使美国人坐到谈判桌前的最终一战，就是上甘岭战役，因为这一战，直接打碎了美国人全部的骄傲。</p>
<p>在五大战役后，中美双方实际上已经摸清对方的实力和作战习惯，彼此谁都无法奈何谁，中国军队曾试图扩大战果，突击37°线占领了汉城，甚至还攻入过36°线，但是很快被联合国军打了回去。</p>
<p>而联合国军也曾试图突破志愿军的阵地，一样也是损失惨重。</p>
<font color="red">双方都不想打了，但是都开不了这个口，谁先开口，谁就失去了谈判的筹码。</font>

<p>所以，双方都想拿到一点战果，从而获得谈判的有利条件，而美国选择了五圣山作为目标。</p>
<p>五圣山，是朝鲜中线的门户，如果丢掉了五圣山，后面200公里皆为平原，无险可守，只要能拿下五圣山，就能让中国军队陷入被动，从而被迫在谈判中让步。</p>
<p>美军指挥官范弗里特拟定了庞大而细致的作战计划，试图一举攻克五圣山，美军把这一次的作战，称之为摊牌行动，要用此战，和志愿军做一次最终较量，迫使中国在和谈中让步。</p>
<p>攻克五圣山的第一步，就是要先拿下五圣山前面的二个小山包，也就是鼎鼎大名的597.9和537.7高地，这两个高地后面有一个小山村，叫上甘岭。</p>
<p>所以美军攻克这二个高地的战斗，就称为上甘岭战役。</p>
<p>中国军队在上甘岭区域，仅部署2个连，按范弗里特的计划，美军可以在一天之内，以伤亡200人以内的代价，占领这两个高地，然后在这里修筑工事，攻击一公里之外的五圣山。</p>
<font color="red">没想到的是，联合国军在上甘岭的损失，是原定计划的100倍。</font>

<p>美军指挥官范弗里特是火海战术的忠实粉丝，他曾创造了一个名词，叫范弗里特弹药量，什么意思呢，他自己是这么解释的：</p>
<blockquote>
<p>我再次强调我的观点，掩体与火力须足够大。我们必须倾泻钢铁与烈焰而不是人员。我要在此阻止住中国人并重创他们。我欢迎他们来进攻，我要挺立在阵地上用炮火击溃他们。我要留下无数个炮兵的弹坑，以致能让人连着从一个弹坑跳到另一个弹坑里。这没有拔高，我是认真的！</p>
</blockquote>
<p><img src="/archives/df68c2e9/1.jpg" alt=" "></p>
<p>范弗里特很迷恋他的弹药量：“没有什么阵地是十万发炮弹解决不了的，如果十万发不行，那就再来十万发！”</p>
<p>没想到的是，他最终倾泻了190万发炮弹和5000多枚航空弹在上甘岭阵地上。更没想到的是，他不仅没打下五圣山，甚至连第一关上甘岭都没打过去，最终大败亏输。</p>
<p>在摊牌行动发动的一瞬间，美军无穷无尽的炮弹就落到了上甘岭区域上，所有的土地都被翻了一遍，所有的表面工事都荡然无存。</p>
<p>志愿军用了4个月时间精心构筑的防御工事、铁丝网、防坦克壕、陷阱被瞬间全部抹平，驻守上甘岭的2个连队，在第一波炮击结束后，就已经阵亡了60%，很多战士都是因为没来得及撤到坑道，被突然而来的炮击给活活震死的。</p>
<p>从这个角度说，范弗里特原来的作战计划中，预计用一天时间，200人以内的伤亡占领上甘岭，的确是没有问题的。</p>
<p>被炮击后的上甘岭，如同被烈焰烤焦了一般，一片白土，看似已经无人可以生存。但是在美军靠近时，志愿军的战士们突然不知道从哪就冒了出来，用火力狠狠的压制了敌人。</p>
<p><img src="/archives/df68c2e9/2.jpg" alt=" "></p>
<p>靠着在地下密密麻麻的坑道，40%的志愿军躲过了第一波突然炮击，并以这批战士为种子，牢牢的守住了阵地，在后方源源不断的炮火和兵力支援下，上甘岭成了联合国军彻底的绞肉机。</p>
<p>为了对付原本只有两个连驻守的上甘岭，美军先后投入了南韩军队两个师、美军一个师，以及联合国军的两个营，最终全部损失惨重。</p>
<p>美军不仅投入了重兵，还有铺天盖地的火力优势，累积发射了190万发炮弹，将整个上甘岭的山头削低了3米。</p>
<p><img src="/archives/df68c2e9/3.jpg" alt=" "></p>
<p>美军优势如此之大，在面对号称可以消灭一切地球生物的火海面前，志愿军是如何守住阵地的呢？大家其实都知道了，靠的是地下坑道。</p>
<font color="red">但是很多人曾简单的理解，所谓地下坑道，就是志愿军白天简单的藏在坑道里，晚上再钻出来战斗。</font>

<p>这你就大错特错了，炸药连山都能给炸碎，你的坑道修的再结实也抗不过炸药啊。</p>
<p>如果你龟缩坑道不出，美军什么都不用干，把出入口直接给你炸塌，里面的人就全部活埋了，根本都不用理会你的。</p>
<font color="red">在太平洋战场上，龟缩在坑道里的日军，就被美国的火焰喷射器和毒气弹，给轻松消灭的一干二净。</font>

<p>实际上，志愿军的坑道战术，远远比普通人想的更复杂，打起来也更残酷。</p>
<p>首先，志愿军的坑道，不是普通的坑道，而是反斜面坑道。什么叫反斜面坑道呢，我给大家解释一下，一座山有两个面对吧，北面对着志愿军的五圣山阵地，而南面对着美军的阵地。</p>
<p>我们在对着自己人的那一面修建的坑道，就叫反斜面坑道。</p>
<p><img src="/archives/df68c2e9/4.jpg" alt=" "></p>
<p>因为在正斜面，美军炮火会完全覆盖整个坡面，我军无法在地面生存。一旦地面被美军彻底占据，所有的坑道口都会被轻易彻底摧毁，志愿军的战士意志力再强大，也无法生存下去。</p>
<p>但是在反斜面，美军的炮火打不过来，但是我军在五圣山的炮火却可以完全覆盖，美军士兵只要敢站上反斜面，就会遭到我军的炮火打击，从而没有能力破坏我军的坑道。</p>
<p><img src="/archives/df68c2e9/5.jpg" alt=" "></p>
<p>志愿军的战士之所以在白天缩到坑道里，只是为了防止被美军大口径航空弹给活活震死而已，并不是纯粹是依靠坑道只守不攻。</p>
<p>美军的炮火优势的确远胜于志愿军，但是志愿军的炮火也不弱，至少在反斜面压制美军步兵是没问题的，除此之外，中美双方的炮兵，还隔着上甘岭，凌空炮战，互相攻击对方的炮兵阵地。</p>
<p>炮战的强度到底有多大呢？别的战场，那是子弹横飞，而上甘岭战场，那是炮弹横飞，<font color="red">空中炮弹密度之大，甚至曾经命中一架俯冲投弹的美军战机，导致其凌空爆炸。</font></p>
<p>因为双方的炮火支援，最终志愿军占领了反斜面，美军占领了正斜面，中间的分界点，叫棱线。</p>
<p>谁占据棱线，谁就具备了视野优势，高地压制和突击先手权等一系列的好处。</p>
<p>在前期，由于美军的突袭，棱线被美军占据，甚至修建了坚固的工事，让志愿军一筹莫展，整个反斜面的志愿军都被火力压制，有时候甚至连从坑道冒头都困难，鼎鼎大名的一个苹果的故事，就发生在棱线被美军占据的那一段时间。</p>
<p>送一个苹果就能立二等功，水源后勤几乎断绝，但是准备了整整四万斤苹果，还牺牲了那么多运输员，最终居然只送上去一个苹果，其余的物资在运输中被全部摧毁。你想想，战斗中的志愿军得被美军火力压制的多惨。</p>
<font color="red">因为棱线如此重要，所以上甘岭战役最残酷的战斗，全部聚集于棱线区域。</font>韩国军史上直接将上甘岭战役，称之为“狙击棱线战斗”，而不是称之为坑道战。

第15军军史中写道：“上甘岭战役中，危急时刻拉响手雷、手榴弹、爆破筒、炸药包与敌人同归于尽，舍身炸敌地堡，堵敌枪眼等，成为普遍现象。”

而这些和敌人同归于尽的战斗，通常不会发生在坑道附近，一般都发生在棱线争夺战中。

例如黄继光，为了给战友一个冲锋的机会，拿身体堵抢眼。他为什么不等一等，因为此时离天亮只有40分钟了，如果再拿不下这个火力点，等天亮，就再也没有拿下棱线的机会了。

所以，黄继光堵了枪眼，而不是等后方的支援，因为他知道，如果不这么做，一旦今晚的战斗没有成功，等美军再次巩固了阵地，志愿军的牺牲会远大于此。

拿下了棱线，就占据了战斗的主动权，在朝鲜战争中，和敌人同归于尽的战斗英雄很多很多，黄继光之所以能成为战斗英雄的典型，是因为他的功劳太大了。

<font color="red">自从棱线上的美军坚固工事被全部打掉，就再也没有机会修建起来，而战斗的主动权也回到了志愿军手里。</font>

<font color="red">在无工事的情况下，夜战棱线争夺，志愿军占据绝对优势，这直接导致联合国军的伤亡开始迅速增加，而志愿军方面，再也不会困难到连一个苹果都运不进来。</font>

<p>最终，中美双方在上甘岭区域鏖战了43天，联合国军伤亡达到了2.5万，志愿军伤亡达到了1.15万，在美军最擅长的阵地战上，中国击败了美国。</p>
<p>美军夜战不如志愿军，近战不如志愿军，运动战不如志愿军，阵地战还是打不过志愿军，那就只剩平原战有优势了，但是朝鲜多山，给美军发挥优势的机会极少，美国完全看不到胜利的希望。</p>
<p>上甘岭战役后，美国再也没有发动过营级以上的攻势，直到最终认输，被迫同意在朝鲜停战协议上签字。</p>
<p>明明是势均力敌的战斗，最终战果也是平局，为何说是美国输了呢？因为双方的实力相差太大，最后居然打成平局，美国人自己认为自己输了，而中国人自己认为自己赢了。</p>
<p>美国上将克拉克在朝鲜停战协议上签字时<font color="red">哀叹，我是美国历史上第一个在没有取得胜利的停战协议上签字的司令官。</font></p>
<p>而在彭德怀元帅在签字后，则<font color="red">志得意满的对记者说，帝国主义在东方架起几门大炮就可以征服一个国家、一个民族的历史一去不复返了。</font></p>
<p>1953年7月27日，朝鲜停战协议正式签订，双方以38°线为分界点进行停战。</p>
<p>麦克阿瑟擅自越过毛主席警告的38°线，引来了中国的出兵，最终还是被迫回到了38°线，但是美国国力大损，所以麦克阿瑟被撤职，毁了一世英名。</p>
<hr>
<center><font color="orange" size="4">越南的17°线</font></center>

<hr>
<p>在朝鲜战争仅仅结束2年之后，越南战争爆发，到了1965年，美国更是直接参战。</p>
<p>而当时的中国领导人，通过外交部告知美国，你参战可以，但是北纬17°为红线，只要越过此线，中国就会出兵。</p>
<p><img src="/archives/df68c2e9/6.png" alt=" "></p>
<p>整个越南战争时期，美国别说地面部队不敢越线，就连飞机上都安装了17°线的报警器，生怕给了中国出兵的口实。</p>
<p>不越过17°线，美军就不可能彻底灭绝北越军队，但是越过17°线，则可能把越南变成第二个朝鲜。</p>
<p>所以，北越军队始终不灭，甚至后方的生产都没有耽误，让北越有力量源源不断的和美国缠斗。</p>
<p>越南成了彻底的泥潭，变成了美国的噩梦，对美国进行了持续的放血，让美国在和苏联的争霸中处于绝对的弱势。</p>
<font color="red">越南的17°线，成了美国人又恨又怕的一条线。</font>

<p>当年朝鲜的38°线，在毛主席发出明确警告时，麦克阿瑟置若罔闻，直接下令全军过线，甚至讥笑说，要是中国敢出兵，就把中国打回石器时代。</p>
<p>十年之后，北越的17°线，却成了美国军队的红线，美国宁可被北越持续放血也不敢越过此线。中国只是通过外交部传个话，整整10年，没有一个美国士兵敢于越过17°线。</p>
<p>没有朝鲜的38°线，哪有越南的17°线，国家之间，永远是实力为王。</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247486818&amp;idx=1&amp;sn=27241d49aebf102d8116b091eacb2a1a&amp;chksm=fe0d6574c97aec62a30743af0d99e5ffa7bcf974881e433d5f0c2d9d43694f298dd6c82c2c04&amp;mpshare=1&amp;scene=1&amp;srcid=1102EfUKkYOQKQ5S7Hhh9YNB&amp;sharer_sharetime=1604298793415&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=2ff6efa5b41f0127be0de028b066084019785435691c9f053e8fc295014f1ff7fd0707a45822ee25af0f838aa4e382140663efeaa9aaf798cd237c51f9761ffc519a02d23ca2e7880bc79639605abe280b3fa88db7e3db1e77de1d09ca4dd230907a02f9d40a4308b712a9c61c4f0548b1f2dce9d1952aa5231e1c44d835f7c5&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2C4NyoZ1fi%2BNKvGtesHQ%2BA%3D&amp;pass_ticket=ytqcTrkIxlSOZPF9Y7MS9WCG%2BoqqrEvfPJ1zTctENsq3GU%2FTOYIOM7e2LBdDBDzS&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>中国军队进化史</title>
    <url>/archives/5a1605e8/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 昨天</p>
<p>都说枪杆子里出政权，那大家有没有反思过，军队的战斗力，到底从何而来。</p>
<p>1950年，朝鲜战争爆发，以美国为首的联合国军和中国人民志愿军在朝鲜这个弹丸之地打了起来。</p>
<p>台湾的蒋介石，反思了自己和解放军几十年的斗争历史，发现自己仅有的几次胜利，全部是靠大修碉堡换来的，只要打运动战，必输无疑。</p>
<p>所以，蒋介石向联合国军建议，不要和志愿军打你来我往的运动战，很容易吃亏，他建议稳扎稳打，利用阵地战层层推进，要是能修上几十万个碉堡再打，那才能安心睡觉。</p>
<p>这个建议被麦克阿瑟嗤之以鼻，你自己无能不要误导别人，我还要带着美军圣诞节之前回家呢，打个中国军队而已，还修碉堡，修个鬼，浪费军费。</p>
<font color="red">蒋介石难得给美国提供了一次良心建议，还被无情的驳回。</font>

<p>后果大家也看到了，由于轻敌冒进导致美军损失惨重，麦克阿瑟被撤职查办。</p>
<p>接任的主帅李奇微虚心的接受了蒋介石的建议，和志愿军玩起了阵地战，开始蹲战壕，采用碉堡和火海战术相结合，才终于稳住了阵脚。</p>
<p>麦克阿瑟表示很冤枉，教科书上的中国军队不是这样子的，我被军校的教科书坑了！中国军队什么时候变得这么强了。</p>
<p>短短50年，中国军队经历多次蜕变，才最终脱胎换骨，从弱军变成了强军。而印度的军队，很明显没有这么强。</p>
<font color="red">这里面，有什么秘方么？</font>

<hr>
<center><font size="6"> 1 </font></center>

<hr>
<p>从1840年鸦片战争开始，中国军队和西方列强打仗，每战必败，而且败的非常惨，自己全军覆没，别人就死几个人那种惨败。</p>
<p>清政府认为，军事上的战败，是因为西方人有洋枪洋炮，纯粹是靠装备优势才打赢了大清，只要装备跟上去了，西方蛮夷绝对不可能和天朝上国的军队相抗衡。</p>
<p>当时国际上并没有武器禁运一说，只要你有钱，最先进的武器甚至军舰都可以随便买，外国人还负责帮你培训，可谓是服务到家。</p>
<p>经历60年的洋务运动，清政府还真建起来了一只新军，新式清军的装备非常之豪华，各种先进的武器都有。</p>
<p>我举个例子，当时清朝的岸防巨炮，是德国克虏伯厂原装进口，采用当时世界最先进技术，口径达到了340mm，威力远超当时的军舰主炮。</p>
<p>就看这造型，今天的你都知道这大炮不好惹，何况是100年前。</p>
<p><img src="/archives/5a1605e8/1.jpg" alt=" "></p>
<p>而加特林重机枪，彻底将骑兵军种从人类军备史上抹掉的陆军神器，清军也有装备，是李鸿章到德国访问参观时，亲自下单购买的，采用世界最先进技术。</p>
<p><img src="/archives/5a1605e8/2.jpg" alt=" "></p>
<p>当时的清朝陆军，不敢说冠绝全球，但武力绝对不弱，装备上丝毫不弱于西方强国。</p>
<p>所以，慈禧太后飘了，加上义和团的支持，慈禧觉得自己快无敌了。</p>
<p>1900年，慈禧向世界宣战，围攻外国使馆，引发八国联军入侵北京。</p>
<p>然后，清政府被残酷的现实给狠狠的教育了一番。</p>
<p><img src="http://img.soogif.com/20201031110408327.gif" alt=" "></p>
<p>当时北京城附近，清军和义和团加起来有几十万，而八国联军仅仅只有2万人，但这场战争的结果，却是清军被摧枯拉朽一样的击败。</p>
<p>首先就是配备了德国克虏伯最先进大炮的天津大沽炮台，拥有如此先进的大炮，却完全不堪一击。</p>
<p>历史资料上说：</p>
<blockquote>
<p>大沽口保卫战也是一场具有一定近代性质的战斗。守卫大沽炮台的清军所配备的新式大炮，多为克虏伯厂或阿姆斯特朗所造，炮台防军的训练也接近近代化。在守将罗荣光的指挥下，清军英勇抵抗6小时。</p>
</blockquote>
<p>没错，耗费重金打造的超级堡垒，<font color="red">6小时就没了</font>，还是“英勇抵抗”的前提下。</p>
<p>那些为岸防巨炮准备的特制重炮弹，全部被八国联军缴获，堆积如山。</p>
<p><img src="/archives/5a1605e8/4.png" alt=" "></p>
<p>攻陷大沽炮台后，八国联军只用了10天时间，就占领了北京城，路途中义和团的抵抗，连清风拂面都算不上。</p>
<p>民间乡勇不靠谱，京城的正规军总得靠谱吧。</p>
<p>当时的北京城，清朝正规守备军高达10万人以上，仅德国最先进的毛瑟11mm口径步枪就有10000支，加特林重机枪有两挺，外加70多门各种火炮。</p>
<p>下图，是被八国联军缴获的清军火炮，和当时八国联军配备的火炮，一样先进。</p>
<p><img src="/archives/5a1605e8/5.png" alt=" "></p>
<p>如此之强的装备，加上本土防御作战的优势，击败甚至全歼八国联军都不在话下。</p>
<p>结果整个北京城连一天时间都没扛住，就全部沦陷，给八国联军造成的死伤，微乎其微，少的都不好意思说。</p>
<font color="red">先进的火枪和大炮在清军手中，和烧火棍没啥区别。</font>

<p>1900年11月28日，在北京的紫禁城，八国联军列队庆祝胜利，随后开始了大规模的洗劫。</p>
<p><img src="/archives/5a1605e8/6.png" alt=" "></p>
<p>军官们在金銮殿宝座上合影留念。</p>
<p><img src="/archives/5a1605e8/7.png" alt=" "></p>
<p>普通士兵不甘寂寞，也找个宫殿拍一下到此一游。</p>
<p><img src="/archives/5a1605e8/8.png" alt=" "></p>
<p>而清朝的留守官员，则向八国联军的军官行叩拜大礼。</p>
<p><img src="/archives/5a1605e8/9.png" alt=" "></p>
<p>这就是中国新式军队留给世界的第一次印象，完全可以用豆腐渣来形容，<font color="red">哪怕拥有最先进的武器，还是豆腐渣。</font></p>
<hr>
<center><font size="6"> 2 </font></center>

<hr>
<p>辛丑条约签订后，八国联军退去，整个中国都醒悟过来，光靠买先进的武器装备没有用，封建军队哪怕拿上神兵利器，它还是封建军队。</p>
<p>要学，就得学全套，西方的军队制度必须得学，老祖宗留下来的那一套军制不能再用了。</p>
<p>于是，就有了袁世凯练兵之举。</p>
<p>袁世凯采用德国和日本的步兵操典，采用清一色的西方的装备和军队体制，力求练出和西方一样的强军。</p>
<p>这是中国军事史上开天辟地的革命，师、旅、团、营、连这种西方军制第一次被引入中国，取代了老旧的封建军事体系。</p>
<font color="red">这，是中国军队的第一次蜕变。</font>

<p>袁世凯在练兵上大费苦心，创办了大量军事院校，进行全面西化，鼎鼎大名的北洋陆军武备学堂，为中国培训出了第一批西式将领，为北洋军队源源不断的输送人才。</p>
<p>当时北洋的军校教学，已经出现了当时世界上最先进的沙盘教学，主教官均聘请自西方列强国家。</p>
<p><img src="/archives/5a1605e8/10.png" alt=" "></p>
<p>北洋军队的炮兵训练，以今天的眼光去看，也可圈可点。</p>
<p><img src="/archives/5a1605e8/11.png" alt=" "></p>
<p>当时的北洋军队，还从德国采购了最新的热气球，作为侦查使用，这可能是中国的第一支空军部队了。</p>
<p><img src="/archives/5a1605e8/12.png" alt=" "></p>
<p>“北洋三杰”段琪瑞、冯国璋、王士珍均是从武备学堂毕业，如此强大的人才储备和先进装备结合，让北洋军队的战斗力，冠绝全国。</p>
<p>在1905年，北洋新军炼成，兵额7万人，成为了当时全中国最强大的武力集团，而整支军队上上下下，只听袁世凯一人。</p>
<p>这种封建化私人控制的手段，让袁世凯最终得以逼迫清帝退位，同时，也让中国军队的蜕变，到此为止。</p>
<font color="red">北洋军队，是中国第一支近代化军队，强于封建化军队，但远弱于现代化军队。</font>

<hr>
<center><font size="6"> 3 </font></center>

<hr>
<p>因为淘汰了清朝老祖宗传下来的封建军制，北洋军队的战斗力极强，称霸中国二十余年。</p>
<p>但袁世凯也仅仅只是采用了西方的军制，并未采用西方的整套思想体系，依然采用封建领主的思想来控制军队。</p>
<p>袁世凯在打造北洋军队时，采用各种手段强化军队对其的个人忠诚，而旗下各个将领也有学有样，整个北洋军队，实行封建领主一样的层层分封制度。</p>
<p>兵为将有的制度，让军队一切向钱看，当兵就是为了吃饷，军队是给个人打工的。</p>
<p>哪怕是袁世凯，调动手下的军队，也得先把钱分下去，喂饱了将领再喂饱士兵，军队才愿意战斗。</p>
<font color="red">所以，北洋军队的战斗意愿，和封建军队差不多。</font>

<p>因为当兵是为了吃饷嘛，拿多少钱办多少事，我就拿那一点工资，犯不着把命都搭上。</p>
<p>虽然西方军制让北洋军队可以科学合理的使用火器，在作战科学度上已经追上了西方军队，但是这个战斗意愿依然等同于封建军队。</p>
<p>在古代，如果要激发士兵的血性，必须要“重赏”，如果拿不出钱，就只能靠屠城的诱惑来激励军队，所以古代的统一战争才那么喜欢屠城。</p>
<p>没办法屠城和重赏的时候，军队的战斗意愿就极其低落。</p>
<font color="red">当年保卫北京城的10万清军，死个千把人，就全线崩盘，一哄而散，在军事意义上已经“全军覆没”。</font>

<p>而北洋军队的战斗意愿，也好不到哪去。</p>
<font color="red">讨逆战争中，张勋和段祺瑞的数万军队在北京城周围混战11天，打了300多万发子弹，最后共计死亡28人。</font>

<p>这让穷困潦倒，提倡<font color="red">一颗子弹消灭一个敌人</font>的红军情何以堪。</p>
<blockquote>
<p>“……我说我军切不要像张勋的军队，他与段祺瑞打仗，打了三百多万发子弹，才打死二十八个人。<br>—(陈毅《华东一年来自卫战争的初步总结》)</p>
</blockquote>
<p>而这一切，都被当时在北京的外国领事馆传回了国内，当时还有领事馆的报告说，双方一共打了5000万发子弹，最后伤亡共计25人。</p>
<font color="red">就因为死了20几个人，张勋“全军覆没”，大清又亡了一次。</font>

<p>这，就构成了西方对中国军队的第二次印象。</p>
<p>如果中国军队一直维持这个模样，别说印度，估计连非洲的一些军队都打不过。</p>
<font color="red">腐朽的东西，一定会被历史所淘汰。</font>

<hr>
<center><font size="6"> 4 </font></center>

<hr>
<p>袁世凯死后，中国陷入了北洋军阀的混战时期。</p>
<p><img src="/archives/5a1605e8/13.png" alt=" "></p>
<p>经过优胜劣汰的角逐，至1926年国民革命军北伐前，形成了三大北洋军阀。</p>
<p>其中，吴佩孚20多万、孙传芳20多万，张作霖35万，合计80万大军。</p>
<p><img src="/archives/5a1605e8/14.png" alt=" "></p>
<p>吴佩孚作为中国军阀的代表，还上过美国的时代杂志封面。。。</p>
<p><img src="/archives/5a1605e8/15.png" alt=" "></p>
<p>而当时的广东国民政府，偏于一隅之地，总共只有8.5万军队，却在两年之内，摧枯拉朽的消灭了北洋军阀，统一了全国。</p>
<p>到底发生了什么？如果国民革命军这么强的话，早干嘛去了？</p>
<p>国民革命军有的武器，北洋军阀都有，国民革命军有黄埔军校，北洋军阀也有北洋陆军武备学堂，而论财力，北洋军阀完胜国民革命军。</p>
<font color="red">说成大白话就是，你有的我都有，你没有的我也有，凭什么你赢？</font>

<p>国民革命军吃了大力丸么？怎么突然变得这么猛？</p>
<p>还真有大力丸。</p>
<p>1905年，以反对帝制为主要目标，孙中山先生提出了三民主义。</p>
<p>三民主义强有力的打击了满清统治的合法性，为满清的最终灭亡提供了契机，但三民主义的能量也就到此为止了，对于后期北洋军阀的混战无能为力。</p>
<p>孙中山先生不断的进行反思和探索，争取为中国找到一条新的出路。</p>
<p>1917年，国际上爆发了俄国的十月革命，1919年，国内爆发了五四运动。</p>
<p>这两年大事，促进了孙中山先生的思想变化，在1924年1月，导致了新三民主义的诞生。</p>
<blockquote>
<p>在民族领域，孙中山提出打倒帝国主义，打倒和帝国主义勾结之军阀。<br>在民权领域，孙中山提出要改良欧美现行制度之流弊，强调直接民权与权能区分，即政府拥有治权，人民则拥有政权，不完全实行西方选举制。<br>在民生领域，孙中山提出实行土地国有，然后由国家分配给农民，并节制资本，在命脉行业实行国有资本控制，使私有资本制度不能操纵国民之生计。</p>
</blockquote>
<font color="red">看完了之后你会发现，这不就是半个共产主义么？新中国建立后实行的就是这一套。</font>

<p>你说的一点都没错，因为这就是孙中山受到共产主义的启发才改良的。</p>
<p>同年，孙中山在国民党第一次代表大会上，<font color="red">提出联俄、联共、扶助农工三大政策</font>，接受苏联援助，成立黄埔军校，提出国共合作，允许共产党员以个人身份加入国民党，拥有双党身份。</p>
<p>在国共合作的初期，双方的关系是非常密切的，在1925年12月黄埔军校的演讲中，<font color="red">蒋介石说：“我愿为三民主义而死，亦即为共产主义而死也！”</font></p>
<p>国民革命军被新三民主义的思想武装后，共产党又补上了基层动员的短板，直接从近代化军队，升级为了现代化军队，<font color="red">这是中国军队的第二次蜕变。</font></p>
<p>近代军队和现代军队的最大区别在哪里？</p>
<p>最大的区别就在于近代军队是用金钱和对个人的忠诚组织起来的军队，而现代军队是用思想和主义，以及对国家的忠诚组织起来的军队。</p>
<font color="red">近代军队为钱而战，失去指挥官后就一哄而散，现代军队为主义而战，哪怕还剩最后几个人，依然能坚持战斗。</font>

<p>双方的战斗力，天差地别。</p>
<p>1925年3月，孙中山先生不幸逝世，但北伐依旧按计划进行。</p>
<p>1926年6月4日，北伐开始，8.5万国民革命军全军出击，要讨伐80万装备精良的北洋军队。</p>
<p><img src="/archives/5a1605e8/16.png" alt=" "></p>
<p>8月20日，国民革命军占领长沙，又攻破多重防线，兵临吴佩孚的统治中心武汉，10月，北伐军占领武汉全城，消灭了军阀吴佩孚。</p>
<p>在武汉攻城战如火如荼之时，北伐军同时在江西境内激战，从9月22日到11月8日，北伐军三打南昌，以阵亡一万五千人的代价，消灭了军阀孙传芳。</p>
<p>江西鏖战之际，福建小军阀周荫人的部队企图进攻广东，扰乱北伐军后方。</p>
<p>留守在黄埔军校的教官何应钦，向福建出兵，到1926年12月，占领福建全省，并向浙江方向出击，兵锋直指上海。</p>
<font color="red">换句话说，短短半年时间，区区8.5万北伐军，兵分三路，分别灭掉了两湖的吴佩孚、江西的孙传芳，以及福建的周荫人。</font>

<p>什么叫摧枯拉朽，这就是，完全是碾压式的战斗，这么远的距离，光行军都要花不少时间。</p>
<p>为策应北伐，黄埔军校政治部主任周恩来与陈独秀等人，在上海发动工人武装起义，接应北伐军顺利的占领了上海。</p>
<p>在占领上海15天后，蒋介石发动了震惊中外的“4.12”政变，大肆屠杀共产党人。</p>
<font color="red">这是蒋介石的一次叛变，不仅仅是叛变了共产党，他还叛变了国民党，更叛变了新三民主义。</font>

<hr>
<center><font size="6"> 5 </font></center>

<hr>
<p>国民革命军为国民政府所有，忠于国家，忠于新三民主义，并非为个人私产。</p>
<p>但是在蒋介石北伐的过程中，为满足个人私欲，回归到了袁世凯那一套，采用各种手段强化国民革命军对其个人的忠诚。</p>
<p>在国民革命军内部，凡是忠于蒋介石的将领，一律另眼相看，哪怕违法违纪，贪污赌博，都可以网开一面。</p>
<p>这种“恩威并施”的手段，让这些将领对蒋介石感恩戴德，成为了其忠实的“嫡系”。</p>
<p>而不忠于蒋介石的将领，哪怕再优秀，也被归属于杂牌，不仅有严刑峻法制裁，而且还换着花样的想办法让其去战场送死。</p>
<font color="red">蒋介石的唯一目的，是让国民革命军变成蒋家军，让国民政府变成蒋家政府。</font>

<p>所以，在国民政府一致决议迁都武汉之时，蒋介石拒不接受，非要在南京另立中央。</p>
<p>要篡权，可没那么容易，国民党里的元老太多，掌握的能量也太大。</p>
<p>为了获取外部的支持，在蒋介石占领上海后，就决定全面倒向西方列强，取消新三民主义的反帝国主义纲领，成为西方列强新的代理人，取消土地国有和限制资本的纲领，成为大地主大资本家的代理人。</p>
<p>因为只有西方列强、大地主和大资本家，才能在短期内给予蒋介石足够的支持。</p>
<p>蒋介石的选择，从他个人的角度上来说，是对的，因为在国民党内部夺权的过程中，蒋介石几次都差点被赶下台，经历龙争虎斗才最终篡权成功。</p>
<p>但是毫无疑问，蒋介石叛变了新三民主义，叛变了国民党，也叛变了共产党。</p>
<p>孙中山先生被国民党和共产党共尊为国父，孙中山一手缔造了国民党，国民党称孙中山为国父天经地义。</p>
<p>但共产党为什么也要尊孙中山为国父，而不是袁世凯？这和孙中山先生提出的新三民主义，有极大的关系。</p>
<p>我们为什么一直说蒋介石背叛了革命，不单单指蒋介石背叛了共产党，<font color="red">更关键的，是蒋介石背叛了新三民主义。</font></p>
<p>蒋介石成功的把国民党变成了个人私产，修改了孙中山新三民主义的初衷，更驱逐了其北伐成功的最大助力——共产党。</p>
<p>失去了新三民主义的加成，失去了基层工人和农民的支持，重新搞军阀私产那一套。</p>
<font color="red">从此，国民革命军，从现代化军队，再次衰退回了近代军队。</font>

<hr>
<center><font size="6"> 6 </font></center>

<hr>
<p>到1930年，国民革命军的人数已经扩张到了百万级别。</p>
<p>于是，蒋介石发动了中原大战，和阎锡山、冯玉祥、李宗仁等人决战，要清理所有不听指挥的小军阀，真正意义上统一全国。</p>
<p>蒋介石想，自己当年才8.5万人，一年时间就消灭了吴佩孚、孙传芳这种大军阀，随后还重创了张作霖的部队。</p>
<p>为啥北伐军那么牛，还不是因为自己的英明神武！</p>
<p>如今自己兵强马壮，打几个小军阀，不在话下，肯定是手到擒来。</p>
<p>蒋介石集中了60万精锐军队，只留下少量弱军留守地方，几乎把所有家底都压上了，对战80万反蒋联军。</p>
<p>结果打了半年，蒋介石差点打输了，最后只能依靠外交手段，让东北的张学良挥军入关进行调停，才结束这场战役。</p>
<p>根据调停结果，包括东北的张学良在内，全国都改旗易帜，名义上听命于蒋介石，但实际上各自为政，军权和政权蒋介石都无权干涉。</p>
<p>一直到解放战争末期，阎锡山、冯玉祥、李宗仁等人都是国民党内部的国中之国，蒋介石做梦都想弄死的“杂牌部队”。</p>
<p>为啥纵横中国几十年的大军阀被国民革命军摧枯拉朽的击败，而几个不怎么出名的小军阀反而差点把蒋介石打哭。</p>
<font color="red">因为国民革命军，也变成了军阀，军阀对军阀，60万当然打不过80万。</font>

<p>国民革命军创造的北伐奇迹，唯一的原因，就是因为北伐军不是为了军阀的利益而战斗。</p>
<hr>
<center><font size="6"> 7 </font></center>

<hr>
<p>为什么蒋介石容得下国民党，容得下青年党，容得下民盟，偏偏就容不下对自己战斗力帮助最大的共产党。</p>
<p>因为蒋介石为了军队私有化，不得不借力于大地主阶级和买办阶级的帮助，如果蒋介石真的走土地国有的半共产主义路线，依赖工人和农民搞革命。</p>
<p>也许革命会更顺利的成功，但新的共和政府，一定不会是蒋介石的私人财产。</p>
<p>为了满足个人私欲，蒋介石选择了叛变革命，驱逐共产党，收编国民党。</p>
<p>从此，国民革命军的组织理念，就变成了西方列强和国内大地主大资本家的代理人。</p>
<font color="red">这个组织理念，青年党容得下，民盟容得下，和蒋介石对着干的汪精卫、阎锡山等人也容得下，但共产党容不下。</font>

<p>所以，蒋介石谁都可以容，就是容不下共产党，哪怕共产党对其战斗力帮助最大。</p>
<p>蒋介石治下的国民政府，并未达到孙中山先生新三民主义的希望，而是一个变种的新军阀集团，以前的统治阶级，换了个皮，就成了国民党。</p>
<blockquote>
<p>“满眼是白旗。然而貌虽如此，内骨子是依旧的，因为还是几个旧乡绅所组织的军政府，什么铁路股东是行政司长，钱店掌柜是军械司长……。”<br>—（鲁迅《范爱农》）</p>
</blockquote>
<font color="red">个人是无法对抗组织的，只有组织才可以对抗组织。</font>

<p>那组织和个人的区别到底在哪里？是因为组织人多么？</p>
<p>并不是，组织和个人最重要的区别，是因为组织有自己的理念，<font color="red">由于拥有共同的理念，所以才形成了组织。</font>如果没有共同的理念，人再多，也是一盘散沙，乌合之众。</p>
<font color="red">而组织之间的对抗，说白了就是理念之间的对抗，</font>判断你是哪个组织的人，并不是看你的身份，而是看你的思想。

你想干嘛，你到底为何而战？

国共之间的最根本的矛盾，就是共产党一定要土地国有，一定要驱逐西方列强，一定要撕毁所有不平等殖民条约，要把整个中国的旧势力全部捣毁，掀了桌子重新开始。

如果这么做，蒋介石就失去了他的执政根基，就无法实现蒋家王朝，所以蒋介石容不下共产党，哪怕私人关系再好，他也容不下。

这是组织理念级别的冲突，蒋氏军事集团上上下下的利益，全部系于蒋介石一身，就算蒋介石愿意放弃自己的执政根基，他的嫡系也不会容许他放弃，否则他们奢靡的生活从何而来。

蒋介石的自私行为，让中国军队从现代化倒退回了近代化。

<font color="red">既然他不愿意带领中国军队步入现代化，那我们就另起炉灶，重新打造中国军队。</font>

<hr>
<center><font size="6"> 8 </font></center>

<hr>
<p>1927年8月1日，在蒋介石发动反共大屠杀的3个月后，共产党发动了南昌起义，成立了自己的工农红军，打响了武装斗争的第一枪。</p>
<p><img src="/archives/5a1605e8/17.png" alt=" "></p>
<p>很多人认为，解放军是战无不胜的，任何一个投降的国民党军人，只要穿上了解放军的衣服，战斗力立马飙升十倍。</p>
<font color="red">难道中国人民解放军的衣服上面有魔法？</font>

<p>并没有，那只是一身普普通通的衣服，<font color="red">解放军战斗力爆棚的真正魔力，来自于共产主义精神和思想。</font></p>
<p>只有被共产主义思想改造的国民党军人，才是真正的解放军，否则战斗力依然是渣。</p>
<p>书本上就是这么说的，很多人认为是吹牛皮，打仗就是看装备，思想是什么东西，那虚无缥缈的东西有啥用，比得过炮弹么？</p>
<font color="red">思想工作大过天，这不是解放军拍脑袋定下来的，而是不断的斗争中积累下的宝贵经验和教训。</font>

<p>南昌起义时，工农红军有2万多人部队，20天之后，就剩1000人了，红军被逼无奈把队伍拉上了井冈山。</p>
<p>人哪去了？看打不赢，散伙回家了。</p>
<p>很多人当时加入红军纯粹是为了投机，为了抢钱抢粮抢女人，压根没有什么共产主义理念和思想，简单的把共产主义理解为打土豪，抢粮食，分光吃净。</p>
<p>如果我们用这样的人来组成红军，那和军阀的部队有何区别，甚至还不如军阀。</p>
<font color="red">毛泽东到了井冈山之后，第一件事就是办学校，组建教导队，给士兵们讲共产主义，讲马克思列宁思想，讲红军的理念。</font>

<font color="red">于是，中国军队迎来了自己的第三次蜕变。</font>

<p>明白自己为何而战的红军，才是真正的红军，绝对不是换身衣服的事情。</p>
<p>所以，国民党的部队，只能打顺风仗，不能打逆风仗，部队极其惧怕牺牲，阵亡人数达到很低的比例就自行崩溃，全军投降。</p>
<p>但是工农红军，爬雪山过草地，军饷发不出来，连粮食都没有，依然可以坚持战斗欲望。</p>
<p>红军战士掉队，第一件事就是想办法追上大部队，因为只有追上大部队才能实现自己革命的理念。</p>
<p>而国民党的军队就不一样了，要盯紧了，稍不留神就全跑了。</p>
<p>很多人问，就算拥有了理念，有了坚强如钢铁的战斗意志，有用吗？在大炮面前和纸有啥区别。</p>
<p>还真有用。</p>
<p>我们可以看看早期的红军活跃在什么地方，活跃在井冈山、陕甘宁边区等穷困山区。</p>
<p>这些地方有一个特点，经济落后，交通不便，易守难攻，<font color="red">别说国民党打不下来，就是红军自己来打，也打不下来。</font></p>
<p>谁能得到当地百姓的支持，谁才能在这样的地方落地生根。</p>
<p>那问题来了，这些地方的百姓，凭什么要支持红军？国民党明明更有钱，更有力量。</p>
<p>这就是共产主义理念的威力了，凭借宣传自己组织的理念，红军到了任何一处穷困的山区，都能迅速获得当地百姓的支持，从而落地生根，获得休养生息的机会。</p>
<font color="red">因为红军的理念，是为穷苦人夺天下。</font>

<p>每一个为了吃兵饷而给国民党打仗的士兵，只要进了解放军的军营，听上几节课，就会立刻调转枪口去打国民党，军饷什么的都好说，战斗力可以直接飙升10倍。</p>
<font color="red">思想，成了中国人民解放军最锋利的武器，所以解放军才可以做到越打越强，你说半个中国是靠共产主义的思想和理念凭空打下来的，都没什么错。</font>

<p>因为具备明确的理念，知道自己为何而战，解放军，才成为了中国的第一支真正的现代化军队。</p>
<hr>
<center><font size="6"> 9 </font></center>

<hr>
<font color="red">有了理念的组织，才是真正的组织，组织之间的强弱，完全取决于彼此的理念强弱，理念强，则组织强。</font>

<p>纵观全世界的战争史，我们会发现，实行共产主义的国家，在同等装备下，战斗力都碾压他国。</p>
<p>不管是实行选举制的英国和美国，还是实行独裁制的德国和日本，战斗力都不如共产主义国家。</p>
<p>在同等军力规模下，能击败共产主义国家的，唯有共产主义国家，累累案例证明，<font color="red">以共产主义理念组织起来的军队，世界最强，毋庸置疑。</font></p>
<font color="red">组织的理念一旦成型，就会成为组织的凝聚力，驱动整个组织滚滚向前。如果你能摧毁这个组织的理念，那整个组织就会凭空瓦解。</font>

<p>靠军事，是永远无法击败共产主义国家的，能击败他的，只有他自己。</p>
<font color="red">共产主义的组织理念是什么，是为穷苦人夺天下，如果失去了这个理念，整个组织就会凭空瓦解，不需要耗费一枪一弹。</font>

<p>苏联为什么亡，是因为发展重工业，忽视轻工业而亡国的么？是因为经济发展困难而亡国么？</p>
<p>当然不是，苏联亡国的唯一原因，就是苏联的领导层已经失去了自己的组织理念，贪污横行，为自己的奢靡生活而战，而不是为穷苦人而战。</p>
<p>晚期的苏联，已经变成了第二个国民党，组织理念丧失，为自己的私欲而活。</p>
<p>当一个共产主义组织，失去了共产主义的理念，下场是什么？</p>
<p>下场就是自行瓦解。</p>
<font color="red">谁为穷苦人的利益考虑，谁才是共产主义组织，至于这个组织叫什么名字，根本无足轻重。</font>

<p>中国改革开放后，修改了多项社会制度，放弃了激进的措施和手段，但是最核心的那个点，始终没有变。</p>
<p>中国不会因为经济困难而亡，也不会因为军事压力而亡，唯一能让中国瓦解的，就是内部贪腐。</p>
<font color="red">所以，中国历年的头等大事，就是反腐，任何事情和这件事一比，都是小事。</font>

<p>我今天所讲的事情，中学历史书上都有。但是历史书上只给结论，而不给过程，让很多人非常不以为然。</p>
<p>所以，我今天把中国军队的进化史给大家重新梳理一遍，让大家知道这些结论到底从何而来，有没有道理。</p>
<p>历史上，所有的共产主义国家都是强于军事，短于经济。</p>
<p>如今，有一个新型的共产主义国家，强于军事的同时，经济建设还冠绝全球，如果这个国家能长期坚持反腐，始终维持为穷苦人夺天下的共产主义理念不动摇。</p>
<font color="red">那可想而知，这个国家的未来会是多么的辉煌和强大。</font>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247520708&amp;idx=6&amp;sn=d64d61c09f787a474c66cc22cab7b9d0&amp;chksm=fe0ef9d2c97970c439fa6640551a7c078d7b057a14f8ab001dff142a49d53e551e87ff833fe8&amp;mpshare=1&amp;scene=1&amp;srcid=1031J4rYAiytWKKTHSav8HXk&amp;sharer_sharetime=1604107240029&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=825c145cf50a0d42caa0fe0c580414be70fe2f799391cec4d0a97a5f226e558938d9b1d7f321885d6a07995df895710d6be5e0d97a3034078700776c7123bce96c1b7d236430c57e2829ab02cb104e48c1bbd8411deb26cef6c6eaadce64bc6729d0a680f76b26094908083a469f7425edcdbc08cabc01607bcd54429d513607&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2o%2FXEpYYWYr9cK63HK8PqQ%3D&amp;pass_ticket=NTlpnWSWEMB1%2BCi74Gz7rgAjHkQxk8qN2m3DqWU59wowa%2BYDDgbvC4E5kfvf9YpC&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客之后续SEO优化</title>
    <url>/archives/efed9114/</url>
    <content><![CDATA[<p><img src="/archives/efed9114/4.png" alt=" "><br>SEO (Search Engine Optimization)，即搜索引擎优化。简单来说，SEO就是您可以使用提升网站排名的所有方法的总称，SEO用于确保您的网站及其内容在搜索引擎结果页面（SERP）上的可见性。</p>
<h2 id="验证你的网站-让你博客被搜索引擎找到"><a href="#验证你的网站-让你博客被搜索引擎找到" class="headerlink" title="验证你的网站(让你博客被搜索引擎找到)"></a>验证你的网站(让你博客被搜索引擎找到)</h2><h3 id="查看你的博客是否被收入"><a href="#查看你的博客是否被收入" class="headerlink" title="查看你的博客是否被收入"></a>查看你的博客是否被收入</h3><p>在谷歌或者百度的搜索链接中，使用以下格式可以直接搜索自己的域名， 如果能搜索到就说明已经被收录，反之则没有。可以直接搜索自己的域名，或者加一些关键词来更好地判断，例如：<br><code>site: https://blog.hellshan.top</code></p>
<h3 id="提交我们的网站"><a href="#提交我们的网站" class="headerlink" title="提交我们的网站"></a>提交我们的网站</h3><p>若未被搜索引擎收录，则需进行以下配置，首先要让搜索引擎先验证我们对网站的所有权，两个搜索引擎提交的入口分别为：<br><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google Search Console</a><br><img src="/archives/efed9114/1.png" alt=" "><br><a href="https://ziyuan.baidu.com">百度站长平台</a><br><img src="/archives/efed9114/2.png" alt=" "><br>有多种验证方式，这里推荐 HTML 文件上传方式。下载 HTML 验证文件，拷贝到 Hexo/sources/ 文件夹下,为了使 hexo 不处理这两个验证文件，并且不生成关于这两个文件的 sitemap，我们需要打开验证文件，在最上面添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>然后执行 hexo 部署命令<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>最后返回验证页面，就可以查看验证是否通过了</p>
<h2 id="生成Sitemap"><a href="#生成Sitemap" class="headerlink" title="生成Sitemap"></a>生成Sitemap</h2><p>Sitemap即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据</p>
<h3 id="安装sitemap生成插件"><a href="#安装sitemap生成插件" class="headerlink" title="安装sitemap生成插件"></a>安装sitemap生成插件</h3><p><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p>
<h3 id="编辑站点目录下的-config-yml，添加一下字段"><a href="#编辑站点目录下的-config-yml，添加一下字段" class="headerlink" title="编辑站点目录下的_config.yml，添加一下字段"></a>编辑站点目录下的_config.yml，添加一下字段</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hexo sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br></pre></td></tr></table></figure>
<p>之后在执行 hexo g 后， public目录下发现生成了 sitemap.xml和baidusitemap.xml 就表示配置成功了。</p>
<h2 id="提交sitemap"><a href="#提交sitemap" class="headerlink" title="提交sitemap"></a>提交sitemap</h2><h3 id="向谷歌提交"><a href="#向谷歌提交" class="headerlink" title="向谷歌提交"></a>向谷歌提交</h3><p>向谷歌提交 sitemap 比较简单，登录 Google Search Console ，选择已经验证过的站点，在抓取 -&gt; 站点地图 中，右上角可看到 添加 / 测试站点地图，添加 sitemap.xml 的链接即可，谷歌效率较高，一般当天或者第二天就能搜到微博了。如图：<br><img src="/archives/efed9114/3.png" alt=" "></p>
<h3 id="向百度提交"><a href="#向百度提交" class="headerlink" title="向百度提交"></a>向百度提交</h3><p>与谷歌类似，我们可以直接向百度交 sitemap，登录 百度站长平台，点击 网页抓取-&gt; 链接提交，在 自动提交中选择 sitemap，输入自己的域名加 baidusitemap.xml 即可，之后可查看 url 提取是否成功。<br>由于 GitHub 屏蔽了百度的爬虫，即使提交成功，百度知道这里有可供抓取的链接，也不一定能抓取成功。 首先我们先检测一下百度爬虫是否可以抓取网页。在百度站长平台网页抓取-&gt;抓取诊断 中，选择PC UA点击抓取 , 查看抓取状态， 如果显示 抓取失败， 则需要进一步的配置。</p>
<h3 id="主动推送和自动推送"><a href="#主动推送和自动推送" class="headerlink" title="主动推送和自动推送"></a>主动推送和自动推送</h3><p>百度提供了多种链接提交的方式，可以综合使用，互为补充。<br>    如何选择链接提交方式<br>    1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>    2、自动推送：最为便捷的提交方式，请将自动推送的 JS 代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>    3、sitemap：您可以定期将网站链接放到 sitemap 中，然后将 sitemap 提交给百度。百度会周期性的抓取检查您提交的 sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>    4、手动提交：一次性提交链接给百度，可以使用此种方式</p>
<p><strong>自动推送</strong><br>我这里用的python自动推送脚本（Mac环境）如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: LoveNight</span></span><br><span class="line"><span class="comment"># @Last Modified by:   LoveNight</span></span><br><span class="line"><span class="comment"># @Last Modified by:   Keith</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import msvcrt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hexo 博客专用，向百度站长平台提交所有网址</span></span><br><span class="line"><span class="string">本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。</span></span><br><span class="line"><span class="string">百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index</span></span><br><span class="line"><span class="string">主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</span></span><br><span class="line"><span class="string">从中找到自己的接口调用地址</span></span><br><span class="line"><span class="string">python环境：</span></span><br><span class="line"><span class="string">pip install beautifulsoup4</span></span><br><span class="line"><span class="string">pip install requests</span></span><br><span class="line"><span class="string">xcode-select --install  </span></span><br><span class="line"><span class="string">pip install lxml </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ❌❌❌ 抄的需要更改这个URL！！！❌❌❌</span></span><br><span class="line">url = <span class="string">&#x27;http://data.zz.baidu.com/urls?site=jimmyju.github.io&amp;token=6Q3qdoIrzAtnwLWj&#x27;</span></span><br><span class="line">baidu_sitemap = os.path.join(sys.path[<span class="number">0</span>], <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;baidusitemap.xml&#x27;</span>)</span><br><span class="line">google_sitemap = os.path.join(sys.path[<span class="number">0</span>], <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;sitemap.xml&#x27;</span>)</span><br><span class="line">sitemap = [baidu_sitemap, google_sitemap]</span><br><span class="line"><span class="keyword">assert</span> (os.path.exists(baidu_sitemap) <span class="keyword">or</span> os.path.exists(</span><br><span class="line">    google_sitemap)), <span class="string">&quot;没找到任何网站地图，请检查！&quot;</span></span><br><span class="line"><span class="comment"># 从站点地图中读取网址列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrls</span>():</span></span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> sitemap:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(_):</span><br><span class="line">            <span class="keyword">with</span> open(_, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                xml = f.read()</span><br><span class="line">        soup = BS(xml, <span class="string">&quot;xml&quot;</span>)</span><br><span class="line">        tags = soup.find_all(<span class="string">&quot;loc&quot;</span>)</span><br><span class="line">        urls += [x.string <span class="keyword">for</span> x <span class="keyword">in</span> tags]</span><br><span class="line">        <span class="keyword">if</span> _ == baidu_sitemap:</span><br><span class="line">            tags = soup.find_all(<span class="string">&quot;breadCrumb&quot;</span>, url=<span class="literal">True</span>)</span><br><span class="line">            urls += [x[<span class="string">&quot;url&quot;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> tags]</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"><span class="comment"># POST提交网址列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postUrls</span>(<span class="params">urls</span>):</span></span><br><span class="line">    urls = set(urls)  <span class="comment"># 先去重</span></span><br><span class="line">    print(<span class="string">&quot;一共提取出 %s 个网址&quot;</span> % len(urls))</span><br><span class="line">    print(urls)</span><br><span class="line">    data = <span class="string">&quot;\n&quot;</span>.join(urls)</span><br><span class="line">    <span class="keyword">return</span> requests.post(url, data=data).text</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls = getUrls()</span><br><span class="line">    result = postUrls(urls)</span><br><span class="line">    print(<span class="string">&quot;提交结果：&quot;</span>)</span><br><span class="line">    print(result)</span><br><span class="line"><span class="comment">#    msvcrt.getch()</span></span><br></pre></td></tr></table></figure>
<h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h2><p>robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br>在 source 目录下增加 rebots.txt 文件，网站生成后在网站的根目录(站点目录/public/)下。<br>（请将域名改为自己的网站）</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://你的域名/sitemap.xml</span><br><span class="line">Sitemap: https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>Allow表示允许被访问的，Disallow是不允许的意思。注意后面两个Sitemap就是网站地图了。而网站地图前面说了是给爬虫用的。这里配置在robots中。</p>
<h2 id="Url持久化"><a href="#Url持久化" class="headerlink" title="Url持久化"></a>Url持久化</h2><p>我们可以发现hexo默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。<br>这种链接对搜索爬虫是很不友好的，第一它的url结构超过了三层，太深了。<br>下面我推荐一种方式：<br>安装 hexo-abbrlink<br><code>npm install hexo-abbrlink --save</code><br>然后配置_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: :title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>之后部署一下，就看到你的链接的变化<br>如果看不到图片，则可把<br><code>permalink: archives/:abbrlink.html</code><br>改为<br><code>permalink: archives/:abbrlink/</code></p>
<h2 id="添加-nofollow-标签"><a href="#添加-nofollow-标签" class="headerlink" title="添加 nofollow 标签"></a>添加 nofollow 标签</h2><p>给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。<br>首先修改 footer.swig（your-hexo-site\themes\next\layout_partials)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://hexo.io&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://hexo.io&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/iissnan/hexo-theme-next&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/iissnan/hexo-theme-next&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>再修改 sidebar.swig（your-hexo-site\themes\next\layout_macro）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; link &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; link &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cc-opacity&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cc-opacity&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>优化都完成后可通过谷歌搜索文章标题，测试是否被收录及排名。</p>
<h2 id="页面关键字优化"><a href="#页面关键字优化" class="headerlink" title="页面关键字优化"></a>页面关键字优化</h2><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>文件路径是your-hexo-site\themes\next\layout\index.swig,打开编辑：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="keywords-关键词、关键字"><a href="#keywords-关键词、关键字" class="headerlink" title="keywords(关键词、关键字)"></a>keywords(关键词、关键字)</h3><p>keywords在你_config.yml配置文件中就有。注意的是除了根目录上的要修改以外还有主题里的。否则就会出现默认的keywords。</p>
<h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>description就是这个页面的描述，随便写什么。</p>
<h2 id="Next主题自带SEO优化选项"><a href="#Next主题自带SEO优化选项" class="headerlink" title="Next主题自带SEO优化选项"></a>Next主题自带SEO优化选项</h2><p>主题配置文件_config.yml中有个选项是seo，默认是false，改成true 即开启了seo优化，如改变博文title等，然后相同文件下有个关键字选项keywords填充上，写博文时最好每篇博文都加上keywords。hexo的根目录配置文件_config.yml中title、subtitle和description也建议填上。</p>
<p>参考链接<br><a href="https://fedoryx.github.io/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2-SEO-%E4%BC%98%E5%8C%96-%E8%B0%B7%E6%AD%8C%E7%AF%87/">Hexo 博客搜索 SEO 优化 — 谷歌篇</a><br><a href="https://madordie.github.io/post/use-hexo-setup-blog/">hexo的博客让百度收录</a><br><a href="http://www.dajipai.cc/">hexo博客SEO优化</a><br><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题</a></p>
<p><em>摘自：</em><br><em>作者：时光丶flies</em><br><em>链接：<a href="https://www.jianshu.com/p/c20bb9df1867">https://www.jianshu.com/p/c20bb9df1867</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>据说爱恩斯坦是中等学生，你享看看真实的史料么</title>
    <url>/archives/15b0611c/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 10月13日</p>
<p><img src="/archives/15b0611c/1.png" alt=" "></p>
<p>就是数学那么差的爱因斯坦，经过自身的不懈努力，后来居然成为了举世闻名的大科学家，被列为20世纪人类科学家之首。</p>
<p>多么励志的一个故事。</p>
<p>这个故事在中国流传的如此之广，<strong>以至于连我小时候都听过并相信这就是事实。</strong></p>
<p>本意可能是励志，但副作用相当大，那就是<strong>读书无用论和应试教育无用论</strong>的兴起。</p>
<p>读书读得不好，考试考的不好，不用慌。</p>
<p>别说你以后可能当大老板，就算当大科学家，那也不是不可能。</p>
<p>你只是不适合考试而已，不代表你不适合知识。</p>
<p>是中国的应试教育害了你，如果你到了欧美，给你一个培养的环境，马上就能成才。</p>
<p>既然<strong>应试教育的成绩不能代表能力，甚至不能代表潜力。</strong></p>
<p>那我苦哈哈的去读书考试干嘛，学习那些完全无用的知识，纯粹浪费我的青春。</p>
<p>学英语有啥用？</p>
<p>学数学有啥用？</p>
<p>学物理有啥用？</p>
<p>反正以后买菜又用不到，会个加减乘除不就行了。</p>
<p>虽然我数学不及格，但只要我买菜够勤快，以后也能修炼成爱因斯坦。</p>
<p>那种一读书就犯困的人，绝对相信爱因斯坦小时候数学不及格。</p>
<p><strong>因为爱因斯坦考试成绩很差，最符合这种人的利益。</strong></p>
<p>横行中国数十年的谣言，如今被诺贝尔奖官方给戳破了。</p>
<p>近日，诺贝尔奖官方公布了爱因斯坦1896年就读于瑞士阿劳市高中的成绩单。</p>
<p>那一年，爱因斯坦17岁。</p>
<p><img src="/archives/15b0611c/2.png" alt=" "></p>
<p>瑞士的成绩制，6分是最高分，1分是最低分。</p>
<p>爱因斯坦有5科拿下了满分，也就是6分，分别是<strong>代数，几何，画法几何，物理和历史。</strong></p>
<p><img src="/archives/15b0611c/3.png" alt=" "></p>
<p>从成绩单中可以看到，爱因斯坦的文科确实不太好，法语甚至只拿了3分，但理科是爆炸强。</p>
<p>爱因斯坦的高中数学，不仅及格了，还拿下了满分。</p>
<p>我从小就很纳闷，既然爱因斯坦的物理和数学那么好，为什么考试会不及格。</p>
<p>做简单数学题都能做错的人，能解出如此复杂的方程式并率领人类揭示宇宙奥秘？</p>
<p>很矛盾啊，因为高级别的科学，容不下一丝错误，差之毫厘，得出的结论能谬以千里。</p>
<p>今天我终于知道答案了，人家爱因斯坦高中数学根本就是满分，一点错误都没有，当然不会犯差之毫厘这种错误。</p>
<p>那么高中数学满分的爱因斯坦，为人类做出了什么贡献呢？</p>
<p>简单的给大家列举一下。</p>
<p>普通贡献就不说了，主要说那些<strong>匪夷所思，颠覆三观的。</strong></p>
<h2 id="空间是可以扭曲的"><a href="#空间是可以扭曲的" class="headerlink" title="空间是可以扭曲的"></a>空间是可以扭曲的</h2><p>在正常人的认知中，空间是永恒不变的。</p>
<p>空间就是空间，只是一个概念而已，还能有啥？</p>
<p>但爱因斯坦说，空间是扭曲的，大质量的天体，会“压弯”周围的空间，导致附近的空间出现弯曲的现象。</p>
<p><img src="/archives/15b0611c/4.png" alt=" "></p>
<p>凭这个理论，爱因斯坦完善了牛顿的万有引力。</p>
<p>但这个结论，实在是太荒谬了，严重超出正常人的认知。</p>
<p>太阳扭曲了它周围的空间，你也扭曲了你周围的空间，我们周围的空间都是在不断波动的。</p>
<p>逗我呢。</p>
<p>但后来，人们证实了爱因斯坦的结论。</p>
<p>因为光线在经过恒星的时候，确实发生了偏转和弯曲。</p>
<p>光不是沿直线传播的，而是沿空间传播的。</p>
<p><strong>只要你能扭曲空间，你就可以扭曲光。</strong></p>
<p>根据引力可以扭曲空间的原理，爱因斯坦还预测，当一个巨大天体的质量发生剧烈改变时，其引力的剧烈改变会导致周围的时空畸变。</p>
<p>这种时空畸变差不多相当于向宇宙这个池塘里投入一颗石子，会导致时空波动，产生涟漪，而这种时空涟漪，理论上是可以被探测到的。</p>
<p>这就是鼎鼎大名的<strong>引力波</strong>，2016年宣布探测到引力波时，全球科学界都轰动了。</p>
<p>连A股，当时也跟风瞎炒了一番，也不知道那帮人知不知道什么叫引力波。</p>
<h2 id="时间是可以扭曲的"><a href="#时间是可以扭曲的" class="headerlink" title="时间是可以扭曲的"></a>时间是可以扭曲的</h2><p>爱因斯坦弄完了空间，又开始捣腾时间。</p>
<p>他又提出了一个观点，时间是可以扭曲的。</p>
<p>时间可以加速，也可以减速，减速到极致甚至可以静止。</p>
<p>简直是胡说八道。</p>
<p>但这个明显看起来是胡说八道的观点，又被人类给证实了。</p>
<p>1971年，4台被校准的铯原子钟被分别放在2架民航客机上，利用地球自转获得一个相对较高的宇宙速度。</p>
<p>一架自西向东飞，飞完之后发现和地面上的原子钟相比，快了273±7纳秒。</p>
<p>常规理论完全无法解释这一现象，但按照爱因斯坦的相对论，原子钟不仅会快，而且理论计算出会快275±21纳秒，和实验结果基本符合。</p>
<p>另一架飞机自东向西飞，飞完之后发现和地面上的原子钟相比，慢了59±10纳秒。</p>
<p>而按照相对论的理论值，应该慢40±23纳秒。</p>
<p>目前整个地球上，只有爱因斯坦的相对论，能解释铯原子钟的时间为什么发生了如此诡异的改变。</p>
<p>所以相对论，又称之为时空论。</p>
<h2 id="质量是可以扭曲的"><a href="#质量是可以扭曲的" class="headerlink" title="质量是可以扭曲的"></a>质量是可以扭曲的</h2><p>在常规人类的思想中，基本元素这种物质是永恒不变的。</p>
<p>你可以把面包消化成葡萄糖，但里面的碳元素永远是碳元素。</p>
<p>但爱因斯坦说，<strong>质量可以转化成能量，能量也可以转化成质量。</strong></p>
<p>不仅提出了这个胡说八道的理论，爱因斯坦还弄出了一个质能方程，说只需要损失一点点质量，就可以释放出大量的能量。</p>
<p>爱因斯坦用这个理论，解释了光速不变的原因，<strong>物质运动的极限速度就是光速，多余的能量会全部转化为质量。</strong></p>
<p>但这个理论，也让人类发明了原子弹。</p>
<p><strong>只需要一点点质量，就可以释放出恐怖到令人类难以置信的能量。</strong></p>
<p>爱因斯坦说空间可以扭曲，我们虽然证明了这个理论是对的，但不知道怎么利用。</p>
<p>爱因斯坦说时间可以扭曲，我们虽然证明了这个理论是对的，但更加不知道怎么利用。</p>
<p>爱因斯坦说质量可以扭曲，我们不仅证明了这个理论是对的，还找到了利用的办法。</p>
<p>这就是为什么核武器的震慑力如此之强的原因，普通武器的杀伤力连给核武器提鞋都不配。</p>
<p><strong>因为核武器是超越时代的武器，它本不应该出现在今天的人类社会里。</strong></p>
<p>人类的理论框架，落后于相对论整整一个时代。</p>
<p>所以依据人类目前理论框架制造出的武器，自然不可能和依据相对论制造出的核武器媲美。</p>
<p>如果有朝一日人类制造出了可以扭曲空间的防护盾，或者可以改变时间的能量罩。</p>
<p>那时候的核武器，才有可以克制的办法，<strong>因为大家是基于同一水平的理论框架制造出来的武器。</strong></p>
<h2 id="学霸的世界观"><a href="#学霸的世界观" class="headerlink" title="学霸的世界观"></a>学霸的世界观</h2><p>爱因斯坦以一己之力，把整个人类的理论物理水平提高了一个时代，提高到了一个匪夷所思的水平。</p>
<p>相对论的理论水平之超前，已经到了绝大多数人类都无法理解，甚至颠覆常识的地步。</p>
<p>人类科学家目前能做的，仅仅只是通过观测宇宙来证明相对论而已，远远没到能利用的地步。</p>
<p>直到今天，相对论都还有理论尚未被证明，因为人类始终无法观测到证据，那就是虫洞。</p>
<p><strong>爱因斯坦说，我们可以从虫洞这里撕裂时空，从时空的一头钻进去，从另外一头钻出来，从而实现超时空旅行。</strong></p>
<p>听起来好像就是胡说八道，但理论上确实无懈可击，现在只等人证明了。</p>
<p>谁能观测到虫洞存在的证据，谁就一定可以拿到诺贝尔奖。</p>
<p>很多人不理解现在的物理学家都在玩什么，天天在那里搞什么引力波、黑洞、虫洞，时空旅行，有意义吗？</p>
<p>这玩意有蛋用啊。</p>
<p>确实没蛋用，因为人类的其他理论和技术跟不上，所以导致这些东西都是空中楼阁，只能看看，无法利用。</p>
<p>但只要有人能找到利用的办法，那威力简直是太大了。</p>
<p>爱因斯坦在相对论里提出了那么多的理论，目前被人类利用到现实的，就是原子弹和氢弹。</p>
<p><strong>如果你能把爱因斯坦的其他理论也应用到现实，那你就拥有了可以和核武器相抗衡的武器。</strong></p>
<p>这个力量有多大，你自己想一想。</p>
<p>所以全人类的物理学家，现在都在研究那些虚无缥缈的东西，看起来远远没有研究汽车发动机的靠谱。</p>
<p><strong>并不是那些东西虚，只是太超前而已。</strong></p>
<p>1879年，爱因斯坦出生。<br>1896年，17岁的爱因斯坦高中毕业，母校瑞士阿劳市高中。<br>1900年，21岁的爱因斯坦大学毕业，母校瑞士苏黎世联邦理工学院。<br>1905年，26岁的爱因斯坦创立了狭义相对论。<br>1915年，36岁的爱因斯坦创立了广义相对论。</p>
<p>而如此牛X的爱因斯坦，却被声称高中数学不及格，当成了应试教育无用论的典型。</p>
<p>事实上，这个谣言并不是毫无根据的，因为爱因斯坦本人确实说过自己的数学不行，而且亲自写在自己的回忆录里。</p>
<p>1955年，76岁的爱因斯坦濒临垂暮，写了一本回忆录。</p>
<p>书中爱因斯坦是这么评价自己的学生阶段的：</p>
<blockquote>
<p>我很快发现，我能成为一个有中等成绩的学生也就该心满意足了。<br>我年轻的时候没有重视数学，这是一个我后来才很难过地发现的错误。</p>
</blockquote>
<p><strong>中等学生爱因斯</strong>，这就是爱因斯坦对自己学生阶段的评价。</p>
<p>垂暮之年的爱因斯坦，已经功成名就，这么一说纯粹就是谦逊而已。</p>
<p>类似的话其实很多。</p>
<p>比方说悔创阿里杰克马，比方说普通家庭马化腾。</p>
<p><strong>他们就说说而已，说是他们的自由，但真信了，那就是你的不对了。</strong></p>
<p>以爱因斯坦的高度，高中数学满分，那只是起点而已，没有在高中阶段就写出几篇世界级的数学论文，确实是没有重视数学。</p>
<p>和自己的物理造诣来比，数学确实不太好，中等成绩，都是年轻的时候没好好学害的。</p>
<p><strong>这就是学霸的思维和世界观。</strong></p>
<p>考试满分，才算拿到了学霸比拼的入场券。</p>
<p><strong>爱因斯坦认为的数学不太好，和你认为的数学不太好，那是两码事。</strong></p>
<p>文章已于2020-10-14修改</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247516842&amp;idx=1&amp;sn=718bb1c0c2c1f4d756ab18d62cffd4c5&amp;chksm=fe0eeabcc97963aa335f0e4b3642f1b8faa39db51dd55a8ae646150ca8fd46d2b2ee0dfe1e8c&amp;mpshare=1&amp;scene=1&amp;srcid=1014Th64z2XOEoIbkcK4uICU&amp;sharer_sharetime=1603954308557&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=d11c8083f930d7c933758b0c7dd7f6fed6b7995e04eaa2a516e0a489103fb4bbd5e691316845d3bd46cb2486bde58d2fd3efcec458f3d9c00de3947b1ddb273d7cefcad890f9c123e50838f72cdea13609891d18c13a9ebdb0b1d2b68f99d0d5c6afc7af8a39dabe49d05fc1b7650cb734646932f6137f5d0848aa9f9af546ed&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2tyhw63hjy8Roczzzo0Vw0%3D&amp;pass_ticket=7b4XTSF0CljrCq6CEf%2FM%2BnKBNIxMFIjzWlN4KDBEycaioHTKmEtFzns0mTC%2BmxZa&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>人物</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql使用日志</title>
    <url>/archives/c6ba0622/</url>
    <content><![CDATA[<p><img src="/archives/c6ba0622/1.jpg" alt=" "></p>
<h2 id="postgres安装"><a href="#postgres安装" class="headerlink" title="postgres安装"></a>postgres安装</h2><p>postgres作为流行的关系型数据库，当然有多种安装方式，可以参考官方：<a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a><br>postgres初次安装后，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户。这里需要注意的是，同时还生成了一个名为postgres的Linux系统用户。可以使用postgres用户来生成其他用户和新数据库。</p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>docker安装可以指定POSTGRES_DB，POSTGRES_USER，POSTGRES_PASSWORD（password必须指定，否则创建容器后会报错）等，详见<a href="https://hub.docker.com/_/postgres">https://hub.docker.com/_/postgres</a>，如果不指定，则会跟常规安装一样，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户，还有postgres系统用户。指定了POSTGRES-DB，创建的容器内会生成指定数据库用户名来替代默认的postgres（超级用户）。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>切换用户：<br><code>su postgres</code><br>进入postgresql：<br><code>psql</code><br>或直接使用用户名参数登录：<br><code>psql -U postgres -d postgres</code><br>U是大写，需要-d指定数据库</p>
<h3 id="创建数据库用户和数据库并授权"><a href="#创建数据库用户和数据库并授权" class="headerlink" title="创建数据库用户和数据库并授权"></a>创建数据库用户和数据库并授权</h3><p>进入数据库控制台后：<br>创建用户<br><code>CREATE USER dbuser WITH PASSWORD &#39;password&#39;;</code><br>创建数据库<br><code>CREATE DATABASE exampledb OWNER dbuser;</code><br>授权<br><code>GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;</code></p>
<h3 id="使用shell命令行"><a href="#使用shell命令行" class="headerlink" title="使用shell命令行"></a>使用shell命令行</h3><p>创建数据库用户dbuser，并指定其为超级用户<br><code>sudo -u postgres createuser --superuser dbuser</code><br>在shell命令行下，创建数据库exampledb，并指定所有者为dbuser<br><code>sudo -u postgres createdb -O dbuser exampledb</code></p>
<h3 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h3><p>\h：查看SQL命令的解释，比如\h select。<br>\?：查看psql命令列表。<br>\l：列出所有数据库。<br>\c [database_name]：连接其他数据库。<br>\d：列出当前数据库的所有表格。<br>\d [table_name]：列出某一张表格的结构。<br>\du：列出所有用户。<br>\e：打开文本编辑器。<br>\conninfo：列出当前数据库和连接的信息。<br>\password：修改当前用户密码<br>\q：退出</p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>创建新表<br><code>CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);</code><br>插入数据<br><code>INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;);</code><br>选择记录<br><code>SELECT * FROM user_tbl;</code><br>更新数据<br><code>UPDATE user_tbl set name = &#39;李四&#39; WHERE name = &#39;张三&#39;;</code><br>删除记录<br><code>DELETE FROM user_tbl WHERE name = &#39;李四&#39; ;</code><br>添加栏位<br><code>ALTER TABLE user_tbl ADD email VARCHAR(40);</code><br>更新结构<br><code>ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;</code><br>更名栏位<br><code>ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;</code><br>删除栏位<br><code>ALTER TABLE user_tbl DROP COLUMN email;</code><br>表格更名<br><code>ALTER TABLE user_tbl RENAME TO backup_tbl;</code><br>删除表格<br><code>DROP TABLE IF EXISTS backup_tbl;</code></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署odoo14及postgresql</title>
    <url>/archives/18899723/</url>
    <content><![CDATA[<p><img src="/archives/18899723/1.png" alt=" "></p>
<h2 id="odoo简介和部署方式"><a href="#odoo简介和部署方式" class="headerlink" title="odoo简介和部署方式"></a>odoo简介和部署方式</h2><p>OpenERP的前身，开源，功能强大，更新版本到14，官方有几种安装方法，使用docker方法部署更简单，而官方使用docker compose的方式启动，我希望postgressql能够提供给多个应用使用，可以通过外部方法来访问，所以我这里用portainer部署。</p>
<h2 id="部署postgres"><a href="#部署postgres" class="headerlink" title="部署postgres"></a>部署postgres</h2><h3 id="下载portgres镜像"><a href="#下载portgres镜像" class="headerlink" title="下载portgres镜像"></a>下载portgres镜像</h3><p>首先确定好postgresql的版本，这里使用postgres:12，直接执行<code>docker pull postgres:12</code>下载镜像</p>
<h3 id="portainer上配置postgres容器参数"><a href="#portainer上配置postgres容器参数" class="headerlink" title="portainer上配置postgres容器参数"></a>portainer上配置postgres容器参数</h3><p>postgres docker官方镜像有参数说明：<a href="https://hub.docker.com/_/postgres?tab=description">https://hub.docker.com/_/postgres?tab=description</a>，根据odoo docker官网镜像说明，其中的yaml配置上环境参数只配置了下面几个，所以potainer上也设置这几个参数即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGDATA=/var/lib/postgresql/data/pgdata</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">odoo-db-data:/var/lib/postgresql/data/pgdata</span></span><br></pre></td></tr></table></figure>
<p>portainer对应配置：<br><img src="/archives/18899723/2.png" alt=" "></p>
<p>其中额外配置了port映射，postgres数据库端口默认是5432,使用宿主机的5432到docker主机的5432端口，PGDATA并没有配置，是默认生成的，与上面的有点不一样，手动配置了volume映射。<br>配置后生成container，可以在portainer上看到running。<br>使用navicat连接到数据库测试：<br><img src="/archives/18899723/3.png" alt=" "><br>测试成功！</p>
<h2 id="部署odoo"><a href="#部署odoo" class="headerlink" title="部署odoo"></a>部署odoo</h2><h3 id="下载odoo镜像"><a href="#下载odoo镜像" class="headerlink" title="下载odoo镜像"></a>下载odoo镜像</h3><p>使用最新镜像，最新版为14<br><code>docker pull odoo:latest</code></p>
<h3 id="portainer上配置odoo容器参数"><a href="#portainer上配置odoo容器参数" class="headerlink" title="portainer上配置odoo容器参数"></a>portainer上配置odoo容器参数</h3><p>官方docker-compose.yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">odoo:12.0</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mydb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8069:8069&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">HOST=mydb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">USER=odoo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PASSWORD=myodoo</span></span><br></pre></td></tr></table></figure>
<p>portainer对应配置：<br><img src="/archives/18899723/4.png" alt=" "><br>配置后生成container，在浏览器输入<a href="http://宿主ip:8069">http://宿主ip:8069</a>访问，出现500错误。从portainer上查看日志，发现这里配置的odoo数据库需要初始化，需要运行odoo -i base强制初始化。这一步搞了我很久，网上也没有详细的解决方法，这里记录下解决方法。</p>
<ol>
<li>拷贝容器内的odoo.conf配置文件到本机：<br>先进入映射的volume配置文件目录运行：<br><code>docker exec home_odoo cat /etc/odoo/odoo.conf &gt; odoo.conf</code></li>
<li><p>修改配置文件，手动修改数据库连接参数：<br><code>vim odoo.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[options]</span><br><span class="line">db_host&#x3D;xxx</span><br><span class="line">db_port&#x3D;xxx</span><br><span class="line">db_name&#x3D;odoo_db</span><br><span class="line">db_user&#x3D;odoo</span><br><span class="line">db_password&#x3D;odoo</span><br></pre></td></tr></table></figure>
</li>
<li><p>从portainer进入odoo的容器执行：<br><code>odoo -i base -d odoo_db</code><br>这里没有指定用户执行，默认就是使用环境配置的odoo用户，也只有该用户执行才生效。</p>
</li>
</ol>
<p>执行完毕后，再次访问<a href="http://宿主ip:8069">http://宿主ip:8069</a>，就会出现登录界面啦。默认登陆用户名和密码都是admin，记得进入修改。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这里有必要记录下docker容器目录映射到宿主目录的权限问题，以免映射后出现权限报错。一般来说，生成容器后，里面的应用目录有固定的用户权限。如postgres，生成容器后，默认数据库目录属主和属组都是postgres，而查看其ID为999<br><img src="/archives/18899723/7.png" alt=" "><br>而回到宿主的对应映射目录，可以看到其ID是跟容器的用户ID一样的。<br><img src="/archives/18899723/8.png" alt=" "><br>其ID对应宿主的用户名字不一样，其实是LINUX使用ID号作为唯一权限代码。但宿主机上如果没有对应的ID号，则会显示容器的ID号。宿主机建立目录后且映射后，不要修改其属主和属组，不然权限就乱套了。也可以在宿主机上新建一个ID号如<code>useradd postgres -u 1000 -g 1000 -M -s /sbin/nologin</code>，专门给容器使用，在配置容器时，添加其environment参数如PUID=1000，PGID=1000，其参数名要看官方给出的名字来指定，让容器指定使用该ID号生成用户。这样无论从容器看还是宿主机看，都是postgres的名字了。</p>
<h2 id="odoo使用记录"><a href="#odoo使用记录" class="headerlink" title="odoo使用记录"></a>odoo使用记录</h2><h3 id="手动导入第三方安装包"><a href="#手动导入第三方安装包" class="headerlink" title="手动导入第三方安装包"></a>手动导入第三方安装包</h3><p>首先要启用开发者模式，点击设置，常规设置，到最下面，点击启用开发者模式<br><img src="/archives/18899723/5.png" alt=" "><br>启用后，进入应用，右上角取消搜索，就会显示全部的应用，在搜索base，可以见到base_import模块，安装下就会在菜单栏多一个导入模块，就可以手动导入第三方应用啦。<br><img src="/archives/18899723/6.png" alt=" "></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>使用denyhosts防止暴力破解ssh</title>
    <url>/archives/e14542ec/</url>
    <content><![CDATA[<p><img src="/archives/e14542ec/1.jpg" alt=" "></p>
<h2 id="下载安装denyhosts"><a href="#下载安装denyhosts" class="headerlink" title="下载安装denyhosts"></a>下载安装denyhosts</h2><p>github上有软件及安装说明，使用python开发的：<br><a href="https://github.com/denyhosts/denyhosts">https://github.com/denyhosts/denyhosts</a><br>当前最新版提供deb包和rpm包，方便debain/ubuntu和redhat/centos系统安装<br>这里我使用deb包：<br><code>wget https://github.com/denyhosts/denyhosts/releases/download/v3.1/denyhosts_3.1.2-2_all.deb</code><br>安装<br><code>dpkg -i denyhosts_3.1.2-2_all.deb</code></p>
<h3 id="路径说明"><a href="#路径说明" class="headerlink" title="路径说明"></a>路径说明</h3><p>默认安装路径：<br>配置文件denyhost.conf：/etc/denyhost.conf<br>执行文件denyhost.py: /usr/local/bin/denyhost.py<br>控制文件daemon-control-dist: /usr/local/bin/daemon-control-dist</p>
<h3 id="修改denyhost-conf"><a href="#修改denyhost-conf" class="headerlink" title="修改denyhost.conf"></a>修改denyhost.conf</h3><p><code>egrep -v &quot;^$|#&quot; /etc/denyhosts.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SECURE_LOG &#x3D; &#x2F;var&#x2F;log&#x2F;auth.log</span><br><span class="line">HOSTS_DENY &#x3D; &#x2F;etc&#x2F;hosts.deny</span><br><span class="line">PURGE_DENY &#x3D;</span><br><span class="line">BLOCK_SERVICE  &#x3D; sshd</span><br><span class="line">DENY_THRESHOLD_INVALID &#x3D; 5</span><br><span class="line">DENY_THRESHOLD_VALID &#x3D; 10</span><br><span class="line">DENY_THRESHOLD_ROOT &#x3D; 1</span><br><span class="line">DENY_THRESHOLD_RESTRICTED &#x3D; 1</span><br><span class="line">DETECT_DOVECOT_LOGIN_ATTEMPTS &#x3D; NO</span><br><span class="line">WORK_DIR &#x3D; &#x2F;var&#x2F;lib&#x2F;denyhosts</span><br><span class="line">ETC_DIR &#x3D; &#x2F;etc</span><br><span class="line">SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS&#x3D;YES</span><br><span class="line">HOSTNAME_LOOKUP&#x3D;NO</span><br><span class="line">LOCK_FILE &#x3D; &#x2F;run&#x2F;denyhosts.pid</span><br><span class="line">IPTABLES &#x3D; &#x2F;sbin&#x2F;iptables</span><br><span class="line">ALLOWED_HOSTS_HOSTNAME_LOOKUP&#x3D;NO</span><br><span class="line">AGE_RESET_VALID&#x3D;5d</span><br><span class="line">AGE_RESET_ROOT&#x3D;25d</span><br><span class="line">AGE_RESET_RESTRICTED&#x3D;25d</span><br><span class="line">AGE_RESET_INVALID&#x3D;10d</span><br><span class="line">DAEMON_LOG &#x3D; &#x2F;var&#x2F;log&#x2F;denyhosts</span><br><span class="line">DAEMON_SLEEP &#x3D; 30s</span><br><span class="line">DAEMON_PURGE &#x3D; 1h</span><br><span class="line">SYNC_UPLOAD &#x3D; no</span><br><span class="line">SYNC_DOWNLOAD &#x3D; no</span><br></pre></td></tr></table></figure>
<h3 id="修改daemon-control-dist"><a href="#修改daemon-control-dist" class="headerlink" title="修改daemon-control-dist"></a>修改daemon-control-dist</h3><p><code>vim /usr/local/bin/daemon-control-dist</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DENYHOSTS_BIN &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;denyhosts.py&quot;</span><br><span class="line">DENYHOSTS_LOCK &#x3D; &quot;&#x2F;run&#x2F;denyhosts.pid&quot;</span><br><span class="line">DENYHOSTS_CFG &#x3D; &quot;&#x2F;etc&#x2F;denyhosts.conf&quot;</span><br><span class="line"></span><br><span class="line">PYTHON_BIN &#x3D; &quot;&#x2F;usr&#x2F;bin&#x2F;env python&quot;</span><br></pre></td></tr></table></figure>
<p>新版本默认使用python3，这里改为python</p>
<h3 id="运行daemon-control-dist"><a href="#运行daemon-control-dist" class="headerlink" title="运行daemon-control-dist"></a>运行daemon-control-dist</h3><p>默认denyhost.py使用daemon-control-dist来控制，可以加入开机自动启动，这里先手动启动：<br><code>daemon-control-dist start</code><br>如果报module xxx not found，是python没有安装对应的库，需要手动安装下：<br><code>pip install xxx</code><br>使用python3的话就执行<br><code>pip3 install xxx</code><br>然后重新运行下就行</p>
<h3 id="查看hosts-deny"><a href="#查看hosts-deny" class="headerlink" title="查看hosts.deny"></a>查看hosts.deny</h3><p>被block的IP地址会放到/etc/hosts.deny里面，可以查看。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK使用日志</title>
    <url>/archives/459ed231/</url>
    <content><![CDATA[<p><img src="/archives/459ed231/1.png" alt=" "></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>
<p>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。详细可参考Elasticsearch权威指南<br>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。<br>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。<br>Beats在这里是一个轻量级日志采集器，其实Beats家族有6个成员，早期的ELK架构中使用Logstash收集、解析日志，但是Logstash对内存、cpu、io等资源消耗比较高。相比 Logstash，Beats所占系统的CPU和内存几乎可以忽略不计<br>Redis是一个高性能的内存key-value数据库,非必需安装,可以防止数据丢失。缓存。</p>
<p>ELK Stack （5.0版本之后）—&gt; Elastic Stack == （ELK Stack + Beats）。目前Beats包含六种工具：</p>
<p>Packetbeat： 网络数据（收集网络流量数据）<br>Metricbeat： 指标 （收集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）<br>Filebeat： 日志文件（收集文件数据）<br>Winlogbeat： windows事件日志（收集 Windows 事件日志数据）<br>Auditbeat：审计数据 （收集审计日志）<br>Heartbeat：运行时间监控 （收集系统运行时的数据）</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="单机架构（适合少量日志）"><a href="#单机架构（适合少量日志）" class="headerlink" title="单机架构（适合少量日志）"></a>单机架构（适合少量日志）</h3><p><img src="/archives/459ed231/2.png" alt=" "><br>elasticsearch新版本已经可以对日志文件进行预处理，不用添加臃肿的logstash，filebeat直接输出到elasticsearch，使用ingest pipeline来解析日志文件，再保存索引。但该ingest process处理能力有限，只适合单机架构的少量日志。<br>详见官方文档：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html</a><br>官方给出比较简单直接粗暴的模板来生成索引，包含多个字段，已经完全满足你想要的一切信息，而且能根据索引快速生成漂亮的dashboard<br><strong>配置filebeat.yml</strong><br>只需在默认配置上module模块和output模块</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ============================== Filebeat modules ==============================</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">  <span class="comment"># Glob pattern for configuration loading</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set to true to enable config reloading</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Period on which files under path should be checked for changes</span></span><br><span class="line">  <span class="comment">#reload.period: 10s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------- Elasticsearch Output ----------------------------</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;elasticsearch服务器地址+端口&quot;</span>]</span><br><span class="line">  <span class="attr">pipeline:</span> <span class="string">geoip-info</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Protocol - either `http` (default) or `https`.</span></span><br><span class="line">  <span class="comment">#protocol: &quot;https&quot;</span></span><br></pre></td></tr></table></figure>
<p>ouput到elasticsearch的配置中添加pipeline: geoip-info，意味着使用elasticsearch的geoip pipeline，默认elasticsearch不存在这个pipeline，需要手动在kibana上添加。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT _ingest/pipeline/geoip-info</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Add geoip info&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;processors&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;client.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;client.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;source.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;source.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;destination.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;destination.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;server.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;server.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;host.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;host.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/archives/459ed231/3.png" alt=" "><br>官方说明：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/filebeat-geoip.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/filebeat-geoip.html</a></p>
<p><strong>命令行配置开启对应模块</strong><br><code>filebeat modules enable nginx,system</code><br>这样就开启了nginx和system的模块，相当于修改了/etc/filebeat/modules.d/下的nginx.yml.disable，去掉.disable</p>
<p><strong>修改模块配置文件</strong><br><code>vim /etc/filebeat/modules.d/nginx.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="comment"># Access logs</span></span><br><span class="line">  <span class="attr">access:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="attr">var.paths:</span> [<span class="string">&quot;/app/nginx/logs/access.log&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Error logs</span></span><br><span class="line">  <span class="attr">error:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="attr">var.paths:</span> [<span class="string">&quot;/app/nginx/logs/error.log&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ingress-nginx controller logs. This is disabled by default. It could be used in Kubernetes environments to parse ingress-nginx logs</span></span><br><span class="line">  <span class="attr">ingress_controller:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>修改对应的日志文件路径，nginx最后一个ingress是在k8s上使用的，如果不是k8s环境，则配置为false</p>
<p><strong>命令行配置filebeat处理</strong><br><code>filebeat setup --pipelines --modules nginx,system</code><br>官方说明：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html</a></p>
<p><strong>运行filebeat并输出到屏幕</strong><br>可以先检查下配置文件和输出是否正常<br><code>filebeat test config</code></p>
<blockquote>
<p>Config OK</p>
</blockquote>
<p><code>filebeat test output</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch: http:&#x2F;&#x2F;elastics.xxx.com...</span><br><span class="line">  parse url... OK</span><br><span class="line">  connection...</span><br><span class="line">    parse host... OK</span><br><span class="line">    dns lookup... OK</span><br><span class="line">    addresses: 127.0.0.1</span><br><span class="line">    dial up... OK</span><br><span class="line">  TLS... WARN secure connection disabled</span><br><span class="line">  talk to server... OK</span><br><span class="line">  version: 7.9.2</span><br></pre></td></tr></table></figure>
<p>运行filebeat并输出屏幕<br><code>filebeat -e -d &quot;publish&quot;</code></p>
<p>从屏幕可以看出详细的输出信息，最后到kibana上就会看到创建的pipeline<br><img src="/archives/459ed231/4.png" alt=" "><br>每个日志文件对应一个pipeline来处理，是通过filebeat的field.yml配置文件来生成的。<br>建立索引后，可以看到，从模板配置处理的索引含有非常多的字段（有4839个），完全满足我们想要的<br><img src="/archives/459ed231/5.png" alt=" "><br>打开discover，可以看到生成了geoip的相关信息，可以直接点击查看访问的IP分布<br><img src="/archives/459ed231/6.png" alt=" "><br><img src="/archives/459ed231/7.png" alt=" "></p>
<p><strong>配置dashboard</strong><br>filebeat提供很多官方的dashboard，通过修改配置文件来打开dashboard，前提需要kibana服务器可达。<br>修改filebeat.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ================================= Dashboards =================================</span></span><br><span class="line"><span class="comment"># These settings control loading the sample dashboards to the Kibana index. Loading</span></span><br><span class="line"><span class="comment"># the dashboards is disabled by default and can be enabled either by setting the</span></span><br><span class="line"><span class="comment"># options here or by using the `setup` command.</span></span><br><span class="line"><span class="attr">setup.dashboards.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================== Kibana ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.</span></span><br><span class="line"><span class="comment"># This requires a Kibana endpoint configuration.</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Kibana Host</span></span><br><span class="line">  <span class="comment"># Scheme and port can be left out and will be set to the default (http and 5601)</span></span><br><span class="line">  <span class="comment"># In case you specify and additional path, the scheme is required: http://localhost:5601/path</span></span><br><span class="line">  <span class="comment"># IPv6 addresses should always be defined as: https://[2001:db8::1]:5601</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;http://kibana.xxx.com:xxx&quot;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;xxxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行setup<br><code>filebeat setup --dashboards</code><br>回到kibana，打开dashboard，就会看到生成了很多dashboard模板<br><img src="/archives/459ed231/12.png" alt=" "><br>搜索nginx，就能生成nginx的dashboard<br><img src="/archives/459ed231/13.png" alt=" "></p>
<p>使用这种架构是方便，但是可以看到，索引的名字并不好分类和修改，都是默认生成的，而且不能自定义解析的字段，全部索引到到一个索引文件了，好在kibana的筛选功能够强大。如果用logstash的grok就不会有这个问题。</p>
<h3 id="中等量日志架构"><a href="#中等量日志架构" class="headerlink" title="中等量日志架构"></a>中等量日志架构</h3><p>先用logstash读取Nginx日志和系统日志写入kafka，再用logstash读取出来写入elasticsearch，适合日志量不是太多的架构。<br>其实用redis也可以，redis没必要开快照和持久化，数据写入es后redis的作用就完成了。当然很耗redis内存，一般8-16G。<br>后端可能几十台logstash往kafka写入，如果kafka内存居高不下，也就是前端的logstash读的太慢，要加logstash。直到平衡。<br><img src="/archives/459ed231/9.png" alt=" "></p>
<h3 id="海量日志架构"><a href="#海量日志架构" class="headerlink" title="海量日志架构"></a>海量日志架构</h3><p>官方传统，使用filebeat输出到kafka，再用logstasha读取处理写入elasticsearch，如果觉得卡，则可以用第二种<br><img src="/archives/459ed231/8.png" alt=" "><br><img src="/archives/459ed231/10.png" alt=" "></p>
<p>如果还是遇到性能瓶颈<br>使用filebeat收集日志，先转发到beat端的logstash1，然后logstash1转发到kafka，然后再由logstash2从kafka读取写到elasticsearch。<br><img src="/archives/459ed231/11.png" alt=" "></p>
<p><a href="https://mp.weixin.qq.com/s/F8TVva8tDgN0tNsUcLoySg">https://mp.weixin.qq.com/s/F8TVva8tDgN0tNsUcLoySg</a></p>
<p>整个系统一共含有10台主机（filebeat部署在客户端，不计算在内），其中Logstash有四台，Elasticsearch有二台，Kafka集群三台，kibana一台并配置Nginx代理。</p>
<p>架构解释：</p>
<p>（1）首先用户通过nginx代理访问ELK日志统计平台，这里的Nginx可以设置界面密码。<br>（2）Nginx将请求转发到kibana<br>（3）kibana到Elasticsearch中去获取数据，这里的Elasticsearch是两台做的集群，日志数据会随机保存在任意一台Elasticsearch服务器。<br>（4）Logstash1从Kafka中取出数据并发送到Elasticsearch中。<br>（5）Kafka服务器做日志数据的持久化保存，避免web服务器日志量过大的时候造成的数据收集与保存不一致而导致日志丢失，其中Kafka可以做集群，然后再由Logstash服务器从Kafka持续的取出数据。<br>（6）logstash2从Filebeat取出的日志信息，并放入Kafka中进行保存。<br>（7）Filebeat在客户端进行日志的收集。</p>
<p>注1：【Kafka的加入原因与作用】<br>整个架构加入Kafka，是为了让整个系统更好的分层，Kafka作为一个消息流处理与持久化存储软件，能够帮助我们在主节点上屏蔽掉多个从节点之间不同日志文件的差异，负责管理日志端（从节点）的人可以专注于向 Kafka里生产数据，而负责数据分析聚合端的人则可以专注于从 Kafka内消费数据。所以部署时要把Kafka加进去。<br>而且使用Kafka进行日志传输的原因还在于其有数据缓存的能力，并且它的数据可重复消费，Kafka本身具有高可用性，能够很好的防止数据丢失，它的吞吐量相对来说比较好并且使用广泛。可以有效防止日志丢失和防止logsthash挂掉。综合来说：它均衡了网络传输，从而降低了网络闭塞，尤其是丢失数据的可能性，</p>
<p>注2：【双层的Logstash作用】<br>这里为什么要在Kafka前面增加二台logstash呢？是因为在大量的日志数据写入时，容易导致数据的丢失和混乱，为了解决这一问题，增加二台logstash可以通过类型进行汇总分类，降低数据传输的臃肿。<br>如果只有一层的Logstash，它将处理来自不同客户端Filebeat收集的日志信息汇总，并且进行处理分析，在一定程度上会造成在大规模日志数据下信息的处理混乱，并严重加深负载，所以有二层的结构进行负载均衡处理，并且职责分工，一层汇聚简单分流，一层分析过滤处理信息，并且内层都有二台Logstash来保障服务的高可用性，以此提升整个架构的稳定性。</p>
<p>接下来分别说明原理与各个组件之间的交互（配置文件）。</p>
<p><em>部分摘自<a href="https://www.cnblogs.com/wangxu01/">https://www.cnblogs.com/wangxu01/</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用日志</title>
    <url>/archives/f65250ef/</url>
    <content><![CDATA[<p><img src="/archives/f65250ef/1.jpg" alt=" "></p>
<h2 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h2><p>安装configure编译环境：<br><code>yum install -y gcc gcc-c++ openssl-devel make</code><br>安装pcre库:<br><code>yum install -y pcre pcre-devel</code><br>pcre兼容正则表达式，安装pcre为了使nginx支持具备URI重写功能的Rewrite模块，如果不安装pcre库，则nginx无法使用rewrite模块功能，nginx的rewrite模块功能几乎是企业应用必须。<br>编译参数：<br><code>./configure --help</code><br>按需安装，如：</p>
<blockquote>
<p>—with-http_stub_status_module<br>—with-http_ssl_module</p>
</blockquote>
<p>查看已安装的模块（安装在/app下）：<br><code>/app/nginx/sbin/nginx -V</code><br>如果编译安装后需要再添加模块，则重新运行./configure添加，然后make即可，注意不要make install，这样会覆盖原文件。</p>
<h2 id="添加认证"><a href="#添加认证" class="headerlink" title="添加认证"></a>添加认证</h2><p>需要httpd-tools工具：<br><code>yum install -y httpd-tools</code><br>如果是debain或者ubuntu系统，则<br><code>apt install -y apache2-utils</code><br>添加密码文件：<br><code>htpasswd -cb /app/nginx/htpasswd abc 123456</code><br>在对应模块（server)下添加：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auth_basic</span> <span class="string">&quot;Restricted Access&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /app/nginx/htpasswd;</span><br></pre></td></tr></table></figure>
<h2 id="nginx模块功能"><a href="#nginx模块功能" class="headerlink" title="nginx模块功能"></a>nginx模块功能</h2><h3 id="proxy代理模块"><a href="#proxy代理模块" class="headerlink" title="proxy代理模块"></a>proxy代理模块</h3><p>ngx_http_proxy_module proxy代理模块，用于把请求后抛给服务器节点或upstream服务器池，例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">upstream</span> www_server_pools &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.0.0.7:80</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.0.0.8:80</span> weight=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www_server_pools;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="upstram负载均衡模块"><a href="#upstram负载均衡模块" class="headerlink" title="upstram负载均衡模块"></a>upstram负载均衡模块</h3><p>ngx_http_upstream_module 负载均衡模块，可以实现网站的负载均衡功能及节点的健康检查<br>看官网nginx document upstream模块</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com       weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> unix:/tmp/backend3;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> backup1.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">    <span class="attribute">server</span> backup2.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        proxy_pass http://backend; (uptream的标签名）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>backend是模块名，随便起<br>server是http服务器<br>weight是权重，权重大的处理比例就多<br>backup是热备（高可用）</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理frp缓存加速</title>
    <url>/archives/dd6b12a/</url>
    <content><![CDATA[<p><img src="/archives/dd6b12a/1.jpg" alt=" "></p>
<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>由于frp的http和https，都是从用户的服务中完整输出数据的，这对于一些使用frp的用户，网络比较差/上传低，打开自己的这些服务，要加载大半天的。<br>我们可以使用nginx的反代缓存，把frp用户的http和https中的静态资源缓存到服务器本地，从而减少frp用户本身的网络资源请求访问，直接略过大部分，从而在服务器加速。<br>效果是拔群的！</p>
<h2 id="nginx反向代理缓存配置"><a href="#nginx反向代理缓存配置" class="headerlink" title="nginx反向代理缓存配置"></a>nginx反向代理缓存配置</h2><p>本例编译安装nginx，安装路径为/app/nginx<br>新建缓存目录<br><code>mkdir -pv /app/nginx/cache</code><br>赋予权限<br><code>chmod -R 775 /app/nginx/cache</code><br>修改nginx.conf<br><code>vim /app/nginx/conf/nginx.conf</code><br>在http{}模块里面添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">include</span>  extra/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure>
<p>新建vhost.conf:<br><code>vim /app/nginx/conf/extra/vhost.conf</code><br>我的配置文件如下，含多个https：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /app/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=frp_cache:<span class="number">100m</span> max_size=<span class="number">5g</span> inactive=<span class="number">30d</span>;</span><br><span class="line"><span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.xxx.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8680;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8680;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#ssl on;</span></span><br><span class="line">        <span class="attribute">server_name</span> a.xxx.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/esxi.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/esxi.hellshan.top.key;</span><br><span class="line">        <span class="comment">#ssl_trusted_certificate /app/cert/ca.cer;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:4443; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">                <span class="attribute">proxy_redirect</span> https://<span class="variable">$host</span>/ https://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#ssl on;</span></span><br><span class="line">        <span class="attribute">server_name</span> b.xxx.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/cloud.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/cloud.hellshan.top.key;</span><br><span class="line">        <span class="comment">#ssl_trusted_certificate /app/cert/ca.cer;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">                <span class="attribute">proxy_redirect</span> https://<span class="variable">$host</span>/ https://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)为需要进行缓存的静态资源，你可以添加或者修改。</p>
<p>proxy_cache_valid为服务器缓存，其中200 206 301 302 304为HTTP状态码（<a href="http://tool.chinaz.com/pagestatus/">http://tool.chinaz.com/pagestatus/</a>）<br>针对状态码缓存，而最后面的 30d 为缓存过期时间，当用户没有在这个有效时间内访问到这个资源，则会过期清除，直到用户重新访问到这个资源则重新缓存。<br>expires 为访问用户本地缓存<br>d 天数 h 小时 m 分钟 s 秒</p>
<p><a href="http://127.0.0.1:8680">http://127.0.0.1:8680</a>的8080端口为你frp.ini配置文件vhost_http_port = 8680端口<br><a href="http://127.0.0.1:8643">http://127.0.0.1:8643</a> 的8643端口为你frp.ini配置文件vhost_https_port = 8643端口<br>对应的frps.ini配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8680</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">8643</span></span><br></pre></td></tr></table></figure>
<p>其中的端口可以根据自己的需要修改。</p>
<p>配置成功后，并且访问目标网站，让nginx进行缓存，在/home/nginx/cache目录里会生成多个缓存目录和文件。</p>
<h2 id="对于nginx-https代理frp-https的理解"><a href="#对于nginx-https代理frp-https的理解" class="headerlink" title="对于nginx https代理frp https的理解"></a>对于nginx https代理frp https的理解</h2><p>我的理解是这样的：<br>如果使用了自定义域名，frp是根据$host值判断该往哪个内网服务转发请求的，因此转给frp的请求中一定要包含$host，否则frp无法正常处理请求。<br>因此以下2个配置很重要：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br></pre></td></tr></table></figure>
<p>proxy_pass中不能写成IP的形式。<br>举一个我的例子，我内网服务器10.1.1.8上部署着2个服务，elasticsearch和kibana，端口分别是9200和5601，我现在想要把这2个服务穿透出去，具体配置如下：<br>frps.ini中的主要配置：<br>xxx替换成自己的</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8680</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">8643</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7</span>xxx</span><br><span class="line"><span class="attr">dashboard_user</span> = xxx</span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxx</span><br><span class="line"><span class="attr">enable_prometheus</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">log_file</span> = /app/frp/frps.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">disable_log_color</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">detailed_errors_to_client</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">token</span> = hellshan.top</span><br><span class="line">oidc_client_id =</span><br><span class="line">oidc_client_secret =</span><br><span class="line">oidc_audience =</span><br><span class="line">oidc_token_endpoint_url =</span><br><span class="line"><span class="attr">allow_ports</span> = <span class="number">1</span>-<span class="number">65535</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">max_ports_per_client</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">tls_only</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">subdomain_host</span> = hellshan.top</span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后通过上边配置的nginx进行代理转发请求到frp上。<br>frpc.ini的配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = hellshan.top</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">protocal</span> = kcp</span><br><span class="line"><span class="attr">token</span> = hellshan.top</span><br><span class="line"></span><br><span class="line"><span class="section">[k3_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = k3</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server2019_remote_control]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.11</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">42264</span></span><br><span class="line"><span class="attr">subdomain</span> = remote</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[pve_web_control]</span></span><br><span class="line"><span class="attr">type</span> = https</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8006</span></span><br><span class="line"><span class="attr">subdomain</span> = esxi</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[pve_ssh_control]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">22222</span></span><br><span class="line"><span class="attr">subdomain</span> = ssh</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[monitor_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.12</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = monitor</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[monitor_tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.12</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">10051</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">10051</span></span><br><span class="line"><span class="attr">subdomain</span> = monitor</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[kibana_web_congrol]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.13</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5601</span></span><br><span class="line"><span class="attr">subdomain</span> = kibana</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[elastics_web_congrol]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.13</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9200</span></span><br><span class="line"><span class="attr">subdomain</span> = elastics</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[portainer_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">subdomain</span> = docker</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="http强制跳转到https"><a href="#http强制跳转到https" class="headerlink" title="http强制跳转到https"></a>http强制跳转到https</h2><p>frp支持从http转为https，详细可以参考<a href="https://github.com/fatedier/frp#enable-https-for-local-http-service">https://github.com/fatedier/frp#enable-https-for-local-http-service</a>配置，因为我是用路由器作为frpc，而frpc需要添加证书目录才能生效，不好操作，故使用强大的Nginx来实现，在nginx的云主机上统一存放证书。<br>例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#=============================== for docker.hellshan.top ======================================</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> docker.hellshan.top;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> docker.hellshan.top;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/docker.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/docker.hellshan.top.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span>:8680;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span>:8680;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里配置了两个server来实现跳转，http部分使用<code>rewrite ^(.*) https://$server_name$1 permanent;</code>作为重定向，然后下面跟https的配置，而下面的proxy_pass则要配置成http的，因为实际上是走http的协议，这样访问域名的时候，就会跳转到https。</p>
<p><em>部分转载自：<a href="http://www.wangxianfeng.cn/wordpress/2018/06/10/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86frp%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9Fhttphttps/">http://www.wangxianfeng.cn/wordpress/2018/06/10/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86frp%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9Fhttphttps/</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>干货满满！10分钟看懂Docker和K8S</title>
    <url>/archives/9915ca90/</url>
    <content><![CDATA[<p><img src="/archives/9915ca90/1.png" alt=" "></p>
<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-1.jpg" alt=" "><br>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-2.jpg" alt=" "><br>LXC，就是Linux容器虚拟技术（Linux container）<br>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-3.jpg" alt=" "><br>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>
<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>
<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。<br>! <a href="10分钟看懂Docker和K8S-4.jpg"></a><br>Open Source，开源</p>
<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>
<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-5.jpg" alt=" "><br>Solomon Hykes（今年刚从Docker离职）</p>
<p>不开则已，一开惊人。</p>
<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>
<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>
<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>
<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>
<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>
<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>
<p>在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-6.jpg" alt=" "><br>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-7.jpg" alt=" "><br>虚拟机，类似于“子电脑”</p>
<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是相互隔离的，互不影响。</p>
<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。</p>
<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>
<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-8.jpg" alt=" "><br>沙箱</p>
<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-9.jpg" alt=" "><br>容器和虚拟机的对比</p>
<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>
<p>我们具体来看看Docker。</p>
<p>大家需要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎。</p>
<p>想要搞懂Docker，其实看它的两句口号就行。</p>
<p>第一句，是“Build, Ship and Run”。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-10.jpg" alt=" "><br>也就是，“搭建、发送、运行”，三板斧。</p>
<p>举个例子：</p>
<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-11.jpg" alt=" "><br>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>
<p>但是，跑来一个老巫婆，教会我一种魔法。</p>
<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-12.jpg" alt=" "><br>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-13.jpg" alt=" "><br>怎么样？是不是很神奇？</p>
<p>所以，Docker的第二句口号就是：“Build once，Run anywhere（搭建一次，到处能用）”。</p>
<p>Docker技术的三大核心概念，分别是：</p>
<p><strong>镜像（Image）</strong><br><strong>容器（Container）</strong><br><strong>仓库（Repository）</strong></p>
<p>我刚才例子里面，那个放在包里的“镜像”，就是Docker镜像。而我的背包，就是Docker仓库。我在空地上，用魔法造好的房子，就是一个Docker容器。</p>
<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>
<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>
<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>
<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-14.jpg" alt=" "><br>于是乎，就变成了一个大的公共仓库。</p>
<p>负责对Docker镜像进行管理的，是Docker Registry服务（类似仓库管理员）。</p>
<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>
<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>
<p>最常使用的Registry公开服务，是官方的Docker Hub，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>
<p>好了，说完了Docker，我们再把目光转向K8S。</p>
<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>
<p>就在这个时候，K8S出现了。</p>
<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong><br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-15.jpg" alt=" "><br>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>
<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——Google。</p>
<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的Borg系统。</p>
<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>
<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>
<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>
<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>
<p>目前，kubernetes的版本已经发展到V1.13。</p>
<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>
<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>
<p>这个集群主要包括两个部分：</p>
<p><strong>一个Master节点（主节点）</strong><br><strong>一群Node节点（计算节点）</strong><br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-16.jpg" alt=" "><br>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>
<p>深入来看这两种节点。</p>
<p>首先是Master节点。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-17.jpg" alt=" "><br>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>
<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>
<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>
<p>Controller manager负责管理控制器，相当于“大总管”。</p>
<p>然后是Node节点。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-18.jpg" alt=" "><br>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是Pod。</p>
<blockquote>
<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>
</blockquote>
<p>Docker，不用说了，创建容器的。</p>
<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>
<p>Kube-proxy，主要负责为Pod对象提供代理。</p>
<p>Fluentd，主要负责日志收集、存储与查询。</p>
<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>
<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>
<p>接下来的部分，是写给核心网工程师甚至所有通信工程师看的。</p>
<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>
<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>
<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>
<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>
<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>
<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是容器化。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>
<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-19.jpg" alt=" "><br>VoLTE相关的网元</p>
<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-20.jpg" alt=" "><br>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>
<p>简直完美！</p>
<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-21.jpg" alt=" "><br>精细化分工</p>
<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>
<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-22.jpg" alt=" "></p>
<h2 id="k8s部署"><a href="#k8s部署" class="headerlink" title="k8s部署"></a>k8s部署</h2><p><em>来自知乎</em><br>前段时间刚在公司搭建完k8s环境，踩了一些坑，也有一些经验。这里给你推荐两个网站，你可以看情况使用：<br>第一个是：<br>kuboard.cn/<br>kuboard中有一系列的k8s基础知识点，适合初入k8s的人学习，从介绍-入门-进阶-高级-实战，一步一步，会对k8s整体的功能有些了解。同时还有安装Kubernetes和Kuboa（Kubernetes一款图形化管理界面）的教程，其中Kuboard安装后，占用的内存不是很大，适合个人玩家练手。<br>第二个是：<br>kubesphere.com.cn/<br>KubeSphere是青云开源的一款以Kubernetes 为内核的云原生分布式操作系统，可以看做也是一款图形化管理界面。选择KubeSphere有一下几点：<br>完全开源，github上<br>现在星星将近4K；<br>功能完善，包含了<br>devops、日志、告警等功能。</p>
<p><em>转自：<a href="https://my.oschina.net/jamesview/blog/2994112">https://my.oschina.net/jamesview/blog/2994112</a></em></p>
]]></content>
      <categories>
        <category>热点</category>
        <category>平台</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用记录</title>
    <url>/archives/5018439d/</url>
    <content><![CDATA[<p><img src="/archives/5018439d/hexo_git_3.PNG" alt=" "></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><h3 id="nodejs环境"><a href="#nodejs环境" class="headerlink" title="nodejs环境"></a>nodejs环境</h3><p>hexo基于node.js，需要在该环境下进行操作<br>本人在proxmox ve里面下载debain10-turnkey-nodejs模板，省去了搭建的烦恼<br>使用ssh工具到创建的容器上执行<br>修改npm为国内淘宝源：<br><code>npm config set registry https://registry.npm.taobao.org</code><br>更新npm版本<br><code>npm install -g npm</code><br>查看npm和node版本<br><code>npm -v</code><br><code>node -v</code><br>安装hexo-cli<br><code>npm install -g hexo-cli</code><br>查看hexo版本：<br><code>hexo -v</code></p>
<h3 id="github环境"><a href="#github环境" class="headerlink" title="github环境"></a>github环境</h3><p>注册github账号<br>新建仓库，仓库名应该为：用户名.github.io，以这种方式命名，github会自动认为是web项目，会自动建立custom_pages的选项，可以添加域名<br>回到容器上执行<br>设置user.name和user.email配置信息<br><code>git config --global user.name &quot;你的GitHub用户名&quot;</code><br><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code><br>生成ssh密钥文件<br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code><br>直接回车到最后<br>找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制<br>打开GitHub_Settings_keys 页面，新建new SSH Key<br>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ：<br><code>ssh git@github.com</code><br><img src="/archives/5018439d/hexo_git_1.PNG" alt=" "><br>如上则说明成功</p>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>部署到github上可以使用github自带的域名，需要自定义域名则需要到各大网站申请一个域名。默认可以用用户名.github.io来访问你的hexo博客。申请域名后，进行域名绑定：<br>如我的域名为blog.hellshan.top，添加解析为我的github用户名.github.io，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名即可</p>
<h2 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h2><p>执行<br><code>hexo init blog</code><br>会在当前目录下生成blog文件夹，也就是你hexo网站项目的名称<br>在blog根目录里的_config.yml文件称为站点配置文件，根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件<br>将我们的Hexo与GitHub关联起来：<br><code>cd blog/</code><br><code>vim _config.yml</code><br>最后一行修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@gitee.com:xxx/xxx.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>如图：<br><img src="/archives/5018439d/hexo_git_2.PNG" alt=" "><br>安装git部署插件：<br><code>npm install hexo-deployer-git --save</code><br>执行：<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>即提交成功，可以到你的github上看到</p>
<h3 id="编辑博客文章"><a href="#编辑博客文章" class="headerlink" title="编辑博客文章"></a>编辑博客文章</h3><p>可以使用在线markdown编辑器编辑，可写即可见：<a href="http://marxi.co/">http://marxi.co/</a>，编辑完保存md文件，然后传到blog/source/_posts/下在提交到github就行<br>也可以使用markdown工具进行编辑如vscode<br><strong>创建CNAME文件：</strong><br>上面在github上绑定了域名，还不会生效，需要在项目目录下建立CNAME文件才生效：<br><code>vim blog/source/CNAME</code><br>填上域名保存即可<br>再次运行<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>本地浏览：<br><code>hexo s</code><br>本地浏览器输入IP:4000即可浏览</p>
<h3 id="使用其他主题"><a href="#使用其他主题" class="headerlink" title="使用其他主题"></a>使用其他主题</h3><p>在github上可以搜索Hexo的主题，下载下来放到theme文件夹，然后修改_config.yml中theme的名字即可</p>
<h2 id="关联到netlify加速hexo"><a href="#关联到netlify加速hexo" class="headerlink" title="关联到netlify加速hexo"></a>关联到netlify加速hexo</h2><ol>
<li>使用github账号登录netlify</li>
<li>安装步骤添加github托管的repository</li>
<li>手动更改netlify的域名，再自定义域名</li>
<li>修改阿里云域名cname为netlify的域名</li>
<li>取消github的自定义域名，清空后点save，会删除目录下的CNAME文件</li>
<li>删除hexo工作目录的CNAME文件，不然重新提交也会绑定</li>
</ol>
<p><img src="/archives/5018439d/4.png" alt=" "></p>
<p>测试：<a href="http://www.17ce.com">http://www.17ce.com</a></p>
<h2 id="hexo问题处理"><a href="#hexo问题处理" class="headerlink" title="hexo问题处理"></a>hexo问题处理</h2><h3 id="图片无法显示问题"><a href="#图片无法显示问题" class="headerlink" title="图片无法显示问题"></a>图片无法显示问题</h3><p>hexo默认无法自动处理文章插入本地图片，需要通过扩展插件支持<br>配置_config.yml里面的post_asset_folder:false这个选项设置为true:<br><code>vim blog/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">post_asset_folder:true</span></span><br></pre></td></tr></table></figure>
<p>安装hexo-asset-image：<br><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code><br>修改node_modules/hexo-asset-image/index.js，换成</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">getPosition</span>(<span class="selector-tag">str</span>, <span class="selector-tag">m</span>, <span class="selector-tag">i</span>) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="selector-tag">if</span>(<span class="selector-tag">config</span><span class="selector-class">.post_asset_folder</span>)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">    <span class="selector-tag">else</span></span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">    var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="selector-tag">ignoreWhitespace</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">xmlMode</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">lowerCaseTags</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">decodeEntities</span>: <span class="selector-tag">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">            // For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">            var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">              // In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="selector-tag">if</span>(<span class="selector-tag">srcArray</span><span class="selector-class">.length</span> &gt; 1)</span><br><span class="line">                <span class="selector-tag">srcArray</span><span class="selector-class">.shift</span>();</span><br><span class="line">              src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">              $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">              <span class="selector-tag">console</span><span class="selector-class">.info</span>&amp;&amp;<span class="selector-tag">console</span><span class="selector-class">.info</span>(&quot;<span class="selector-tag">update</span> <span class="selector-tag">link</span> <span class="selector-tag">as</span><span class="selector-pseudo">:--</span>&gt;&quot;+<span class="selector-tag">config</span><span class="selector-class">.root</span> + <span class="selector-tag">link</span> + <span class="selector-tag">src</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="selector-tag">else</span>&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在/source/_posts文件夹内新建一个与博客名称.md同名的文件夹，把图片放入该文件夹，然后使用<code>![](xxx.png)</code>直接插入图片即可。其中[]可以填图片的说明，会在图片下面生成。<br>再次提交时，gihub就会自动生成相关文件夹和上传图片。</p>
<h3 id="markdown使用数学公式"><a href="#markdown使用数学公式" class="headerlink" title="markdown使用数学公式"></a>markdown使用数学公式</h3><p>hexo的默认md渲染器和标准不太一样，更接近与html格式，数学公式$之类的符号不能显示。同时使用的md语法可能在浏览器显示不正常。<br>首先更换新的渲染器：<br><code>npm uninstall hexo-renderer-marked --save</code><br><code>npm install hexo-renderer-kramed --save</code><br>在根目录下开始(node_modules\kramed\lib\rules\inline.js)<br>修改以下两处:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<h3 id="新增独立页面"><a href="#新增独立页面" class="headerlink" title="新增独立页面"></a>新增独立页面</h3><p>在博客目录下执行<code>hexo new page xxx</code>，会在source目录下生成一个对应名字的文件夹，里面有index.md文件。<br>node.js会把我们写的md文件转化为HTML文件（在博客根目录中的public文件中可以查看）。Hexo 使用 Markdown（或其他渲染引擎）解析文章，利用我们使用的主题生成静态网页。有时候我们想自定义一个页面，它不受hexo的主题渲染。<br>使用hexo中提供配置的跳过渲染。在博客根目录中的配置文件（注意不是主题的配置问文件）_config.yml，找到“skip_render”配置。如果想设置某页面文章跳过渲染，则可以设置为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">&quot;xxx/**&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>添加关键字：</strong><br>建立页面后,在主题配置文件_config.yml的menu下添加一项,如果没有关键字,则会显示index.xxx,需要手动添加下关键字<br>打开文档：blog/themes/next/languages/zh-Hans.yml，添加对应的mapping：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">时间轴</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br></pre></td></tr></table></figure>
<h3 id="kibana嵌入web"><a href="#kibana嵌入web" class="headerlink" title="kibana嵌入web"></a>kibana嵌入web</h3><p>上面设置独立页面后,取消渲染,就可以通过HTML代码来实现页面布局,可以添加kibana的dashboard,复制dashboard的链接,然后添加进html文件即可:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    html, body &#123; margin: 0; padding 0; width: 100%; height: 100%;&#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">iframe</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">99%</span>; &#125;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;链接&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="nodejs使用"><a href="#nodejs使用" class="headerlink" title="nodejs使用"></a>nodejs使用</h2><h3 id="npm-install-很慢或者出错"><a href="#npm-install-很慢或者出错" class="headerlink" title="npm install 很慢或者出错"></a>npm install 很慢或者出错</h3><p>手动下载安装包到~/.node-gyp/node版本号目录下再重新npm install就行</p>
<h3 id="npm-手动安装"><a href="#npm-手动安装" class="headerlink" title="npm 手动安装"></a>npm 手动安装</h3><p>查看最新版本，为二进制包：<br><a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a><br>下载最新版本：<br><code>wget https://nodejs.org/dist/latest-v14.x/node-v14.13.1-linux-x64.tar.gz</code><br>解压<br><code>tar xf https://nodejs.org/dist/latest-v14.x/node-v14.13.1-linux-x64.tar.gz</code><br>创建软链接：<br><code>ln -s node-v14.13.1-linux-x64 node</code><br>添加系统环境变量：<br><code>vim /etc/profile</code><br>最后添加上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set for nodejs</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/app/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>手动更新配置：<br><code>source /etc/profile</code><br>查看node版本<br><code>node -v</code><br><code>npm -v</code></p>
<h2 id="关于网站备案"><a href="#关于网站备案" class="headerlink" title="关于网站备案"></a>关于网站备案</h2><p>根据工信部要求，国内云主机建站80和443端口都需要备案，而且域名的www和主域名都要求能够访问，否则不能使用。申请域名后，可以在域名提供商控制台上添加绑定，可以添加www和@（直接解析主域名）的A记录，指向云主机IP。然后在云主机上搭建nginx，添加跳转：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.xxx.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://blog.xxx.com <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://blog.xxx.com <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>参考出处：</em><br><em><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></em><br><em><a href="https://blog.csdn.net/weixin_43769146/article/details/105066795">https://blog.csdn.net/weixin_43769146/article/details/105066795</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE使用日志</title>
    <url>/archives/7c1819b2/</url>
    <content><![CDATA[<p><img src="/archives/7c1819b2/1.jpg" alt=" "></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载proxmox 6.2镜像，基于dabain 10.5 buster（清华大学镜像站）：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/">https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/</a><br>2.使用rufus软件写入ISO镜像到U盘，使用DD方式写入</p>
<h2 id="默认LVM分区处理"><a href="#默认LVM分区处理" class="headerlink" title="默认LVM分区处理"></a>默认LVM分区处理</h2><h3 id="pve删除lvm扩容根目录"><a href="#pve删除lvm扩容根目录" class="headerlink" title="pve删除lvm扩容根目录"></a>pve删除lvm扩容根目录</h3><p>先备份虚拟机<br>删除虚拟机<br>删除local-lvm<br><code>lvremove pve/data</code><br>查看空闲空间<br><code>vgdisplay pve | grep Free</code><br>增加分区空间<br><code>lvextend -l +100%FREE -f pve/root</code><br><code>fsdisk -l</code><br>执行上边的扩容操作<br><code>resize2fs /dev/mapper/pve-root</code><br>恢复已经备份的虚拟机</p>
<h2 id="更改为国内软件源"><a href="#更改为国内软件源" class="headerlink" title="更改为国内软件源"></a>更改为国内软件源</h2><h3 id="更改debain-apt源"><a href="#更改debain-apt源" class="headerlink" title="更改debain apt源"></a>更改debain apt源</h3><p><code>cp /etc/apt/source.list /etc/apt/source.list.bak</code><br><code>cat &gt; /etc/apt/source.list &lt;&lt;EOF</code></p>
<pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free
EOF
</code></pre><h3 id="更改pve-apt源"><a href="#更改pve-apt源" class="headerlink" title="更改pve apt源"></a>更改pve apt源</h3><p><code>cp /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.bak</code><br><code>cat &gt; /etc/apt/sources.list.d/pve-enterprise.list&lt;&lt;EOF</code><br><code>deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian buster pve-no-subscription</code><br><code>EOF</code></p>
<h3 id="更改pve-lxc镜像源"><a href="#更改pve-lxc镜像源" class="headerlink" title="更改pve lxc镜像源"></a>更改pve lxc镜像源</h3><p>查找设定下载源的文件<br><code>grep -rn &quot;download.proxmox.com&quot; /usr/share/perl5/PVE/*</code><br><code>sed -i.bak &quot;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g&quot; /usr/share/perl5/PVE/APLInfo.pm</code><br><code>wget -O /var/lib/pve-manager/apl-info/mirrors.ustc.edu.cn https://mirrors.ustc.edu.cn/proxmox/images/aplinfo.dat</code></p>
<h2 id="备份系统"><a href="#备份系统" class="headerlink" title="备份系统"></a>备份系统</h2><p><code>tar pczvf ./sysback.tgz --exclude=/lost+found --exclude=/mnt --exclude=/srv --exclude=/proc --exclude=/run --exclude=/tmp --exclude=/sys --exclude=/meida --exclude=/mnt --exclude=/pve-directory /</code><br>注意目标目录要在最后，排除目录要在前面</p>
<h2 id="PVE开启直通"><a href="#PVE开启直通" class="headerlink" title="PVE开启直通"></a>PVE开启直通</h2><h3 id="打开直通"><a href="#打开直通" class="headerlink" title="打开直通"></a>打开直通</h3><p><em>前提：硬件支持并在UEFI或BIOS里面开启VT-D虚拟化</em><br>修改grub文件<br><code>vim /etc/default/grub</code></p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;
#改为
GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;
update-grub
</code></pre><p>修改module文件<br><code>vim /etc/module</code><br>加入</p>
<pre><code>vfio_iommu_type1
vfio_virqfd
vfio_pci
vfio
</code></pre><p>重启系统生效</p>
<h3 id="win10设置显卡直通"><a href="#win10设置显卡直通" class="headerlink" title="win10设置显卡直通"></a>win10设置显卡直通</h3><p>以下截图是我的win10硬件配置：<br><img src="/archives/7c1819b2/PVE_WIN10_CONFIG.PNG" alt=" "><br>下载虚拟化驱动的iso，虚拟机win10的驱动靠它了<br><a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/</a><br>列出设备地址，确定显卡vendorID<br><code>lspci -nn</code></p>
<blockquote>
<p>00:02.0 VGA compatible controller [0300]: Intel Corporation HD Graphics 610 [8086:5902] (rev 04)<br>定义为GPU直通vfio设备，并防止VGA仲裁<br><code>echo &quot;options vfio-pci ids=8086:5917 disable_vga&quot; &gt; /etc/modprobe.d/vfio.conf</code><br>禁止默认VGA驱动在启动时加载<br><code>echo &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code><br><code>echo &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code><br><code>echo &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code><br>启动进入虚拟机即可<br><em>参考：<a href="https://star.us.org/Cs/win10-installation-and-gpu-passthrough-on-proxmox-6.html?replyTo=25">https://star.us.org/Cs/win10-installation-and-gpu-passthrough-on-proxmox-6.html?replyTo=25</a></em></p>
</blockquote>
<h2 id="LXC使用"><a href="#LXC使用" class="headerlink" title="LXC使用"></a>LXC使用</h2><p>在配置的存储目录中，点击模板，可以看到里面有很多system模板和turnkey的应用模板，这样可以大大减少应用的部署时间而专注于业务上。<br>配置模板很简单，最后设置密码后启动即可。如果忘记密码，可以通过PVE主机进入进行修改：<br><code>ptc enter 容器ID名</code><br>再使用<br><code>passwd 用户名</code>修改<br><strong>ubuntu container ssh的问题：</strong><br>默认ubuntu不允许root进行ssh，可以新建一个用户，把用户添加到sudoer里面就行：<br><code>useradd 用户名 -d -s /bin/bash</code><br>使用passwd更改密码<br>添加用户到sudoer：<br><code>vim /etc/sudoer</code><br>或者<br><code>visudoer</code></p>
<h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><p>安装docker:<br><code>apt install -y docker-ce docker-ce-cli</code></p>
<p>安装portainer：<br><code>docker volume create portainer_data</code><br><code>docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</code></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>kvm</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
