<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hueman主题使用补充</title>
    <url>/archives/9040e6a2/</url>
    <content><![CDATA[<p><img src="/archives/9040e6a2/4.jpg" alt=" "></p>
<h2 id="config-yml说明"><a href="#config-yml说明" class="headerlink" title="_config.yml说明"></a>_config.yml说明</h2><h3 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">customize:</span></span><br><span class="line">    <span class="attr">logo:</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">165</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">images/logo-header.png</span></span><br><span class="line">    <span class="attr">theme_color:</span> <span class="string">&#x27;#4169E1&#x27;</span></span><br><span class="line">    <span class="attr">highlight:</span> <span class="string">tomorrow-night-eighties</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="string">left</span> <span class="comment"># sidebar position, options: left, right</span></span><br><span class="line">    <span class="attr">thumbnail:</span> <span class="literal">true</span> <span class="comment"># enable posts thumbnail, options: true, false</span></span><br><span class="line">    <span class="attr">favicon:</span> <span class="string">css/images/favicon.png</span> <span class="comment"># path to favicon</span></span><br><span class="line">    <span class="attr">social_links:</span> <span class="comment"># for more icons, please see http://fontawesome.io/icons/#brand</span></span><br><span class="line">        <span class="attr">github:</span> <span class="string">https://github.com/helllllp</span></span><br><span class="line">        <span class="attr">weibo:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">qq:</span> <span class="string">/524311610</span></span><br><span class="line">        <span class="attr">weixin:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">rss:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>定义了自定义选项：<br><strong>logo</strong>：网站头部和脚部的logo，width和height是显示在网页上的大小，图片路径按照images/xxx.png来获取<br><strong>theme_color</strong>：主题色，影响关注我的banner颜色，超链接颜色和侧边栏文章标题颜色<br><strong>highlight</strong>: 代码高亮，可以<code>ls themes/hueman/source/css/_highlight/</code>查看有多少个主题样式，效果可以到highlightjs官网根据预览效果来选取：<a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a><br><strong>favicon</strong>：网站图标，图片路径按照css/images/xxx.png来获取</p>
<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">    <span class="attr">insight:</span> <span class="literal">false</span> <span class="comment"># you need to install `hexo-generator-json-content` before using Insight Search</span></span><br><span class="line">    <span class="attr">swiftype:</span> <span class="string">xxxxxxxxxx</span> <span class="comment"># enter swiftype install key here</span></span><br><span class="line">    <span class="attr">baidu:</span> <span class="literal">false</span> <span class="comment"># you need to disable other search engines to use Baidu search, options: true, false</span></span><br></pre></td></tr></table></figure>
<p>搜索引擎，当前版本配置了三个搜索引擎，insight需要npm安装hexo-generator-json-content，我这里安装后没有效果，故使用swiftype，百度官方不推荐<br>1、申请swiftype账号：<a href="https://app.swiftype.com/">https://app.swiftype.com/</a><br>使用邮箱注册，貌似使用qq和139邮箱申请不行，我用了自己阿里云域名的邮箱才行：crontab@hellshan.top<br>2、点击create new engine，创建新引擎，填上你的域名，进入后点击Setup and integration，复制install key到配置文件就OK<br><img src="/archives/9040e6a2/1.PNG" alt=" "></p>
<h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">disqus:</span> <span class="comment"># enter disqus shortname here</span></span><br><span class="line">    <span class="attr">duoshuo:</span> <span class="comment"># enter duoshuo shortname here</span></span><br><span class="line">    <span class="attr">youyan:</span> <span class="comment"># enter youyan uid here</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="comment"># enter true to enable</span></span><br><span class="line">    <span class="attr">isso:</span> <span class="comment"># options for isso.</span></span><br><span class="line">    <span class="attr">changyan:</span></span><br><span class="line">    <span class="attr">valine:</span> <span class="comment"># Valine Comment System https://github.com/xCss/Valine</span></span><br><span class="line">        <span class="attr">on:</span>  <span class="literal">true</span> <span class="comment"># enter true to enable valine</span></span><br><span class="line">        <span class="attr">appId:</span> <span class="string">4O7x2fxxxxxxrdxFIAJn3v-gzGzoHsz</span> <span class="comment"># enter the leancloud application appId here</span></span><br><span class="line">        <span class="attr">appKey:</span> <span class="string">k2d5KmEjtQeLw5IuRficyYsN</span> <span class="comment"># enter the leancloud application appKey here</span></span><br><span class="line">        <span class="attr">notify:</span> <span class="comment"># enter true to enable &lt;Mail notifier&gt;, default: false; https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE</span></span><br><span class="line">        <span class="attr">verify:</span> <span class="literal">true</span> <span class="comment"># enter true to enable &lt;Validation code&gt;, default: false</span></span><br><span class="line">        <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">Do</span> <span class="string">It</span> <span class="comment"># enter the comment box placeholder</span></span><br><span class="line">        <span class="attr">avatar:</span> <span class="string">identicon</span> <span class="comment"># (&#x27;&#x27;/mm/identicon/monsterid/wavatar/retro/hide), more to see https://valine.js.org/avatar.html</span></span><br><span class="line">        <span class="attr">avatar_cdn:</span> <span class="string">https://gravatar.loli.net/avatar/</span> <span class="comment"># avatar CDN address, default gravatar.cat.net</span></span><br><span class="line">        <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comments of one page</span></span><br><span class="line">        <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># count reading numbers; If true, the numbers will also show below the title of every post</span></span><br><span class="line">        <span class="attr">recordip:</span> <span class="comment">#false # If true, record commenter&#x27;s ip, which is shown in LeanCloud pannel</span></span><br><span class="line">    <span class="attr">gitalk:</span></span><br></pre></td></tr></table></figure>
<p>评论系统，这里使用了valine，详见<a href="https://valine.js.org/avatar.html">https://valine.js.org/avatar.html</a>操作指引<br>1、请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用：<br><img src="/archives/9040e6a2/2.PNG" alt=" "><br>2、应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：<br><img src="/archives/9040e6a2/3.PNG" alt=" "><br>3、把ID和KEY复制到配置文件即可</p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="source-css-style-styl"><a href="#source-css-style-styl" class="headerlink" title="source/css/style.styl"></a>source/css/style.styl</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">code</span></span><br><span class="line">    <span class="attr">margin:</span> <span class="number">0</span> <span class="string">2px</span></span><br><span class="line">    <span class="attr">color:</span> <span class="comment">#3CB371</span></span><br><span class="line">    <span class="attr">padding:</span> <span class="string">3px</span> <span class="string">5px</span></span><br><span class="line">    <span class="attr">font-size:</span> <span class="number">0.</span><span class="string">8em</span></span><br><span class="line">    <span class="attr">border-radius:</span> <span class="string">2px</span></span><br><span class="line">    <span class="attr">font-family:</span> <span class="string">font-mono</span></span><br><span class="line">    <span class="attr">background-color:</span> <span class="comment">#F0F8FF</span></span><br></pre></td></tr></table></figure>
<p>定义了代码的颜色，大小和边距，以及背景色</p>
<h3 id="source-css-variables-styl"><a href="#source-css-variables-styl" class="headerlink" title="source/css/_variables.styl"></a>source/css/_variables.styl</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// Colors</span><br><span class="line">color-default = #555</span><br><span class="line"><span class="selector-tag">if</span> <span class="selector-tag">hexo-config</span>(&quot;<span class="selector-tag">customize</span><span class="selector-class">.theme_color</span>&quot;)</span><br><span class="line">    color-theme = convert(hexo-config(&quot;customize.theme_color&quot;))</span><br><span class="line"><span class="selector-tag">else</span></span><br><span class="line">    color-theme = #3b8dbd</span><br><span class="line">color-grey = #aaa</span><br><span class="line">color-header-background = #2F4F4F</span><br><span class="line">color-main-background = #fff</span><br><span class="line">color-background = #eaeaea</span><br><span class="line">color-mobile-nav-background = #191919</span><br><span class="line">color-border = #ddd</span><br><span class="line">color-border-light = #eee</span><br><span class="line">color-nav-foreground = rgba(255,255,255,0.7)</span><br><span class="line">color-nav-background = #33363b</span><br><span class="line">color-nav-hover-background = rgba(0,0,0,0.1)</span><br><span class="line">color-sidebar-background = #f0f0f0</span><br><span class="line">color-sidebar-text = #777</span><br><span class="line">color-sidebar-text-dark = #444</span><br><span class="line">color-footer-background = #2F4F4F</span><br><span class="line"></span><br><span class="line">// Fonts</span><br><span class="line">font-sans = &quot;Titillium Web&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;Microsoft Yahei&quot;, sans-serif</span><br><span class="line">font-serif = Georgia, &quot;Times New Roman&quot;, serif</span><br><span class="line">font-mono = &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace</span><br><span class="line">font-icon-profile-size = 24px</span><br><span class="line">font-size = 14px</span><br><span class="line">font-size-article = 16px</span><br><span class="line">line-height = 1.6em</span><br><span class="line">line-height-title = 1.3em</span><br></pre></td></tr></table></figure>
<p>定义头部背景色，脚背景色，主页背景色，字体大小等。</p>
<h3 id="通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题"><a href="#通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题" class="headerlink" title="通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题"></a>通过https访问出现“您与此网站建立的链接并非完全安全”提示的问题</h3><p>已经开启https，访问时还会提示您与此网站建立的链接并非完全安全，原因是我们的页面存在一些不安全的http请求，比如图片、js等静态文件。我们只需要将其升级为https请求即可。<br><code>vim /app/blog/themes/hueman/layout/common/head.ejs</code><br>页面的head中加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>华为AC6605开启Portal认证</title>
    <url>/archives/dc365dfe/</url>
    <content><![CDATA[<p><img src="/archives/dc365dfe/1.png" alt=" "></p>
<h2 id="拓扑简述"><a href="#拓扑简述" class="headerlink" title="拓扑简述"></a>拓扑简述</h2><p><img src="/archives/dc365dfe/2.png" alt=" "></p>
<p>STA（连接到无线网络中的终端）通过AP连接无线SSID，中间通过核心交换机连接AC</p>
<p>AC管理VLAN接口: VLANIF2<br>AC管理地址：192.168.101.253<br>SSID：TBK-guest<br>客户IP：192.168.20.x<br>网关：192.168.20.254<br>DNS地址：8.8.8.8</p>
<h2 id="AC新建LoopBack口"><a href="#AC新建LoopBack口" class="headerlink" title="AC新建LoopBack口"></a>AC新建LoopBack口</h2><p>为了隐藏真实的AC管理地址，通常使用LoopBack地址作为认证地址</p>
<p><img src="/archives/dc365dfe/3.png" alt=" "></p>
<p>从配置—AC配置—接口管理—逻辑接口—三层逻辑接口里面新建</p>
<h2 id="配置内置portal全局设置"><a href="#配置内置portal全局设置" class="headerlink" title="配置内置portal全局设置"></a>配置内置portal全局设置</h2><p><img src="/archives/dc365dfe/4.png" alt=" "></p>
<p>从配置—安全管理—AAA—Portal服务器全局设置—-内置Portal全局设置里面配置</p>
<h2 id="新建认证模板"><a href="#新建认证模板" class="headerlink" title="新建认证模板"></a>新建认证模板</h2><p><img src="/archives/dc365dfe/5.png" alt=" "></p>
<p><img src="/archives/dc365dfe/6.png" alt=" "></p>
<p><img src="/archives/dc365dfe/7.png" alt=" "></p>
<p>建立认证模板后，新建SSID，应用到VAP即可，其中免认证规则是要添加DNS地址，不然就上不了网</p>
<p><img src="/archives/dc365dfe/8.png" alt=" "></p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>配置好后，通过AP组配置添加VAP，则会看到无线SSID，此时连接无线后，不会自动弹出认证页面，需要在核心交换机配置下静态路由<br>添加一条LoopBack地址到AP管理地址的静态路由：ip route-static 10.1.1.1 32 192.168.101.253</p>
<p>此时，如果还是没有弹出认证页面，则要看看核心交换机的acl，关于vlan 120的配置，开放对应地址：<br>Extended IP access list vlan120<br>    10 permit ip any host 192.168.20.254<br>    20 permit ip any host 192.168.1.3 (1 estimate match)<br>    31 permit ip any host 192.168.101.253 (61 estimate matches)<br>    32 permit ip any host 192.168.1.2 (344 estimate matches)<br>    40 deny ip any 192.168.0.0 0.0.255.255 (222 estimate matches)</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能，机器学习</title>
    <url>/archives/fd81114f/</url>
    <content><![CDATA[<p><img src="/archives/fd81114f/1.png" alt=" "></p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>175B、60B、540B等<br>这些一般指参数的个数，B是Billion/十亿的意思，175B是1750亿参数，这是ChatGPT大约的参数规模。</p>
<p>Accelerator 加速器<br>一种微处理器，设计用于加速AI应用。<br>A class of microprocessor designed to accelerate AI applications.</p>
<p>Agents 代理<br>可以独立并主动地执行某些任务，无需人类干预的软件，常常使用一套工具，如计算器或网络浏览。<br>Software that can perform certain tasks independently and proactively without the need for human intervention, often utilizing a suite of tools like calculators or web browsing.</p>
<p>AGI (Artificial General Intelligence) 通用人工智能<br>虽然并无广泛共识，但微软研究员已经将AGI定义为在任何智力任务上都与人类一样有能力的人工智能。<br>Though not widely agreed upon, Microsoft researchers have defined AGI as artificial intelligence that is as capable as a human at any intellectual task.</p>
<p>Alignment 对齐<br>确保AI系统的目标与人类价值观一致的任务。The task of ensuring that the goals of an AI system are in line with human values.</p>
<p>ASI (Artificial Super Intelligence)超级人工智能<br>Though subject to debate, ASI is commonly defined as artificial intelligence that surpasses the capabilities of the human mind.尽管存在争议，但ASI通常被定义为超越人类思维能力的人工智能。</p>
<p>Attention 注意力（Transformer模型重要组成）<br>在神经网络的上下文中，注意力机制帮助模型在生成输出时专注于输入的相关部分。<br>In the context of neural networks, attention mechanisms help the model focus on relevant parts of the input when producing an output.</p>
<p>Back Propagation 反向传播<br>这是一种在训练神经网络中常用的算法，指的是计算损失函数相对于网络权重的梯度的方法。<br>An algorithm often used in training neural networks, referring to the method for computing the gradient of the loss function with respect to the weights in the network.</p>
<p>Bias 偏差<br>AI模型对数据所做的假设。”偏差-方差权衡”是模型对数据的假设与模型的预测随着训练数据的变化而变化的平衡。归纳偏差是机器学习算法对数据底层分布的一组假设。<br>Assumptions made by an AI model about the data. A “bias variance tradeoff” is the balance that must be achieved between assumptions a model makes about the data and the amount a model’s predictions change, given different training data. Inductive bias is the set of assumptions that a machine learning algorithm makes on the underlying distribution of the data.</p>
<p>Chain of Thought (CoT) 思维链<br>大模型提示工程中的重要技术，这个词通常用来描述AI模型在达到决策时使用的推理步骤序列。<br>In AI, this term is often used to describe the sequence of reasoning steps an AI model uses to arrive at a decision.</p>
<p>Chatbot 聊天机器人<br>一种计算机程序，设计用于通过文本或语音交互模拟人类对话。聊天机器人经常利用自然语言处理技术来理解用户输入并提供相关的响应。<br>A computer program designed to simulate human conversation through text or voice interactions. Chatbots often utilize natural language processing techniques to understand user input and provide relevant responses.</p>
<p>ChatGPT 不需多解释<br>由OpenAI开发的基于GPT微调的AI大语言模型应用，可以生成模仿人类的文本，可以完成写文章，写软件程序代码等等多种任务。<br>A large-scale AI language model developed by OpenAI that generates human-like text.</p>
<p>CLIP (Contrastive Language–Image Pretraining)<br>OpenAI开发的一种AI模型，它将图像和文本相连接，使其能够理解和生成图像的描述。<br>An AI model developed by OpenAI that connects images and text, allowing it to understand and generate descriptions of images.</p>
<p>Compute 算力<br>用于训练或运行AI模型的计算资源（如CPU或GPU时间）。<br>The computational resources (like CPU or GPU time) used in training or running AI models.</p>
<p>Convolutional Neural Network (CNN)卷积神经网络<br>一种深度学习模型，通过应用一系列滤波器来处理具有网格状拓扑结构（例如，图像）的数据。这类模型常用于图像识别任务。<br>A type of deep learning model that processes data with a grid-like topology (e.g., an image) by applying a series of filters. Such models are often used for image recognition tasks.</p>
<p>Data Augmentation:数据增强<br>通过添加已有数据的略微修改的副本来增加用于训练模型的数据量和多样性的过程。<br>The process of increasing the amount and diversity of data used for training a model by adding slightly modified copies of existing data.</p>
<p>Data Set 数据集<br>一组样本的集合。</p>
<p>Deep Learning 深度学习<br>机器学习的一个子领域，专注于训练具有多层的神经网络，使其能够学习复杂的模式。<br>A subfield of machine learning that focuses on training neural networks with many layers, enabling learning of complex patterns.</p>
<p>Diffusion 扩散<br>在AI和机器学习中，扩散是一种生成新数据的技术，它从一块真实数据开始并添加随机噪声。扩散模型是一种生成模型，其中神经网络被训练以预测当随机噪声添加到数据时的反向过程。扩散模型被用来生成与训练数据相似的新样本。<br>In AI and machine learning, a technique used for generating new data by starting with a piece of real data and adding random noise. A diffusion model is a type of generative model in which a neural network is trained to predict the reverse process when random noise is added to data. Diffusion models are used to generate new samples of data that are similar to the training data.</p>
<p>Double Descent 双下降<br>机器学习中的一个现象，模型性能随着复杂性的增加而提高，然后变差，然后再次提高。<br>A phenomenon in machine learning in which model performance improves with increased complexity, then worsens, then improves again.</p>
<p>Embedding 嵌入<br>数据的新形式的表示，通常是一个向量空间。相似的数据点有更相似的嵌入。<br>The representation of data in a new form, often a vector space. Similar data points have more similar embeddings.</p>
<p>Emergence/Emergent Behavior (“sharp left turns,” intelligence explosions) 涌现/涌现行为（“急转左”，智慧爆炸）<br>在AI中，涌现指的是从简单的规则或交互中产生的复杂行为。“急转左”和“智能爆炸”是AI发展突然和剧烈转变的推测性场景，通常与AGI的到来有关。<br>In AI, emergence refers to complex behavior arising from simple rules or interactions. “Sharp left turns” and “intelligence explosions” are speculative scenarios where AI development takes sudden and drastic shifts, often associated with the arrival of AGI.</p>
<p>End-to-End Learning 端到端学习<br>一种不需要手工设计特征的机器学习模型。模型只需输入原始数据并从这些输入中学习。<br>A type of machine learning model that does not require hand-engineered features. The model is simply fed raw data and expected to learn from these inputs.</p>
<p>Expert Systems 专家系统<br>应用人工智能技术提供特定领域内复杂问题解决方案的应用。<br>An application of artificial intelligence technologies that provides solutions to complex problems within a specific domain.</p>
<p>Explainable AI (XAI) 可解释的AI<br>AI的一个子领域，专注于创建提供清晰易懂决策解释的透明模型。<br>A subfield of AI focused on creating transparent models that provide clear and understandable explanations of their decisions.</p>
<p>Fine-tuning 微调<br>取一个已经在大数据集上训练过的预训练机器学习模型，并将其调整以适应略有不同的任务或特定领域的过程。在微调过程中，使用较小的、针对特定任务的数据集进一步调整模型的参数，使其能够学习任务特定的模式并提高在新任务上的性能。<br>The process of taking a pre-trained machine learning model that has already been trained on a large dataset and adapting it for a slightly different task or specific domain. During fine-tuning, the model’s parameters are further adjusted using a smaller, task-specific dataset, allowing it to learn task-specific patterns and improve performance on the new task.</p>
<p>Forward Propagation 前向传播<br>在神经网络中，前向传播是将输入数据送入网络，并通过每一层（从输入层到隐藏层，最后到输出层）产生输出的过程。网络将权重和偏差应用于输入，并使用激活函数生成最终输出。<br>In a neural network, forward propagation is the process where input data is fed into the network and passed through each layer (from the input layer to the hidden layers and finally to the output layer) to produce the output. The network applies weights and biases to the inputs and uses activation functions to generate the final output.</p>
<p>Foundation Model 基础模型<br>在广泛数据上训练的大型AI模型，用于适应特定任务。<br>Large AI models trained on broad data, meant to be adapted for specific tasks.</p>
<p>General Adversarial Network (GAN) 生成对抗网络<br>一种用于生成与现有数据相似的新数据的机器学习模型。它使两个神经网络相互对抗：“生成器”创建新数据，“判别器”试图区分该数据与真实数据。<br>A type of machine learning model used to generate new data similar to some existing data. It pits two neural networks against each other: a “generator,” which creates new data, and a “discriminator” which tries to distinguish that data from real data.</p>
<p>Generative AI 生成式AI<br>AI的一个分支，专注于创建可以基于现有数据的模式和示例生成新的和原创内容的模型，如图像、音乐或文本。比如ChatGPT,MidJouney。<br>A branch of AI focused on creating models that can generate new and original content, such as images, music, or text, based on patterns and examples from existing data.</p>
<p>Generalization 泛化<br>模型泛化是指一些模型可以应用（泛化）到其他场景，通常为采用迁移学习、微调等手段实现泛化。</p>
<p>GPT (Generative Pretrained Transformer) 生成式预训练Transformer模型<br>由OpenAI开发的AI大语言模型，可以生成类似人类的文本…ChatGPT就是基于这个模型微调完成的产品。<br>A large-scale AI language model developed by OpenAI that generates human-like text.</p>
<p>GPU (Graphics Processing Unit) 图形处理器<br>一种专用的微处理器，主要设计用于快速渲染图像以输出到显示器。GPU也非常适合执行训练和运行神经网络所需的计算。<br>A specialized type of microprocessor primarily designed to quickly render images for output to a display. GPUs are also highly efficient at performing the calculations needed to train and run neural networks.</p>
<p>Gradient Descent 梯度下降<br>在机器学习中，梯度下降是一种优化方法，它根据损失函数的最大改善方向逐步调整模型的参数。例如，在线性回归中，梯度下降通过反复调整线的斜率和截距以最小化预测误差，帮助找到最佳拟合线。<br>In machine learning, gradient descent is an optimization method that gradually adjusts a model’s parameters based on the direction of largest improvement in its loss function. In linear regression, for example, gradient descent helps find the best-fit line by repeatedly refining the line’s slope and intercept to minimize prediction errors.</p>
<p>Hallucinate/Hallucination 幻觉<br>在AI的上下文中，幻觉是指模型生成不基于实际数据或与现实显著不同的内容的现象。<br>In the context of AI, hallucination refers to the phenomenon in which a model generates content that is not based on actual data or is significantly different from reality.</p>
<p>Hidden Layer 隐藏层<br>神经网络中的隐藏层指的是不直接连接到输入或输出的人工神经元层。<br>Layers of artificial neurons in a neural network that are not directly connected to the input or output.</p>
<p>Hyperparameter Tuning 超参数调优<br>选择机器学习模型的超参数（不从数据中学习的参数）的适当值的过程。<br>The process of selecting the appropriate values for the hyperparameters (parameters that are not learned from the data) of a machine learning model.</p>
<p>Inference 推理<br>使用训练过的机器学习模型进行预测的过程。<br>The process of making predictions with a trained machine learning model.</p>
<p>Instruction Tuning 指令微调<br>机器学习中的一种技术，其中模型基于数据集中给定的特定指令进行微调。<br>A technique in machine learning where models are fine-tuned based on specific instructions given in the dataset.</p>
<p>Large Language Model (LLM) 大型语言模型<br>一种可以生成类人文本并在广泛数据集上训练的AI模型。<br>A type of AI model that can generate human-like text and is trained on a broad dataset.</p>
<p>Latent Space 潜空间（潜特征空间或嵌入空间）<br>在机器学习中，这个术语指的是模型（如神经网络）创建的数据的压缩表示。相似的数据点在潜在空间中更接近。<br>In machine learning, this term refers to the compressed representation of data that a model (like a neural network) creates. Similar data points are closer in latent space.</p>
<p>Loss Function (or Cost Function) 损失函数<br>机器学习模型在训练期间寻求最小化的函数。它量化模型预测与真实值之间的差距。<br>A function that a machine learning model seeks to minimize during training. It quantifies how far the model’s predictions are from the true values.</p>
<p>Machine Learning 机器学习<br>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能。提供系统自动学习和从经验中改进的能力，无需明确编程。<br>A type of artificial intelligence that provides systems the ability to automatically learn and improve from experience without being explicitly programmed.</p>
<p>Mixture of Experts 多专家模型/混合专家系统<br>是在神经网络 (Neural Network, NN) 领域发展起来的一种集成学习(Ensemble Learning) 技术。传统的深度学习模型在训练时，对于每个输入样本，整个网络都会参与计算。随着模型越来越大，训练使用的样本数据越来越多，训练的开销越来越难以承受。而 MoE 可以动态激活部分神经网络，从而实现在不增加计算量的前提下大幅度增加模型参数量。MoE 技术目前是训练万亿参数量级模型的关键技术。<br>A machine learning technique where several specialized submodels (the “experts”) are trained, and their predictions are combined in a way that depends on the input.</p>
<p>Multimodal 多模态<br>模态（modal）是事情经历和发生的方式，我们生活在一个由多种模态（Multimodal）信息构成的世界，包括视觉信息、听觉信息、文本信息、嗅觉信息等等，在人工智能领域多模态经常指的是多种模态的信息，包括：文本、图像、视频、音频等。<br>In AI, this refers to models that can understand and generate information across several types of data, such as text and images.</p>
<p>Natural Language Processing (NLP)自然语言处理<br>AI的一个子领域，专注于通过自然语言进行计算机和人类之间的交互。NLP的最终目标是阅读、解码、理解，并以有价值的方式理解人类语言。<br>A subfield of AI focused on the interaction between computers and humans through natural language. The ultimate objective of NLP is to read, decipher, understand, and make sense of human language in a valuable way.</p>
<p>NeRF (Neural Radiance Fields) 神经辐射场<br>一种计算机视觉技术，用于生成高质量的三维重建模型。使用神经网络从2D图像创建3D场景的方法。它可用于照片级渲染、视图合成等。它利用深度学习技术从多个视角的图像中提取出对象的几何形状和纹理信息，然后使用这些信息生成一个连续的三维辐射场，从而可以在任意角度和距离下呈现出高度逼真的三维模型。<br>A method for creating a 3D scene from 2D images using a neural network. It can be used for photorealistic rendering, view synthesis, and more.</p>
<p>Neural Network 神经网络<br>一种受人脑启发的AI模型。它由连接的单元或节点组成，这些节点被称为神经元，它们在各层之间进行组织。神经元接受输入，在其上进行一些计算，并产生输出。<br>A type of AI model inspired by the human brain. It consists of connected units or nodes—called neurons—that are organized in layers. A neuron takes inputs, does some computation on them, and produces an output.</p>
<p>Objective Function 目标函数<br>机器学习模型在训练期间寻求最大化或最小化的函数。<br>A function that a machine learning model seeks to maximize or minimize during training.</p>
<p>Overfitting 过拟合<br>当函数过于紧密地拟合有限的数据点时会发生的建模错误，导致应用于未见数据时预测性能差。<br>A modeling error that occurs when a function is too closely fit to a limited set of data points, resulting in poor predictive performance when applied to unseen data.</p>
<p>Parameters 参数<br>在机器学习中，参数是模型用来进行预测的内部变量。它们在训练过程中从训练数据中学习。例如，在神经网络中，权重和偏差就是参数。<br>In machine learning, parameters are the internal variables that the model uses to make predictions. They are learned from the training data during the training process. For example, in a neural network, the weights and biases are parameters.</p>
<p>Pre-training 预训练<br>训练机器学习模型的初始阶段，在该阶段模型从数据中学习通用特征、模式和表示，而不需要具体了解将来会应用到的任务。这个无监督或半监督的学习过程使模型能够发展出对底层数据分布的基本理解，并提取出有意义的特征，这些特征可以在后续的微调中用于特定任务。<br>The initial phase of training a machine learning model where the model learns general features, patterns, and representations from the data without specific knowledge of the task it will later be applied to. This unsupervised or semi-supervised learning process enables the model to develop a foundational understanding of the underlying data distribution and extract meaningful features that can be leveraged for subsequent fine-tuning on specific tasks.</p>
<p>Prompt 提示词（也称“指令”）<br>为模型设置任务或查询的初始上下文或指令。<br>The initial context or instruction that sets the task or query for the model.</p>
<p>Regularization 正则化<br>在机器学习中，正则化是一种用于防止过拟合的技术，通过向模型的损失函数添加惩罚项来实现。这种惩罚阻止模型过度依赖训练数据中的复杂模式，从而促进更具泛化性和较少倾向于过拟合的模型。<br>In machine learning, regularization is a technique used to prevent overfitting by adding a penalty term to the model’s loss function. This penalty discourages the model from excessively relying on complex patterns in the training data, promoting more generalizable and less prone-to-overfitting models.</p>
<p>Reinforcement Learning 强化学习<br>一种机器学习类型，其中一个代理通过在环境中采取行动以最大化某些奖励来学习决策。<br>A type of machine learning where an agent learns to make decisions by taking actions in an environment to maximize some reward.</p>
<p>RLHF (Reinforcement Learning from Human Feedback) 基于人类反馈的强化学习<br>一种通过从人类对模型输出给出的反馈中学习来训练AI模型的方法。<br>A method to train an AI model by learning from feedback given by humans on model outputs.</p>
<p>Singularity 奇点<br>在AI的语境中，奇点（也称为技术奇点）指的是一个假设的未来时间点，当时技术增长变得无法控制和不可逆转，导致对人类文明的无法预见的变化。<br>In the context of AI, the singularity (also known as the technological singularity) refers to a hypothetical future point in time when technological growth becomes uncontrollable and irreversible, leading to unforeseeable changes to human civilization.</p>
<p>Supervised Learning 监督学习<br>监督学习是机器学习的一个分支，是一种数据分析方法，它使用从数据中迭代学习的算法，使计算机无需明确编程就能够发现隐藏的洞见。<br>A type of machine learning where the model is provided with labeled training data.</p>
<p>Symbolic Artificial Intelligence 符号人工智能<br>一种利用符号推理来解决问题和表示知识的AI类型。<br>A type of AI that utilizes symbolic reasoning to solve problems and represent knowledge.</p>
<p>Temperature<br>从生成模型中抽样包含随机性，因此每次点击“生成”时，相同的提示可能会产生不同的输出。温度是用于调整随机程度的数字。</p>
<p>TensorFlow<br>由Google开发的开源机器学习平台，用于构建和训练机器学习模型。<br>An open-source machine learning platform developed by Google that is used to build and train machine learning models.</p>
<p>TPU (Tensor Processing Unit) 张量处理单元<br>张量处理单元 (TPU) 是 Google 定制开发的专用集成电路 (ASIC)，用于加速机器学习工作负载。<br>A type of microprocessor developed by Google specifically for accelerating machine learning workloads.</p>
<p>Token 文本中的最小单位<br>Token 可以被理解为文本中的最小单位。在英文中，一个 token 可以是一个单词，也可以是一个标点符号。在中文中，通常以字或词作为 token。ChatGPT 将输入文本拆分成一个个 token，使模型能够对其进行处理和理解。</p>
<p>Top-k &amp; Top-p<br>选择输出标记的方法是使用语言模型生成文本的一个关键概念。有几种方法（也称为解码策略）用于选择输出token，其中两种主要方法是 top-k 采样和 top-p 采样。</p>
<p>Training Data 训练数据<br>用于训练机器学习模型的数据集。<br>The dataset used to train a machine learning model.</p>
<p>Transfer Learning 迁移学习<br>机器学习中的一种方法，其中预先训练的模型被用于新的问题。<br>A method in machine learning where a pre-trained model is used on a new problem.</p>
<p>Transformer<br>用于处理自然语言等向量数据的特定类型的神经网络架构。Transformer以其处理数据中长距离依赖性的能力而闻名，这要归功于一种称为“注意力”的机制，它允许模型在产生输出时权衡不同输入的重要性。<br>A specific type of neural network architecture used primarily for processing sequential data such as natural language. Transformers are known for their ability to handle long-range dependencies in data, thanks to a mechanism called “attention,” which allows the model to weigh the importance of different inputs when producing an output.</p>
<p>Underfitting 欠拟合<br>当统计模型或机器学习算法无法充分捕捉数据的底层结构时，统计和机器学习中的建模错误。<br>A modeling error in statistics and machine learning when a statistical model or machine learning algorithm cannot adequately capture the underlying structure of the data.</p>
<p>Unsupervised Learning 无监督学习<br>一种机器学习类型，其中模型没有提供带标签的训练数据，而必须自己识别数据中的模式。<br>A type of machine learning where the model is not provided with labeled training data, and instead must identify patterns in the data on its own.</p>
<p>Validation Data 验证数据<br>用于机器学习的数据集的一个子集，它与训练和测试数据集是分开的。它被用来调整模型的超参数（即，结构，而不是权重）。<br>A subset of the dataset used in machine learning that is separate from the training and test datasets. It’s used to tune the hyperparameters (i.e., architecture, not weights) of a model.</p>
<p>XAI (Explainable AI) 可解释AI<br>专注于创建提供明确且易于理解的决策解释的透明模型的AI子领域。<br>A subfield of AI focused on creating transparent models that provide clear and understandable explanations of their decisions.</p>
<p>Zero-shot Learning 零样本学习<br>一种机器学习技术，其中模型在未经微调的情况下，对训练期间未见过的条件进行预测。<br>A type of machine learning where the model makes predictions for conditions not seen during training, without any fine-tuning.</p>
<p>Prompt Engineering 提示工程<br>提示工程（Prompt Engineering）是一门较新的学科，关注提示词开发和优化，帮助用户将大语言模型（Large Language Model, LLM）用于各场景和研究领域。掌握了提示工程相关技能将有助于用户更好地了解大型语言模型的能力和局限性。用户可利用提示工程来提升大语言模型处理复杂任务场景的能力，如问答和算术推理能力。开发人员可通过提示工程设计、研发强大的工程技术，实现和大语言模型或其他生态工具的高效接轨。<br>Prompt engineering is a relatively new discipline for developing and optimizing prompts to efficiently use language models (LMs) for a wide variety of applications and research topics. Prompt engineering skills help to better understand the capabilities and limitations of large language models (LLMs).Researchers use prompt engineering to improve the capacity of LLMs on a wide range of common and complex tasks such as question answering and arithmetic reasoning. Developers use prompt engineering to design robust and effective prompting techniques that interface with LLMs and other tools.</p>
<p>Prompt Engineering 提示工程<br>在NLP大模型中，基于上下文学习、少样本学习或少样本提示是一种提示工程技术，它允许模型在尝试任务之前处理一些示例。<br>Few shot Prompting In natural language processing, in-context learning, few-shot learning or few-shot prompting is a prompting technique that allows a model to process examples before attempting a task.</p>
<h2 id="详解AI大模型行业黑话，迅速搞懂提示工程-prompt-、向量工程-embedding-、微调工程-fine-tune）"><a href="#详解AI大模型行业黑话，迅速搞懂提示工程-prompt-、向量工程-embedding-、微调工程-fine-tune）" class="headerlink" title="详解AI大模型行业黑话，迅速搞懂提示工程(prompt)、向量工程(embedding)、微调工程(fine-tune）"></a>详解AI大模型行业黑话，迅速搞懂提示工程(prompt)、向量工程(embedding)、微调工程(fine-tune）</h2><p>大家都在讨论大模型，似乎什么都可以与大模型结合，可当初学者也想上手时，却面临一堆令人头大的词汇，什么Prompt、、Embedding、Fine-tuning，看到瞬间头都大了。一堆英文就算了，还不容易查到正确解释，怎么办呢？别担心，本文就用一种有趣的方式让大家认识它们。</p>
<p>首先让我们先了解一下作为人类是如何去使用大模型的。我们可以把大模型当做一个对语言有着出色理解能力的人，我们要做的就是通过文本的输入，让大模型理解我们希望他做什么事情。那么学会向大模型提问，就变成了用好大模型最重要的事情，甚至可以说使用大模型的过程就是向大模型提问的过程。</p>
<p>那么有哪些概念需要我们了解呢？</p>
<h3 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h3><p>是输入给大模型的文本，用来提示或引导大模型给出符合预期的输出。在上面这个与星火大模型的对话中，我们向大模型提问的文本就是提示词，而大模型在理解了我们的提示词后就在提示词的下面会给出对应的回答。</p>
<p><img src="/archives/fd81114f/2.png" alt=" "></p>
<p>Prompt = 提示词 = 人与大模型交互的媒介</p>
<p>打个比方，假如我们是产品经理，大模型是一名研发工程师的话，那么提示词就是需求，产品经理在提需求的时候，需要在需求里面包含背景说明、需求说明、版本要求、方案建议等信息，只有把需求描述得足够清晰，工程师才能够按照需求输出符合要求的代码,提示词就相当于人向大模型提需求时的需求文档.</p>
<p><img src="/archives/fd81114f/3.png" alt=" "></p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>我们可以经常在大模型的计费说明中看到Token这个词，Token是大模型处理的最小单元，比如英文单词或者汉字。</p>
<p><img src="/archives/fd81114f/4.png" alt=" "></p>
<p>Token长度 = 与大模型交互时使用的单词、汉字数<br>不同的人表达同一件事情时，有的人言简意赅几句话就能把事情说得明明白白，而有的人可能表达能力不好，非常的啰嗦，才能把这件事情说清楚。那么很明显这个啰嗦的人在描述这件事情上消耗的Token就比前面那个人多了很多。</p>
<h3 id="Emdedding"><a href="#Emdedding" class="headerlink" title="Emdedding"></a>Emdedding</h3><p>是将段落文本编码成固定维度的向量，便于进行语义相似度的比较。</p>
<p><img src="/archives/fd81114f/5.png" alt=" "></p>
<p>我们可以理解成把知识数据向量化成一个数据库，是为了方便检索，这让用户在提问的时候，我们就可以根据用户的提问内容，在数据库中提取相关度比较高的材料，一起给到大模型，这样大模型就能用这些专业的知识做出更加具备专业水平的回答了。</p>
<p><img src="/archives/fd81114f/6.png" alt=" "></p>
<p>打个比方，Emdedding就像是当一个项目启动时，项目经理把待完成需求所依据的额外相关材料先整理好，提取重点后放在附件中给到研发工程师，便于研发工程师高效的输出符合预期的东西。</p>
<h3 id="Fine-Tune"><a href="#Fine-Tune" class="headerlink" title="Fine-Tune"></a>Fine-Tune</h3><p>在已经训练好的模型基础上进一步调整模型的过程吗，是一种使用高质量数据对模型参数进行微调的知识迁移技术，目的是让模型更匹配对特定任务的理解。</p>
<p><img src="/archives/fd81114f/7.png" alt=" "></p>
<p>我们可以把大模型类比为公司的研发人员，根据需求生产出对应的产品，而每个研发人员的开发经验都有所不同，输出的代码风格质量也不一样。这就像每个大模型背后使用的训练数据和方法不一样，当面对一样的问题时，做出的回答也会有所差异。那么如何让研发人员输出的代码符合公司的要求呢？答案就是进行培训，由入职导师对研发人员进行代码规范，以及其他需要遵循规则的培训，让他们直接把这些规则记住，这样子他们在做项目开发的时候，就可以直接输出符合规范的产物了。这里的培训类似于大模型的Fine-Tuning，经过Fine-Tuning这个二次训练，大模型更加清楚的知道我们对它输出内容的要求，也就可以输出更加让我们满意的回答了。</p>
<p>把Promp、Token、Emdedding、Fine-Tuning这些大模型词汇串起来，看看用到这些技术的大模型就可以实现下图所示的应用场景。 在下图这个例子中，我们要把一个设备使用手册做成支持大模型问答的应用，这样当我们在使用产品过程中有疑问时，就不需要自己去翻厚厚的说明书了，而是可以直接向大模型提问。</p>
<p><img src="/archives/fd81114f/8.png" alt=" "></p>
<h3 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h3><p>如何让大模型学会这本厚厚的说明书，然后来回答我们的问题呢？</p>
<p>首先我们可以通过Emdedding将这本说明书的文本内容向量化为一个数据库，当用户提问的时候，就可以通过提问的内容在这个数据库中检索出相关的内容，然后跟用户的提问一起组合成完整的Prompt给到我们的语言大模型去处理。根据前面文档的讲解，我们也知道提交给大模型的Prompt内容越多，消耗的token也就越多。而刚才把说明书的内容向量化，并支持相关性线索并提取出来作为problem的过程就是Emdedding。当我们把用户跟这个设备相关的问题提交给大模型时，大模型已经可以给出对应的答案了。</p>
<p><img src="/archives/fd81114f/9.png" alt=" "></p>
<p>但假如在使用的过程中，我们希望大模型给出的回答可以更加贴合设备问题排查的格式，这时候我们就可以使用微调 的技术，也就是Fine-Tuning通过一些优质的问答数据对大模型进行训练微调，使他的回答更加符合我们的期望。</p>
<p>此外，基于Emdedding加Prompt的方案，一般输入消耗的都可能会很长，导致调用的成本更高，响应时间更长。如果将用户说明书中被提问的高频问题通过Fine-Tuning融入大模型中，可以大幅减少提问需要消耗的Token、加快响应时间，可见这些技术之间都是相互关联相互配合的。</p>
<h2 id="AI大模型的应用实践总结"><a href="#AI大模型的应用实践总结" class="headerlink" title="AI大模型的应用实践总结"></a>AI大模型的应用实践总结</h2><p>随着ChatGPT的迅速出圈，加速了大模型时代的变革。对于以Transformer、MOE结构为代表的大模型来说，传统的单机单卡训练模式肯定不能满足上千（万）亿级参数的模型训练，这时候我们就需要解决内存墙和通信墙等一系列问题，在单机多卡或者多机多卡进行模型训练。</p>
<h3 id="AI集群"><a href="#AI集群" class="headerlink" title="AI集群"></a>AI集群</h3><p>由于目前只有3台A800 GPU服务器（共24卡），基于目前现有的一些AI框架和大模型，无法充分利用3台服务器。比如：OPT-66B一共有64层Transformer，当使用Alpa进行流水线并行时，通过流水线并行对模型进行切分，要么使用16卡，要么使用8卡，没法直接使用24卡，因此，GPU服务器最好是购买偶数台（如：2台、4台、8台）。</p>
<p>具体的硬件配置如下：</p>
<p>CPUs:  每个节点具有 1TB 内存的 Intel CPU，物理CPU个数为64，每颗CPU核数为16。<br>GPUs:  24 卡 A800 80GB GPUs ，每个节点 8 个 GPU（3 个节点）。</p>
<p><img src="/archives/fd81114f/10.png" alt=" "></p>
<p>目前使用Huggingface Transformers和DeepSpeed进行通过数据并行进行训练（pretrain），单卡可以跑三百亿参数（启用ZeRO-2或ZeRO-3），如OPT-30B，具体训练教程参考官方样例。</p>
<p>使用Alpa进行流水线并行和数据并行进行训练（fine tuning）时，使用了3台共24卡（PP：12，DP：2）进行训练OPT-30B，具体训练教程参考官方样例。但是进行模型训练之前需要先进行模型格式转换，将HF格式转换为Alpa格式的模型文件，具体请参考官方代码。如果不想转换，官网也提供了转换好的模型格式，具体请参考文档：Serving OPT-175B, BLOOM-176B and CodeGen-16B using Alpa。</p>
<p><img src="/archives/fd81114f/11.png" alt=" "></p>
<p>20230703：前几天对H800进行过性能测试，整体上来说，对于模型训练（Huggingface Transformers）和模型推理（FasterTransformer）都有30%左右的速度提升。但是对于H800支持的新数据类型FP8，目前很多开源框架暂不支持，虽然，Nvidia自家一些开源框架支持该数据类型，目前不算太稳定。</p>
<p><img src="/archives/fd81114f/12.png" alt=" "></p>
<h3 id="AI处理器（加速卡）"><a href="#AI处理器（加速卡）" class="headerlink" title="AI处理器（加速卡）"></a>AI处理器（加速卡）</h3><p>目前，主流的AI处理器无疑是NVIDIA的GPU，NVIDIA的GPU产品主要有GeForce、Tesla和Quadro三大系列，虽然，从硬件角度来看，它们都采用同样的架构设计，也都支持用作通用计算(GPGPU)，但因为它们分别面向的目标市场以及产品定位的不同，这三个系列的GPU在软硬件的设计和支持上都存在许多差异。其中，GeForce为消费级显卡，而Tesla和Quadro归类为专业级显卡。GeForce主要应用于游戏娱乐领域，而Quadro主要用于专业可视化设计和创作，Tesla更偏重于深度学习、人工智能和高性能计算。</p>
<p>Tesla：A100（A800）、H100（H800）、A30、A40、V100、P100…<br>GeForce：RTX 3090、RTX 4090 …<br>Quadro：RTX 6000、RTX 8000 …</p>
<p>其中，A800/H800是针对中国特供版（低配版），相对于A100/H100，主要区别：</p>
<p>A100的Nvlink最大总网络带宽为600GB/s，而A800的Nvlink最大总网络带宽为400GB/s。<br>H100的Nvlink最大总网络带宽为900GB/s，而A800的Nvlink最大总网络带宽为400GB/s。</p>
<p>其他的一些国外AI处理器（加速卡）：</p>
<p>AMD：GPU MI300X<br>Intel：Xeon Phi<br>Google：TPU</p>
<p>国产AI处理器（加速卡）：</p>
<p>华为：昇腾910（用于训练和推理），昇腾310（用于推理）。采用自家设计的达芬奇架构。<br>海光DCU：8100系列（深算一号），以GPGPU架构为基础。<br>寒武纪：思元370、思元590。<br>百度：昆仑芯，采用的是其自研XPU架构。<br>阿里：含光800。</p>
<h3 id="大模型算法"><a href="#大模型算法" class="headerlink" title="大模型算法"></a>大模型算法</h3><p>模型结构：</p>
<p>目前主流的大模型都是Transformer、MOE结构为基础进行构建，如果说Transformer结构使得模型突破到上亿参数量，MoE 稀疏混合专家结构使模型参数量产生进一步突破，达到数万亿规模。</p>
<p>大模型算法：</p>
<p>下图详细展示了AI大模型的发展历程：</p>
<p><img src="/archives/fd81114f/13.png" alt=" "></p>
<p>可以说，Transformer 开创了继 MLP 、CNN和 RNN之后的第四大类模型。而基于Transformer结构的模型又可以分为Encoder-only、Decoder-only、Encoder-Decoder这三类。</p>
<p>仅编码器架构（Encoder-only）：自编码模型（破坏一个句子，然后让模型去预测或填补），更擅长理解类的任务，例如：文本分类、实体识别、关键信息抽取等。典型代表有：Bert、RoBERTa等。<br>仅解码器架构（Decoder-only）：自回归模型（将解码器自己当前步的输出加入下一步的输入，解码器融合所有已经输入的向量来输出下一个向量，所以越往后的输出考虑了更多输入），更擅长生成类的任务，例如：文本生成。典型代表有：GPT系列、LLaMA、OPT、Bloom等。<br>编码器-解码器架构（Encoder-Decoder）：序列到序列模型（编码器的输出作为解码器的输入），主要用于基于条件的生成任务，例如：翻译，概要等。典型代表有：T5、BART、GLM等。</p>
<p>大语言模型</p>
<p>目前业界可以下载到的一些大语言模型：</p>
<p>ChatGLM-6B / ChatGLM2-6B ：清华开源的中英双语的对话语言模型。目前，第二代ChatGLM在官网允许的情况下可以进行商用。</p>
<p>GLM-10B/130B ：双语（中文和英文）双向稠密模型。</p>
<p>OPT-2.7B/13B/30B/66B ：Meta开源的预训练语言模型。</p>
<p>LLaMA-7B/13B/30B/65B ：Meta开源的基础大语言模型。</p>
<p>Alpaca（LLaMA-7B）：斯坦福提出的一个强大的可复现的指令跟随模型，种子任务都是英语，收集的数据也都是英文，因此训练出来的模型未对中文优化。</p>
<p>BELLE（BLOOMZ-7B/LLaMA-7B/LLaMA-13B）：本项目基于 Stanford Alpaca，针对中文做了优化，模型调优仅使用由ChatGPT生产的数据（不包含任何其他数据）。</p>
<p>Bloom-7B/13B/176B：可以处理46 种语言，包括法语、汉语、越南语、印度尼西亚语、加泰罗尼亚语、13 种印度语言（如印地语）和 20 种非洲语言。其中，Bloomz系列模型是基于 xP3 数据集微调。推荐用于英语的提示（prompting）；Bloomz-mt系列模型是基于 xP3mt 数据集微调。推荐用于非英语的提示（prompting）。</p>
<p>Vicuna(7B/13B)：由UC Berkeley、CMU、Stanford和 UC San Diego的研究人员创建的 Vicuna-13B，通过在 ShareGPT 收集的用户共享对话数据中微调 LLaMA 获得。其中，使用 GPT-4 进行评估，发现 Vicuna-13B 的性能在超过90%的情况下实现了与ChatGPT和Bard相匹敌的能力；同时，在 90% 情况下都优于 LLaMA 和 Alpaca 等其他模型。而训练 Vicuna-13B 的费用约为 300 美元。不仅如此，它还提供了一个用于训练、服务和评估基于大语言模型的聊天机器人的开放平台：FastChat。</p>
<p>Baize：白泽是在LLaMA上训练的。目前包括四种英语模型：白泽-7B、13B 、 30B（通用对话模型）以及一个垂直领域的白泽-医疗模型，供研究 / 非商业用途使用，并计划在未来发布中文的白泽模型。白泽的数据处理、训练模型、Demo 等全部代码已经开源。</p>
<p>LLMZoo：来自香港中文大学和深圳市大数据研究院团队推出的一系列大模型，如：Phoenix（凤凰） 和 Chimera等。</p>
<p>MOSS：由复旦 NLP 团队推出的 MOSS 大语言模型。</p>
<p>baichuan-7B：由百川智能推出的大模型，可进行商用。</p>
<p>CPM-Bee：百亿参数的开源中英文双语基座大模型，可进行商用。</p>
<blockquote>
<p>20230325（当时官方还未开源训练代码，目前直接基于官方的训练代码即可）:<br>前两天测试了BELLE，对中文的效果感觉还不错。具体的模型训练（预训练）方法可参考Hugingface Transformers的样例，SFT（指令精调）方法可参考Alpaca的训练代码。</p>
</blockquote>
<p>从上面可以看到，开源的大语言模型主要有三大类：GLM衍生的大模型（wenda、ChatSQL等）、LLaMA衍生的大模型（Alpaca、Vicuna、BELLE、Phoenix、Chimera等）、Bloom衍生的大模型（Bloomz、BELLE、Phoenix等）。</p>
<p><img src="/archives/fd81114f/14.png" alt=" "></p>
<p>从表格中可以看到，对于像ChatGLM-6B、LLaMA、Bloom这类大模型，要保证基座模型有比较好的效果，至少需要保证上千亿、万亿级的Token量。</p>
<p>目前来看，LLaMA无疑是其中最闪亮的星。但是国内关于LLaMA比较大的一个争论就是LLaMA是以英语为主要语言的拉丁语系上进行训练的，LLaMA词表中的中文token比较少（只有几百个），需不需要扩充词表？如果不扩充词表，中文效果会不会比较差？</p>
<p>如果不扩充词表，对于中文效果怎么样？根据Vicuna官方的报告，经过Instruction Turing的Vicuna-13B已经有非常好的中文能力。</p>
<p>LLaMA需不需要扩充词表？根据Chinese-LLaMA-Alpaca和BELLE的报告，扩充中文词表，可以提升中文编解码效率以及模型的性能。但是扩词表，相当于从头初始化开始训练这些参数。如果想达到比较好的性能，需要比较大的算力和数据量。同时，Chinese-LLaMA-Alpaca也指出在进行第一阶段预训练（冻结transformer参数，仅训练embedding，在尽量不干扰原模型的情况下适配新增的中文词向量）时，模型收敛速度较慢。如果不是有特别充裕的时间和计算资源，建议跳过该阶段。因此，虽然扩词表看起来很诱人，但是实际操作起来，还是很有难度的。</p>
<p>下面是BELLE针对是否扩充词表，数据质量、数据语言分布、数据规模对于模型性能的对比：</p>
<p><img src="/archives/fd81114f/15.png" alt=" "></p>
<p>其中，BELLE-0.5M-CLEAN是从230万指令数据中清洗得到0.5M数据（包含单轮和多轮对话数据）。LLaMA-7B-EXT是针对LLaMA做了中文词表扩充的预训练模型。</p>
<p>下面是Chinese-LLaMA-Alpaca针对中文Alpaca-13B、中文Alpaca-Plus-7B、中文Alpaca-Plus-13B的效果对比：</p>
<p><img src="/archives/fd81114f/16.png" alt=" "></p>
<p>其中，Plus系列Alpaca是在原版LLaMA的基础上扩充了中文词表，使用了120G中文通用纯文本数据进行二次预训练。</p>
<p>因此，如果既想要中文词表，又没有很大的算力，那建议直接使用ChatGLM-6B或者使用BELLE和Chinese-LLaMA-Alpaca进行中文词表扩充后训练好的模型作为Base模型。</p>
<h3 id="多模态大模型"><a href="#多模态大模型" class="headerlink" title="多模态大模型"></a>多模态大模型</h3><p>目前业界可以下载到的一些多模态大模型：</p>
<p>MiniGPT-4：沙特阿拉伯阿卜杜拉国王科技大学的研究团队开源。</p>
<p>LLaVA：由威斯康星大学麦迪逊分校，微软研究院和哥伦比亚大学共同出品。</p>
<p>VisualGLM-6B：开源的，支持图像、中文和英文的多模态对话语言模型，语言模型基于 ChatGLM-6B，具有 62 亿参数；图像部分通过训练 BLIP2-Qformer 构建起视觉模型与语言模型的桥梁，整体模型共78亿参数。</p>
<p>VisCPM：于CPM基础模型的中英双语多模态大模型。</p>
<h3 id="领域大模型"><a href="#领域大模型" class="headerlink" title="领域大模型"></a>领域大模型</h3><p>金融领域大模型</p>
<p>轩辕：在BLOOM-176B的基础上针对中文通用领域和金融领域进行了针对性的预训练与微调。</p>
<p>Cornucopia（聚宝盆）：开源了经过中文金融知识指令精调/指令微调(Instruct-tuning) 的LLaMA-7B模型。通过中文金融公开数据+爬取的金融数据构建指令数据集，并在此基础上对LLaMA进行了指令微调，提高了 LLaMA 在金融领域的问答效果。基于相同的数据，后期还会利用GPT3.5 API构建高质量的数据集，另在中文知识图谱-金融上进一步扩充高质量的指令数据集。</p>
<p>BBT-FinCUGE-Applications：开源了中文金融领域开源语料库BBT-FinCorpus，中文金融领域知识增强型预训练语言模型BBT-FinT5及中文金融领域自然语言处理评测基准CFLEB。</p>
<p>法律领域大模型</p>
<p>ChatLaw：由北京大学开源的大模型，主要有13B、33B。</p>
<p>LexiLaw：LexiLaw 是一个经过微调的中文法律大模型，它基于 ChatGLM-6B 架构，通过在法律领域的数据集上进行微调，使其在提供法律咨询和支持方面具备更高的性能和专业性。</p>
<p>LaWGPT：该系列模型在通用中文基座模型（如 Chinese-LLaMA、ChatGLM 等）的基础上扩充法律领域专有词表、大规模中文法律语料预训练，增强了大模型在法律领域的基础语义理解能力。在此基础上，构造法律领域对话问答数据集、中国司法考试数据集进行指令精调，提升了模型对法律内容的理解和执行能力。</p>
<p>Lawyer LLaMA：开源了一系列法律领域的指令微调数据和基于LLaMA训练的中文法律大模型的参数。Lawyer LLaMA 首先在大规模法律语料上进行了continual pretraining。在此基础上，借助ChatGPT收集了一批对中国国家统一法律职业资格考试客观题（以下简称法考）的分析和对法律咨询的回答，利用收集到的数据对模型进行指令微调，让模型习得将法律知识应用到具体场景中的能力。</p>
<p>医疗领域大模型</p>
<p>DoctorGLM：基于 ChatGLM-6B的中文问诊模型，通过中文医疗对话数据集进行微调，实现了包括lora、p-tuningv2等微调及部署。</p>
<p>BenTsao：源了经过中文医学指令精调/指令微调(Instruct-tuning) 的LLaMA-7B模型。通过医学知识图谱和GPT3.5 API构建了中文医学指令数据集，并在此基础上对LLaMA进行了指令微调，提高了LLaMA在医疗领域的问答效果。</p>
<p>BianQue：一个经过指令与多轮问询对话联合微调的医疗对话大模型，基于ClueAI/ChatYuan-large-v2作为底座，使用中文医疗问答指令与多轮问询对话混合数据集进行微调。</p>
<p>HuatuoGPT：开源了经过中文医学指令精调/指令微调(Instruct-tuning)的一个GPT-like模型。</p>
<p>Med-ChatGLM：基于中文医学知识的ChatGLM模型微调，微调数据与BenTsao相同。</p>
<p>QiZhenGPT：该项目利用启真医学知识库构建的中文医学指令数据集，并基于此在LLaMA-7B模型上进行指令精调，大幅提高了模型在中文医疗场景下效果，首先针对药品知识问答发布了评测数据集，后续计划优化疾病、手术、检验等方面的问答效果，并针对医患问答、病历自动生成等应用展开拓展。</p>
<p>XrayGLM：该项目为促进中文领域医学多模态大模型的研究发展，发布了XrayGLM数据集及模型，其在医学影像诊断和多轮交互对话上显示出了非凡的潜力。</p>
<p>MedicalGPT：训练医疗大模型，实现包括二次预训练、有监督微调、奖励建模、强化学习训练。发布中文医疗LoRA模型shibing624/ziya-llama-13b-medical-lora，基于<br>Ziya-LLaMA-13B-v1模型，SFT微调了一版医疗模型，医疗问答效果有提升，发布微调后的LoRA权重。</p>
<p>教育领域大模型</p>
<p>桃李（Taoli）：一个在国际中文教育领域数据上进行了额外训练的模型。项目基于目前国际中文教育领域流通的500余册国际中文教育教材与教辅书、汉语水平考试试题以及汉语学习者词典等，构建了国际中文教育资源库，构造了共计 88000 条的高质量国际中文教育问答数据集，并利用收集到的数据对模型进行指令微调，让模型习得将知识应用到具体场景中的能力。</p>
<p>EduChat：该项目华东师范大学计算机科学与技术学院的EduNLP团队研发，主要研究以预训练大模型为基底的教育对话大模型相关技术，融合多样化的教育垂直领域数据，辅以指令微调、价值观对齐等方法，提供教育场景下自动出题、作业批改、情感支持、课程辅导、高考咨询等丰富功能，服务于广大老师、学生和家长群体，助力实现因材施教、公平公正、富有温度的智能教育。</p>
<p>数学领域大模型</p>
<p>chatglm-maths：基于chatglm-6b微调/LORA/PPO/推理的数学题解题大模型, 样本为自动生成的整数/小数加减乘除运算, 可gpu/cpu部署，开源了训练数据集等。</p>
<h3 id="RLHF-人工反馈强化学习"><a href="#RLHF-人工反馈强化学习" class="headerlink" title="RLHF(人工反馈强化学习)"></a>RLHF(人工反馈强化学习)</h3><p>根据 OpenAI 之前做的一些实验，可以看到使用了 PPO（近端策略优化）算法的 RLHF 模型整体上都更好一些。当把结果提供给人类时，相比于 SFT 模型和通过 prompt 化身为助理的基础模型，人类也基本更喜欢来自 RLHF 模型的 token。</p>
<p><img src="/archives/fd81114f/17.png" alt=" "></p>
<p>那 RLHF 为什么能让模型更好呢？目前 AI 研究界还没有找到一个得到大家认可的理论，一种可能与比较和生成的计算难度之间的不对称性有关。</p>
<p>举个例子说明一下：假设我们要让一个模型写一首关于回形针的俳句。如果你是一位正努力创建训练数据的合同工，正在为 SFT 模型收集数据。那么你该怎样写出一首关于回形针的好俳句呢？而你可能并不是一位优秀的俳句诗人。但是，如果给你几首俳句，你却有能力辨别它们中哪首更好一些。也就是说，比起创建一个好样本，判断哪个样本更好是简单得多的任务。因此，这种不对称性可能使得比较是一种更好的方法，能更好地利用人类的判断来创造出好一些的模型。</p>
<p>但目前来看，RLHF 并不总是会为基石模型带来提升。在某些情况下，RLHF 模型会失去一些熵，也就是说它们会输出更加单调、变化更少的结果。而基础模型的熵更高，可以输出更加多样化的结果。</p>
<p>RLHF开源工具</p>
<p>下面是目前开源的一些RLHF工具：</p>
<p>DeepSpeed Chat：基于Opt系列模型进行示例。</p>
<p>ColossalChat：基于LLaMA系列模型进行示例。</p>
<h3 id="分布式并行及显存优化技术"><a href="#分布式并行及显存优化技术" class="headerlink" title="分布式并行及显存优化技术"></a>分布式并行及显存优化技术</h3><p>并行技术：</p>
<p>数据并行（如：PyTorch DDP）<br>模型/张量并行（如：Megatron-LM（1D）、Colossal-AI（2D、2.5D、3D））<br>流水线并行（如：GPipe、PipeDream、PipeDream-2BW、PipeDream Flush（1F1B））<br>多维混合并行（如：3D并行（数据并行、模型并行、流水线并行））<br>自动并行（如：Alpa（自动算子内/算子间并行））<br>优化器相关的并行（如：ZeRO（零冗余优化器，在执行的逻辑上是数据并行，但可以达到模型并行的显存优化效果）、PyTorch FSDP）</p>
<p>显存优化技术：</p>
<p>重计算(Recomputation)：Activation checkpointing(Gradient checkpointing)，本质上是一种用时间换空间的策略。<br>卸载（Offload）技术：一种用通信换显存的方法，简单来说就是让模型参数、激活值等在CPU内存和GPU显存之间左右横跳。如：ZeRO-Offload、ZeRO-Infinity等。<br>混合精度（BF16/FP16）：降低训练显存的消耗，还能将训练速度提升2-4倍。<br>BF16 计算时可避免计算溢出，出现Inf case。<br>FP16 在输入数据超过65506 时，计算结果溢出，出现Inf case。</p>
<h3 id="分布式训练框架"><a href="#分布式训练框架" class="headerlink" title="分布式训练框架"></a>分布式训练框架</h3><p>如何选择一款分布式训练框架？</p>
<p>训练成本：不同的训练工具，训练同样的大模型，成本是不一样的。对于大模型，训练一次动辄上百万/千万美元的费用。合适的成本始终是正确的选择。<br>训练类型：是否支持数据并行、张量并行、流水线并行、多维混合并行、自动并行等<br>效率：将普通模型训练代码变为分布式训练所需编写代码的行数，我们希望越少越好。<br>灵活性：你选择的框架是否可以跨不同平台使用？</p>
<p>常见的分布式训练框架：</p>
<p>第一类：深度学习框架自带的分布式训练功能。如：TensorFlow、PyTorch、MindSpore、Oneflow、PaddlePaddle等。<br>第二类：基于现有的深度学习框架（如：PyTorch、Flax）进行扩展和优化，从而进行分布式训练。如：Megatron-LM（张量并行）、DeepSpeed（Zero-DP）、Colossal-AI（高维模型并行，如2D、2.5D、3D）、Alpa（自动并行）等</p>
<p>目前训练超大规模语言模型主要有两条技术路线：</p>
<p>TPU + XLA + TensorFlow/JAX ：由Google主导，由于TPU和自家云平台GCP深度绑定。<br>GPU + PyTorch + Megatron-LM + DeepSpeed ：由NVIDIA、Meta、MicroSoft大厂加持，社区氛围活跃，也更受到大家欢迎。</p>
<p>对于国内来说，华为昇腾在打造 AI 全栈软硬件平台（昇腾NPU+CANN+MindSpore+MindFormers）。不过目前整个生态相对前两者，还差很远。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>系统运维之日志管理审计</title>
    <url>/archives/ca9e08db/</url>
    <content><![CDATA[<p><img src="/archives/ca9e08db/1.png" alt=" "></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>随着机房内的服务器和网络设备增加，日志管理和查询就成了让系统管理员头疼的事。</p>
<h3 id="系统管理员遇到的常见问题如下"><a href="#系统管理员遇到的常见问题如下" class="headerlink" title="系统管理员遇到的常见问题如下"></a>系统管理员遇到的常见问题如下</h3><p>1、日常维护过程中不可能登录到每一台服务器和设备上去查看日志</p>
<p>2、网络设备上的存储空间有限，不可能存储日期太长的日志，而系统出现问题又有可能是很久以前发生的某些操作造成的</p>
<p>3、在某些非法侵入的情况下，侵入者一般都会清除本地日志，清除侵入痕迹</p>
<p>4、zabbix等监控系统无法代替日志管理，无法监控如系统登录、计划任务执行等项目。</p>
<p>基于上述原因，在当前的网络环境中搭建一台用于日志集中管理的Rsyslog日志服务器就显得十分有必要了。</p>
<h3 id="Rsyslog服务的优点如下"><a href="#Rsyslog服务的优点如下" class="headerlink" title="Rsyslog服务的优点如下"></a>Rsyslog服务的优点如下</h3><p>1、Rsyslog服务器可以大多数的网络设备支持，在网络设备的系统设备选项中大多都有远程日志服务的配置选项。只需要填写上IP地址和端口（大多数设备已经默认是514了），然后确定就可以了</p>
<p>2、Linux服务器只需要在本地的Rsyslog服务配置中加入简单的一行就可以将日志发送到日志服务器，布署和配置起来十分简单；部署架构部署架构</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/archives/ca9e08db/2.png" alt=" "></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>编辑rsyslog配置文件：<br><code>vim /etc/rsyslog.conf</code></p>
<p>配置如下：<br><code>grep -v &quot;^#&quot; /etc/rsyslog.conf | grep -v &quot;^$&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ModLoad imudp</span><br><span class="line">$UDPServerRun 514</span><br><span class="line">$ModLoad imtcp</span><br><span class="line">$InputTCPServerRun 514</span><br><span class="line">$WorkDirectory &#x2F;var&#x2F;lib&#x2F;rsyslog</span><br><span class="line">$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat</span><br><span class="line">$IncludeConfig &#x2F;etc&#x2F;rsyslog.d&#x2F;*.conf</span><br><span class="line">$OmitLocalLogging on</span><br><span class="line">$IMJournalStateFile imjournal.state</span><br><span class="line">#*.info;mail.none;authpriv.none;cron.none;local6.none;local5.none;local4.none           &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line">*.info;mail.none;authpriv.none;cron.none      ?RemoteLogs         </span><br><span class="line">$template RemoteLogs,&quot;&#x2F;data&#x2F;logs&#x2F;%fromhost-ip%&#x2F;%fromhost-ip%_%$YEAR%-%$MONTH%-%$DAY%.log&quot;</span><br><span class="line">*.* ?RemoteLogs</span><br><span class="line">:fromhost-ip,!isequal,&quot;127.0.0.1&quot; ?RemoteLogs</span><br></pre></td></tr></table></figure>
<p>其中 “$ActionFileDefaultTemplate” 和“RSYSLOG_TraditionalFileFormat” 为使用默认timestamp格式</p>
<p>“$template” 为使用RemoteLogs模板接受客户端的日志，保存到本地的/data/logs/目录下，然后是每台客户端的ip_年份_月份_日期的log</p>
<p>“*.info;mail.none;authpriv.none;cron.none      ?RemoteLogs” 如何设置为/var/log/messages，则自定义模板目录和message都会生成日志，如果只设置模板目录，则只会在模板目录生成</p>
<p>“*.* ?RemoteLogs” 为所有服务所有级别的日志都记录</p>
<p>“:fromhost-ip, !isequal, “127.0.0.1” ?RemoteLogs” 服务端本机的日志不记录</p>
<p>重启服务生效：<br><code>systemctl restart rsyslog</code></p>
<p>可用的日志优先级：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">编码</th>
<th style="text-align:center">优先级</th>
<th style="text-align:center">严重性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">emerg</td>
<td style="text-align:center">系统不可用。该日志消息将写入用户终端中。</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">alert</td>
<td style="text-align:center">必须立即采取措施</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">crit</td>
<td style="text-align:center">严重状况</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">err</td>
<td style="text-align:center">非严重错误状况</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">warning</td>
<td style="text-align:center">警告状况</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">notice</td>
<td style="text-align:center">非常但重要的事情</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">info</td>
<td style="text-align:center">信息性事件</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">debug</td>
<td style="text-align:center">调试级别消息</td>
</tr>
</tbody>
</table>
</div>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><h3 id="Linux主机"><a href="#Linux主机" class="headerlink" title="Linux主机"></a>Linux主机</h3><p>编辑rsyslog配置文件：<br><code>vim /etc/rsyslog.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ModLoad imfile</span><br><span class="line">$InputFilePollInterval 5</span><br><span class="line">$WorkDirectory &#x2F;var&#x2F;spool&#x2F;rsyslog</span><br><span class="line">$PrivDropToGroup root</span><br><span class="line">$InputFileName &#x2F;mnt&#x2F;tomcat-9.0.72&#x2F;logs&#x2F;localhost_access*.log</span><br><span class="line">$InputFileTag tomcat-access:</span><br><span class="line">$InputFileStateFile stat-tomcat-access</span><br><span class="line">$InputFileSeverity info</span><br><span class="line">$InputFilePersistStateInterval 25000</span><br><span class="line">$InputRunFileMonitor</span><br><span class="line"></span><br><span class="line">$InputFileName &#x2F;opt&#x2F;plugin&#x2F;nginx&#x2F;logs&#x2F;error*.log</span><br><span class="line">$lnputFileTag tomcat-error:</span><br><span class="line">$InputFileStateFile stat-tomcat-error</span><br><span class="line">$lnputFileSeverity error</span><br><span class="line">$InputFilePersistStateInterval 25000</span><br><span class="line">$InputRunFileMonitor</span><br><span class="line">*.* @192.168.1.200:514 #一个@为UDP，两个@@为TCP</span><br><span class="line"></span><br><span class="line">#如果要是只想传输配置的日志文件，那就将*.* @192.168.50.9:514换成local0.info @192.168.50.9:514(注意@前的一个空格)</span><br><span class="line">#不然会将系统的日志也一起发送过来，系统日志量不大，但是难以查找你想传的日志。</span><br></pre></td></tr></table></figure>
<h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><strong>华为交换机</strong></p>
<p>进入系统视图模式：<br><code>sys</code></p>
<p>配置发送源端口：<br><code>info-center loghost source Vlanif 2</code></p>
<p>配置推送日志等级：<br><code>info-center source default channel loghost debug level debugging</code></p>
<p>配置接收日志服务器：<br><code>info-center loghost 192.168.1.200</code></p>
<p>思科交换机:<br>(config)#logging on<br>(config)#logging 192.168.99.50<br>(config)#logging facility local4<br>(config)#logging source-interface e0</p>
<p>Ruijie锐捷：logging buffered warnings<br>logging source interface VLAN 99<br>logging facility local6<br>logging server 192.168.99.50</p>
<h3 id="Windows主机"><a href="#Windows主机" class="headerlink" title="Windows主机"></a>Windows主机</h3><p>Windows系统自带默认服务中并无发送syslog的配置功能。所以，需要借助工具来实现Windows系统发送syslog到日志服务器的场景</p>
<p>Windows系统发送syslog配置工具evtsys下载：<br>下载官方地址：<a href="https://code.google.com/archive/p/eventlog-to-syslog/downloads">https://code.google.com/archive/p/eventlog-to-syslog/downloads</a></p>
<p>evtsys工具配置：<br>下载好的安装包解压，把evtsys.exe拷贝到C:\windows\system32\evtsys.exe</p>
<p>打开cmd命令提示符，运行：<br><code>evtsys.exe -i -h 192.168.1.200 -p 514</code></p>
<p>把evtsys安装成服务，-h后面跟日志服务器和端口</p>
<p>完成配置之后，启动evtsys服务：<br><code>net start evtsys</code></p>
<h3 id="ELK部署"><a href="#ELK部署" class="headerlink" title="ELK部署"></a>ELK部署</h3><p>Elasticsearch安装（本次使用8.10版本）：<br>可以参考官网 <a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></p>
<p>本次使用proxmox里面的lxc（类似于docker)的debain模板容器创建，使用apt方式安装，最大化利用资源</p>
<p>安装完毕会生成用户名和密码，用户名是elastic，密码是一串复杂的密码。</p>
<p>安装完后需要配置jvm占用，不然多大内存都不够用：<br><code>vim /etc/elasticsearch/jvm.options</code></p>
<p>然后按说明启动即可，默认elasticsearch启动了https，访问<a href="https://ip:9200">https://ip:9200</a> 输入用户名和密码，输出一下内容即成功：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;ELK&quot;,</span><br><span class="line">&quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">&quot;cluster_uuid&quot; : &quot;pfbnB-5aQDqV2dm4DytcQw&quot;,</span><br><span class="line">&quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;8.10.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;deb&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;6d20dd8ce62365be9b1aca96427de4622e970e9e&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2023-09-19T08:16:24.564900370Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;9.7.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;7.17.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;7.0.0&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果忘记密码，可以通过<code>/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic</code>重新生成。</p>
<p>Kibana安装<br>同样使用官网安装方式，此时已经添加上了elasticsearch的repo，可以直接使用<code>apt install -y kibana</code>来安装</p>
<p>安装完毕后修改/etc/kibana/kibana.yml，填上适当的地址即可，然后启动</p>
<p>访问<a href="http://ip:5601，输入elasticsearch的用户名和密码登录，此时初始配置需要输入enrollment-token，由elasticsearch生成：">http://ip:5601，输入elasticsearch的用户名和密码登录，此时初始配置需要输入enrollment-token，由elasticsearch生成：</a><br><code>/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana</code></p>
<p>复制生成的码到窗口即可</p>
<p>进入kibana界面后，可以通过界面右上角点开profile来修改密码，相当于同时修改了elasticsearch的密码</p>
<p><img src="/archives/ca9e08db/3.png" alt=" "></p>
<h3 id="filebeat安装"><a href="#filebeat安装" class="headerlink" title="filebeat安装"></a>filebeat安装</h3><p>在rsyslog服务器上，使用官网下载的二进制文件，不用安装，直接运行</p>
<p>配置filebeat.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">filestream</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">switch</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/data/logs/192.168.101.*/*.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">filestream</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">windows-server</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/data/logs/192.168.1.*/*.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------- Elasticsearch Output ----------------------------</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;192.168.1.150:9200&quot;</span>]</span><br><span class="line">  <span class="attr">pipeline:</span> <span class="string">geoip-info</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Protocol - either `http` (default) or `https`.</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">&quot;https&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Authentication credentials - either API key or username/password.</span></span><br><span class="line">  <span class="comment">#api_key: &quot;api_key&quot;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">  <span class="attr">ssl.verification_mode:</span> <span class="string">none</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行配置文件检查：<br><code>./filebeat test config</code></p>
<blockquote>
<p>Config OK</p>
</blockquote>
<p>测试连接和输出：<br><code>./filebeat test output</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch: https://192.168.1.150:9200...</span><br><span class="line">parse url... OK</span><br><span class="line">connection...</span><br><span class="line">    parse host... OK</span><br><span class="line">    dns lookup... OK</span><br><span class="line">    addresses: 192.168.1.150</span><br><span class="line">    dial up... OK</span><br><span class="line">TLS...</span><br><span class="line">    security... WARN server<span class="string">&#x27;s certificate chain verification is disabled</span></span><br><span class="line"><span class="string">    handshake... OK</span></span><br><span class="line"><span class="string">    TLS version: TLSv1.3</span></span><br><span class="line"><span class="string">    dial up... OK</span></span><br><span class="line"><span class="string">talk to server... OK</span></span><br><span class="line"><span class="string">version: 8.10.2</span></span><br></pre></td></tr></table></figure>
<p>如果配置文件不加ssl.verification_mode: none，则会报错，因为没有配置证书进行通信</p>
<p>启动filebeat查看输出:<br><code>./filebeat -e -d publish</code></p>
<p>此时回kibana界面，可以看到有filebeat-*开头的索引，即成功输出。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型部署</title>
    <url>/archives/2c7c4db8/</url>
    <content><![CDATA[<p><img src="/archives/2c7c4db8/1.png" alt=" "></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大模型越发成熟，很多企业会尝试找到自己合适的模型进行微调和训练，最终生成一个企业AI机器人，能够帮助企业大幅提升竞争力和生产力。未来通过更好的算法研发出新的基础模型这类算法程序员固然吃香，而学习如何利用基础模型结合企业内部数据进行微调和训练的能力也显得尤为重要。</p>
<h3 id="关于微调和向量"><a href="#关于微调和向量" class="headerlink" title="关于微调和向量"></a>关于微调和向量</h3><p>在如今的数据驱动时代，大型语言模型（LLM）如GPT等已经在各种应用场景中显示出其强大的能力，从聊天机器人到自动文本生成。然而，当涉及到特定行业领域的知识学习时，通用的LLM往往不能完全满足需求。特定行业（如医疗、法律、金融等）有其专有术语和上下文，这些通常不在通用LLM的训练数据中。因此，如何使LLM具有行业特定的知识和应用能力成为了一个迫切需要解决的问题。</p>
<p><strong>基础概念</strong></p>
<p>微调（Finetune）：微调是一种让预先训练好的模型适应特定任务或数据集的方法。在这种情况下，一个已经训练好的大型语言模型会进一步在行业特定的数据集上进行训练。</p>
<p>向量数据库（Vector Database）：向量数据库是一种存储特定信息和知识的数据库，可以在运行时与LLM合作，为其提供行业特定的信息。这通常通过嵌入（存储）向量（embedding vectors）来实现，这些向量可以表示文本、概念或任何其他类型的数据。</p>
<p><strong>主体解决方案</strong></p>
<p>在行业特定的大型语言模型（LLM）知识学习方面，有两个主要的解决方案：大模型微调（Finetune）和向量数据库（Vector Database）知识存储。</p>
<p>微调方案涉及在特定行业数据集上进一步训练一个预先训练好的LLM，使其更好地理解和应用行业专有术语和概念。这种方法在模型理解和生成连贯文本方面表现优越，但需要大量的计算资源和高质量的数据集。</p>
<p>另一方面，向量数据库方案则是通过在运行时与一个存储有行业特定信息的数据库进行交互，来丰富LLM的应用范围。这种方法在动态更新和资源效率方面有优势，但可能会增加运行时的延迟和系统复杂性。</p>
<p>OpenAI也针对这两种方案给出了自己的见解：Question answering using embeddings-based search</p>
<p><strong>微调（Finetune）的优缺点</strong></p>
<p>优点</p>
<p>上下文理解：微调模型会更好地理解行业特定的术语和概念，从而能更精准地解答相关问题。</p>
<p>连贯性和一致性：由于模型是在特定的数据集上训练的，因此其生成的文本将更加连贯和一致。</p>
<p>缺点</p>
<p>高成本和资源消耗：微调过程通常需要大量的计算资源和时间。</p>
<p>数据依赖性：模型的效能高度依赖于用于微调的数据集的质量。</p>
<p><strong>向量数据库（Vector Database）的优缺点</strong></p>
<p>优点</p>
<p>动态更新：向量数据库可以更容易地进行更新和维护。</p>
<p>资源效率：与微调相比，使用向量数据库通常需要较少的计算资源。</p>
<p>缺点</p>
<p>运行时延迟：数据库查询可能会增加处理时间。</p>
<p>复杂性：需要维护一个额外的数据库，并确保它与LLM良好地集成。</p>
<p><strong>综合建议</strong></p>
<p>混合使用：对于需要即时更新信息的应用场景，推荐使用微调和向量数据库的混合方法。</p>
<p>数据质量：无论选择哪种方法，都应确保使用的数据集具有高质量和可靠性。</p>
<p>性能考量：如果资源有限，向量数据库可能是一个更经济、更灵活的选择。</p>
<p><strong>总结</strong></p>
<p>行业特定的LLM知识学习是一个复杂但重要的课题。通过微调和使用向量数据库，我们可以让LLM更好地适应特定行业的需求。选择哪一种方法取决于多种因素，包括数据质量、可用资源和特定应用的需求。</p>
<h2 id="基础模型选择和加载方案"><a href="#基础模型选择和加载方案" class="headerlink" title="基础模型选择和加载方案"></a>基础模型选择和加载方案</h2><p>优秀的模型有很多，具体可以看SuperCLUE的最新榜单，列出了通用中文大模型的排行。</p>
<p>其中最好的国外大模型社区huggingface，网站<a href="https://huggingface.co/">https://huggingface.co/</a></p>
<p>国内魔塔社区，网站<a href="https://modelscope.cn/models">https://modelscope.cn/models</a><br>都可以尝试体验基础模型或通过分享的模型</p>
<p>从榜单中，我们选择了开源的Chatglm2-6B，Llama2-7B做单机部署测试</p>
<p>使用Langchain加载大模型是一种简单快捷的大模型对话的部署方案，其中有开源项目LangChain-Chatchat（项目地址：<a href="https://github.com/chatchat-space/Langchain-Chatchat），一种利用">https://github.com/chatchat-space/Langchain-Chatchat），一种利用</a> langchain 思想实现的基于本地知识库的问答应用，目标期望建立一套对中文场景与开源模型支持友好、可离线运行的知识库问答解决方案。</p>
<p>LangChain-Chatchat  使用 FastChat 进行本地 LLM 模型接入，支持众多模型；同时支持调用 HuggingFace 中的 Embedding 模型。</p>
<p>通过配置文件配置大模型路径，Embedding模型路径即可快速搭建基于streamlit的web界面进行问答。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><p>操作系统：Ubuntu 22.04</p>
<p>CPU：Intel I7-10700</p>
<p>内存：DDR4 16G</p>
<p>显卡：RTX 3090 24G 公版</p>
<p>存储：SSD 500G</p>
<h3 id="安装显卡驱动和CUDA软件"><a href="#安装显卡驱动和CUDA软件" class="headerlink" title="安装显卡驱动和CUDA软件"></a>安装显卡驱动和CUDA软件</h3><p>安装完Ubuntu后会安装Nvidia显卡驱动，但没有安装CUDA，先运行<code>nvidia-smi</code>来取得该显卡支持的CUDA版本</p>
<p><img src="/archives/2c7c4db8/2.png" alt=" "></p>
<p>这里看到该驱动支持的CUDA版本为122，然后到官网下载：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
<p><img src="/archives/2c7c4db8/3.png" alt=" "></p>
<p>运行对应的命令即可，运行时只选择CUDA软件即可，不用选择安装驱动。</p>
<p>安装完毕后，运行：<br><code>python -c &quot;import torch; print(torch.cuda.is_available());&quot;</code><br>来确认CUDA是否可用，如果显示True则正常。</p>
<h3 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h3><p>conda (<a href="https://docs.conda.io/en/latest/">https://docs.conda.io/en/latest/</a>) 是由 Anaconda 开发的开源跨平台语言无关的包管理器。它用于安装各种包，可以用于Python，R，Ruby，Lua，Scala，Java，JavaScript，C/ C++，FORTRAN等等，尽管Python是最常见的使用情况。</p>
<p>同时，conda也是一个环境管理系统，用于在同一机器上创建有不同Python版本或包集合的隔离环境。</p>
<p>conda在大数据科学、机器学习、深度学习和相关领域特别受欢迎，这是因为它能很好地处理具有复杂依赖关系的大型科学计算包，比如NumPy，SciPy，Pandas等。</p>
<p>conda的优点之一是它的跨平台性，它可以在Windows，macOS和Linux上运行。此外，conda也支持二进制包，这意味着在安装包时无需从源代码编译，这通常比使用Python的默认包管理器pip更快，更容易。</p>
<p>1.下载Anaconda<br>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&amp;O=D">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&amp;O=D</a><br>选择合适的版本下载到本地，本次下载了Anaconda3-2023.07-2-Linux-x86_64.sh，再通过lrzsz工具或者winscp上传到主机</p>
<p>2、安装Anaconda<br><code>sudo chmod a+x Anaconda3-2023.07-2-Linux-x86_64.sh</code><br><code>sh Anaconda3-2023.07-2-Linux-x86_64.sh</code></p>
<p>3、启动环境<br>默认Anaconda安装到/home/xxx/anaconda3目录下（xxx为当前用户）<br>运行<code>source ~/.bashrc</code>进入了base环境</p>
<p>4、conda常用命令<br>创建环境：<br><code>conda create -n 环境名</code></p>
<p>激活环境：<br><code>conda activate 环境名</code></p>
<p>显示所有已经创建的环境：<br><code>conda info -e</code>或<code>conda env list</code></p>
<p>删除环境:<br><code>conda remove --name 环境名 --all</code></p>
<p>其他，参考<a href="https://www.cnblogs.com/ghj1976/p/venv-vs-conda.html">https://www.cnblogs.com/ghj1976/p/venv-vs-conda.html</a></p>
<h2 id="部署大模型"><a href="#部署大模型" class="headerlink" title="部署大模型"></a>部署大模型</h2><h3 id="ChatGLM2-6B"><a href="#ChatGLM2-6B" class="headerlink" title="ChatGLM2-6B"></a>ChatGLM2-6B</h3><p><a href="https://github.com/THUDM/ChatGLM2-6B">https://github.com/THUDM/ChatGLM2-6B</a></p>
<h3 id="Llama"><a href="#Llama" class="headerlink" title="Llama"></a>Llama</h3><p><a href="https://github.com/FlagAlpha/Llama2-Chinese">https://github.com/FlagAlpha/Llama2-Chinese</a></p>
<p>部署大模型LLaMA/Qwen-7B的过程中，需要安装量化工具包bitsandbytes，在conda python环境下，通过pip install bitsandbytes直接安装，或是按源码编译安装，在python -m bitsandbytes检测时均出现异常，</p>
<p>问题解决</p>
<p>在环境变量LD_LIBRARY_PATH中增加CUDA的lib路径:<br><code>export PATH=/usr/local/cuda-12.2/bin:$PATH</code><br><code>export LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:$LD_LIBRARY_PATH</code><br>然后重新安装bitsandbytes即可：<br><code>pip uninstall bitsandbytes</code><br><code>pip install bitsandbytes</code></p>
<h3 id="Lang-Chain"><a href="#Lang-Chain" class="headerlink" title="Lang-Chain"></a>Lang-Chain</h3><p>参考项目地址：<a href="https://github.com/chatchat-space/Langchain-Chatchat">https://github.com/chatchat-space/Langchain-Chatchat</a></p>
<p>model.py配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(base) tbk@LLM-PC:/app/Langchain-Chatchat$ vim configs/model_config.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line">LOG_FORMAT = <span class="string">&quot;%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s&quot;</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line">logging.basicConfig(format=LOG_FORMAT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在以下字典中修改属性值，以指定本地embedding模型存储位置</span></span><br><span class="line"><span class="comment"># 如将 &quot;text2vec&quot;: &quot;GanymedeNil/text2vec-large-chinese&quot; 修改为 &quot;text2vec&quot;: &quot;User/Downloads/text2vec-large-chinese&quot;</span></span><br><span class="line"><span class="comment"># 此处请写绝对路径</span></span><br><span class="line">embedding_model_dict = &#123;</span><br><span class="line">    <span class="comment">#&quot;ernie-tiny&quot;: &quot;nghuyong/ernie-3.0-nano-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;ernie-base&quot;: &quot;nghuyong/ernie-3.0-base-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;text2vec-base&quot;: &quot;shibing624/text2vec-base-chinese&quot;,</span></span><br><span class="line">    <span class="string">&quot;text2vec&quot;</span>: <span class="string">&quot;/app/Langchain-Chatchat/text2vec/text2vec-large-chinese&quot;</span>,</span><br><span class="line">    <span class="comment">#&quot;text2vec-paraphrase&quot;: &quot;shibing624/text2vec-base-chinese-paraphrase&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;text2vec-sentence&quot;: &quot;shibing624/text2vec-base-chinese-sentence&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;text2vec-multilingual&quot;: &quot;shibing624/text2vec-base-multilingual&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;text2vec-bge-large-chinese&quot;: &quot;shibing624/text2vec-bge-large-chinese&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;m3e-small&quot;: &quot;moka-ai/m3e-small&quot;,</span></span><br><span class="line">    <span class="string">&quot;m3e-base&quot;</span>: <span class="string">&quot;/app/Langchain-Chatchat/m3e-base&quot;</span>,</span><br><span class="line">    <span class="comment">#&quot;m3e-large&quot;: &quot;moka-ai/m3e-large&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;bge-small-zh&quot;: &quot;BAAI/bge-small-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;bge-base-zh&quot;: &quot;BAAI/bge-base-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;bge-large-zh&quot;: &quot;BAAI/bge-large-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;bge-large-zh-noinstruct&quot;: &quot;BAAI/bge-large-zh-noinstruct&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;piccolo-base-zh&quot;: &quot;sensenova/piccolo-base-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;piccolo-large-zh&quot;: &quot;sensenova/piccolo-large-zh&quot;,</span></span><br><span class="line">    <span class="comment">#&quot;text-embedding-ada-002&quot;: os.environ.get(&quot;OPENAI_API_KEY&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选用的 Embedding 名称</span></span><br><span class="line">EMBEDDING_MODEL = <span class="string">&quot;m3e-base&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Embedding 模型运行设备。设为&quot;auto&quot;会自动检测，也可手动设定为&quot;cuda&quot;,&quot;mps&quot;,&quot;cpu&quot;其中之一。</span></span><br><span class="line">EMBEDDING_DEVICE = <span class="string">&quot;auto&quot;</span></span><br><span class="line"></span><br><span class="line">llm_model_dict = &#123;</span><br><span class="line"><span class="comment">#    &quot;chatglm-6b&quot;: &#123;</span></span><br><span class="line"><span class="comment">#        &quot;local_model_path&quot;: &quot;THUDM/chatglm-6b&quot;,</span></span><br><span class="line"><span class="comment">#        &quot;api_base_url&quot;: &quot;http://localhost:8888/v1&quot;,  # &quot;name&quot;修改为fastchat服务中的&quot;api_base_url&quot;</span></span><br><span class="line"><span class="comment">#        &quot;api_key&quot;: &quot;EMPTY&quot;</span></span><br><span class="line"><span class="comment">#    &#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Chatglm2-6b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;local_model_path&quot;</span>: <span class="string">&quot;/app/ChatGLM2-6B/THUDM/chatglm2-6b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api_base_url&quot;</span>: <span class="string">&quot;http://192.168.15.200:8888/v1&quot;</span>,  <span class="comment"># URL需要与运行fastchat服务端的server_config.FSCHAT_OPENAI_API一致</span></span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Llama-2-7B-hf&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;local_model_path&quot;</span>: <span class="string">&quot;Llama2-Chinese-7b-Chat&quot;</span>,  <span class="comment"># &quot;THUDM/chatglm2-6b-32k&quot;,</span></span><br><span class="line">        <span class="string">&quot;api_base_url&quot;</span>: <span class="string">&quot;http://192.168.15.200:8888/v1&quot;</span>,  <span class="comment"># &quot;URL需要与运行fastchat服务端的server_config.FSCHAT_OPENAI_API一致</span></span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Phoenix-inst-chat-7b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;local_model_path&quot;</span>: <span class="string">&quot;/app/phoenix-inst-chat-7b&quot;</span>,  <span class="comment"># &quot;THUDM/chatglm2-6b-32k&quot;,</span></span><br><span class="line">        <span class="string">&quot;api_base_url&quot;</span>: <span class="string">&quot;http://192.168.15.200:8888/v1&quot;</span>,  <span class="comment"># &quot;URL需要与运行fastchat服务端的server_config.FSCHAT_OPENAI_API一致</span></span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Qwen-7B-Chat&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;local_model_path&quot;</span>: <span class="string">&quot;/app/Qwen-7B-Chat&quot;</span>,  <span class="comment"># &quot;THUDM/chatglm2-6b-32k&quot;,</span></span><br><span class="line">        <span class="string">&quot;api_base_url&quot;</span>: <span class="string">&quot;http://192.168.15.200:8888/v1&quot;</span>,  <span class="comment"># &quot;URL需要与运行fastchat服务端的server_config.FSCHAT_OPENAI_API一致</span></span><br><span class="line">        <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;EMPTY&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用chatgpt时如果报出： urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host=&#x27;api.openai.com&#x27;, port=443):</span></span><br><span class="line">    <span class="comment">#  Max retries exceeded with url: /v1/chat/completions</span></span><br><span class="line">    <span class="comment"># 则需要将urllib3版本修改为1.25.11</span></span><br><span class="line">    <span class="comment"># 如果依然报urllib3.exceptions.MaxRetryError: HTTPSConnectionPool，则将https改为http</span></span><br><span class="line">    <span class="comment"># 参考https://zhuanlan.zhihu.com/p/350015032</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果报出：raise NewConnectionError(</span></span><br><span class="line">    <span class="comment"># urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPSConnection object at 0x000001FE4BDB85E0&gt;:</span></span><br><span class="line">    <span class="comment"># Failed to establish a new connection: [WinError 10060]</span></span><br><span class="line">    <span class="comment"># 则是因为内地和香港的IP都被OPENAI封了，需要切换为日本、新加坡等地</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果出现WARNING: Retrying langchain.chat_models.openai.acompletion_with_retry.&lt;locals&gt;._completion_with_retry in</span></span><br><span class="line">    <span class="comment"># 4.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.</span></span><br><span class="line">    <span class="comment"># 需要添加代理访问(正常开的代理软件可能会拦截不上)需要设置配置openai_proxy 或者 使用环境遍历OPENAI_PROXY 进行设置</span></span><br><span class="line">    <span class="comment"># 比如: &quot;openai_proxy&quot;: &#x27;http://127.0.0.1:4780&#x27;</span></span><br><span class="line"><span class="comment">#    &quot;gpt-3.5-turbo&quot;: &#123;</span></span><br><span class="line"><span class="comment">#        &quot;api_base_url&quot;: &quot;https://api.openai.com/v1&quot;,</span></span><br><span class="line"><span class="comment">#        &quot;api_key&quot;: os.environ.get(&quot;OPENAI_API_KEY&quot;),</span></span><br><span class="line"><span class="comment">#        &quot;openai_proxy&quot;: os.environ.get(&quot;OPENAI_PROXY&quot;)</span></span><br><span class="line"><span class="comment">#    &#125;,</span></span><br><span class="line">    <span class="comment"># 线上模型。当前支持智谱AI。</span></span><br><span class="line">    <span class="comment"># 如果没有设置有效的local_model_path，则认为是在线模型API。</span></span><br><span class="line">    <span class="comment"># 请在server_config中为每个在线API设置不同的端口</span></span><br><span class="line">    <span class="comment"># 具体注册及api key获取请前往 http://open.bigmodel.cn</span></span><br><span class="line"><span class="comment">#    &quot;chatglm-api&quot;: &#123;</span></span><br><span class="line"><span class="comment">#        &quot;api_base_url&quot;: &quot;http://127.0.0.1:8888/v1&quot;,</span></span><br><span class="line"><span class="comment">#        &quot;api_key&quot;: os.environ.get(&quot;ZHIPUAI_API_KEY&quot;),</span></span><br><span class="line"><span class="comment">#        &quot;provider&quot;: &quot;ChatGLMWorker&quot;,</span></span><br><span class="line"><span class="comment">#        &quot;version&quot;: &quot;chatglm_pro&quot;,  # 可选包括 &quot;chatglm_lite&quot;, &quot;chatglm_std&quot;, &quot;chatglm_pro&quot;</span></span><br><span class="line"><span class="comment">#    &#125;,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># LLM 名称</span></span><br><span class="line">LLM_MODEL = <span class="string">&quot;Chatglm2-6b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 历史对话轮数</span></span><br><span class="line">HISTORY_LEN = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LLM 运行设备。设为&quot;auto&quot;会自动检测，也可手动设定为&quot;cuda&quot;,&quot;mps&quot;,&quot;cpu&quot;其中之一。</span></span><br><span class="line">LLM_DEVICE = <span class="string">&quot;auto&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存储路径</span></span><br><span class="line">LOG_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), <span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LOG_PATH):</span><br><span class="line">    os.mkdir(LOG_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识库默认存储路径</span></span><br><span class="line">KB_ROOT_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), <span class="string">&quot;knowledge_base&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库默认存储路径。</span></span><br><span class="line"><span class="comment"># 如果使用sqlite，可以直接修改DB_ROOT_PATH；如果使用其它数据库，请直接修改SQLALCHEMY_DATABASE_URI。</span></span><br><span class="line">DB_ROOT_PATH = os.path.join(KB_ROOT_PATH, <span class="string">&quot;info.db&quot;</span>)</span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">f&quot;sqlite:///<span class="subst">&#123;DB_ROOT_PATH&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选向量库类型及对应配置</span></span><br><span class="line">kbs_config = &#123;</span><br><span class="line">    <span class="string">&quot;faiss&quot;</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;milvus&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="string">&quot;19530&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;pg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connection_uri&quot;</span>: <span class="string">&quot;postgresql://postgres:postgres@127.0.0.1:5432/langchain_chatchat&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认向量库类型。可选：faiss, milvus, pg.</span></span><br><span class="line">DEFAULT_VS_TYPE = <span class="string">&quot;faiss&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存向量库数量</span></span><br><span class="line">CACHED_VS_NUM = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识库中单段文本长度</span></span><br><span class="line">CHUNK_SIZE = <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识库中相邻文本重合长度</span></span><br><span class="line">OVERLAP_SIZE = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识库匹配向量数量</span></span><br><span class="line">VECTOR_SEARCH_TOP_K = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 知识库匹配相关度阈值，取值范围在0-1之间，SCORE越小，相关度越高，取到1相当于不筛选，建议设置在0.5左右</span></span><br><span class="line">SCORE_THRESHOLD = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎匹配结题数量</span></span><br><span class="line">SEARCH_ENGINE_TOP_K = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nltk 模型存储路径</span></span><br><span class="line">NLTK_DATA_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), <span class="string">&quot;nltk_data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于本地知识问答的提示词模版（使用Jinja2语法，简单点就是用双大括号代替f-string的单大括号</span></span><br><span class="line">PROMPT_TEMPLATE = <span class="string">&quot;&quot;&quot;&lt;指令&gt;根据已知信息，简洁和专业的来回答问题。如果无法从中得到答案，请说 “根据已知信息无法回答该问题”，不允许在答案中添加编造成分，答案请</span></span><br><span class="line"><span class="string">使用中文。 &lt;/指令&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;已知信息&gt;&#123;&#123; context &#125;&#125;&lt;/已知信息&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;问题&gt;&#123;&#123; question &#125;&#125;&lt;/问题&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API 是否开启跨域，默认为False，如果需要开启，请设置为True</span></span><br><span class="line"><span class="comment"># is open cross domain</span></span><br><span class="line">OPEN_CROSS_DOMAIN = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing 搜索必备变量</span></span><br><span class="line"><span class="comment"># 使用 Bing 搜索需要使用 Bing Subscription Key,需要在azure port中申请试用bing search</span></span><br><span class="line"><span class="comment"># 具体申请方式请见</span></span><br><span class="line"><span class="comment"># https://learn.microsoft.com/en-us/bing/search-apis/bing-web-search/create-bing-search-service-resource</span></span><br><span class="line"><span class="comment"># 使用python创建bing api 搜索实例详见:</span></span><br><span class="line"><span class="comment"># https://learn.microsoft.com/en-us/bing/search-apis/bing-web-search/quickstarts/rest/python</span></span><br><span class="line">BING_SEARCH_URL = <span class="string">&quot;https://api.bing.microsoft.com/v7.0/search&quot;</span></span><br><span class="line"><span class="comment"># 注意不是bing Webmaster Tools的api key，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此外，如果是在服务器上，报Failed to establish a new connection: [Errno 110] Connection timed out</span></span><br><span class="line"><span class="comment"># 是因为服务器加了防火墙，需要联系管理员加白名单，如果公司的服务器的话，就别想了GG</span></span><br><span class="line">BING_SUBSCRIPTION_KEY = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启中文标题加强，以及标题增强的相关配置</span></span><br><span class="line"><span class="comment"># 通过增加标题判断，判断哪些文本为标题，并在metadata中进行标记；</span></span><br><span class="line"><span class="comment"># 然后将文本与往上一级的标题进行拼合，实现文本信息的增强。</span></span><br><span class="line">ZH_TITLE_ENHANCE = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>最后运行sudo python startup.py -a，出现地址和端口复制到浏览器访问即可</p>
<h3 id="大模型知识搬运"><a href="#大模型知识搬运" class="headerlink" title="大模型知识搬运"></a>大模型知识搬运</h3><p>1、大模型介绍和概述：<br><a href="https://blog.csdn.net/qq_56591814/article/details/131162128">LLMs模型速览（GPTs、LaMDA、GLM/ChatGLM、PaLM/Flan-PaLM、BLOOM、LLaMA、Alpaca）</a></p>
<p>2、最新最全AI大模型资料和仓库：<br><a href="https://www.datalearner.com/ai-models/pretrained-models?&amp;aiArea=-1&amp;language=-1&amp;contextLength=-1&amp;openSource=-1&amp;publisher=-1">AI大模型列表</a></p>
<p>3、行业特定的LLM知识学习课题：<br><a href="https://zhuanlan.zhihu.com/p/635574487">微调（Finetune）与向量数据库（Vector Database）的比较与应用</a></p>
<p>4、AIGC基础知识杂谈：大模型、多模态、预训练、扩散模型：<br><a href="https://zhuanlan.zhihu.com/p/635574487">大模型、多模态、预训练、扩散模型等基础理论</a></p>
<p>5、部署ChatGPT3.5需要的硬件成本：<br><a href="https://blog.csdn.net/qq_31765191/article/details/129860244">GPT-3.5(ChatGPT)训练和部署成本估算</a></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS实体机救援和虚拟化</title>
    <url>/archives/54422da7/</url>
    <content><![CDATA[<p><img src="/archives/54422da7/1.png" alt=" "></p>
<h2 id="服务器磁盘坏救援"><a href="#服务器磁盘坏救援" class="headerlink" title="服务器磁盘坏救援"></a>服务器磁盘坏救援</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>生产环境上有一台服务商提供的mini pc做服务器，安装了CentOS 7，提供中转服务，该PC使用单个64G msata的固态硬盘做系统盘和数据盘，最近发现硬盘有坏道，导致服务有问题，不想花钱修只能自己想办法搞定。目前有两种方法补救，趁磁盘还没完全挂，把数据和服务安装包备份新建一台虚拟机重新部署，没有部署文档，这个方法比较耗时；另外一种方法是先硬盘对拷，把系统备份一份，再虚拟化导入到KVM或者现有的nutanix超融合，从根本解决单点服务器故障，不再被卡脖子。</p>
<h3 id="系统备份救援"><a href="#系统备份救援" class="headerlink" title="系统备份救援"></a>系统备份救援</h3><p>系统对拷备份有很多软件可以实现，鼎鼎大名的GHOST硬盘对拷，DG或者ATI软件都可以实现。</p>
<p>本次使用DG软件的硬盘对拷功能，操作比较简单，从WINPE（用的是优启通的WINPE）启动DG，从界面直接操作就行，对拷完毕后，拔掉原硬盘，从新硬盘启动，发现启动不了，左上角只有一白点在闪，网上查阅资料是丢失了CentOS的启动菜单。在这步卡住了很久，最后找到一篇文章修复启动菜单。</p>
<h3 id="修复启引导菜单"><a href="#修复启引导菜单" class="headerlink" title="修复启引导菜单"></a>修复启引导菜单</h3><p>一、恢复centos的引导</p>
<p>1、用centos iso 制作启动u盘，或者使用刻录光盘启动盘进入到安装centos的界面，开机选择的时候不要选择安装centos,而是选择troubleshooting疑难解答选项，然后选择rescue a centos system。</p>
<p>按tab键选择continue (一定要选），然后选择ok.</p>
<p>2、进入命令行界面，输入：<br><code>chroot /mnt/sysimage</code></p>
<p>接着就是重要的一步，安装grub2了。执行以下命令：<br><code>/sbin/grub2-install /dev/sda</code></p>
<p>安装成功后执行reboot重新启动系统。这只是又把centos的启动项找回来了，windows的引导要在之后通过grub2来完成。</p>
<p>二、恢复windows的引导</p>
<p>1、之后的恢复就很简单了，重新启动系统之后centos系统就能打开了，可以通过grub2的功能实现windows的引导。</p>
<p>2、打开终端，在root用户下执行下面的命令：<br><code>grub2-mkconfig -o /boot/grub2/grub.conf</code></p>
<p>系统自动找到了windows 8 系统与xp系统的引导项，并加入到了grub.conf菜单中。这样就避免了手功改动文件的危险，并且所有系统都能正常启动。</p>
<p>参考网站：<a href="https://www.jb51.net/os/redhat/278733.html?ivk_sa=1024320u">https://www.jb51.net/os/redhat/278733.html?ivk_sa=1024320u</a></p>
<p>修复成功后，终于可以正常进入系统，测试服务一切正常，好在服务商并没有做硬件授权绑定，不然只能给钱搞。</p>
<h2 id="CentOS物理机虚拟化"><a href="#CentOS物理机虚拟化" class="headerlink" title="CentOS物理机虚拟化"></a>CentOS物理机虚拟化</h2><p>系统正常启动后，下一步就是把系统虚拟化。</p>
<p>首先，下载qemu-img工具：</p>
<p><code>yum install -y qemu-img</code></p>
<p>使用df -h查看磁盘信息</p>
<p>转换物理磁盘到vmdk镜像：</p>
<p><code>qemu-img convert -O vmdk /dev/sda /VMDISK/vm102.vmdk -p</code></p>
<p>其中可以带-c参数，带压缩，但不建议使用，加上这个参数很可能会转换失败，-O 后面是虚拟磁盘格式，/dev/sda是物理磁盘，vm102.vmdk是虚拟磁盘，-p是让qemu-img显示进度。</p>
<h2 id="导入虚拟磁盘到Proxmox-KVM-和Nutanix-AHV"><a href="#导入虚拟磁盘到Proxmox-KVM-和Nutanix-AHV" class="headerlink" title="导入虚拟磁盘到Proxmox(KVM)和Nutanix(AHV)"></a>导入虚拟磁盘到Proxmox(KVM)和Nutanix(AHV)</h2><h3 id="导入到PVE"><a href="#导入到PVE" class="headerlink" title="导入到PVE"></a>导入到PVE</h3><p>转换成功后，可以通过scp命令传输到PVE主机：</p>
<p><code>scp /VMDISK/vm102.vmdk 192.168.1.40:/VMDISK</code></p>
<p>输入账号密码后就开始传输。另外本地Windows主机可以通过WINSCP工具连接CentOS物理机，把镜像拷贝到本机，再上传到PVE主机。</p>
<p>传输完毕后，PVE新建虚拟机，这里虚拟机ID为102，建立虚拟机后执行：</p>
<p><code>qm importdisk 102 vm102.vmdk local -format qcow2</code></p>
<p>等待导入成功后，到PVE控制面板虚拟机硬件界面，就可以看到一个未使用的磁盘，把它挂载到虚拟机开机即可。</p>
<h3 id="导入到Nutanix-AHV"><a href="#导入到Nutanix-AHV" class="headerlink" title="导入到Nutanix(AHV)"></a>导入到Nutanix(AHV)</h3><p>使用WINSCP拷贝一份镜像到本机，通过nutanix的prism镜像页面上传镜像即可。</p>
<p>上传完毕后，同样新建一个虚拟机，此时磁盘选择上传的镜像链接即可，比较简单。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>亲共的蒋介石，把儿子送到了苏联</title>
    <url>/archives/c0a28d53/</url>
    <content><![CDATA[<p><img src="/archives/c0a28d53/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木 首发于2020-8</p>
<p>蒋经国，蒋介石的亲儿子和事业继承人，1910年4月27日出生于浙江奉化。</p>
<p>年仅15岁蒋经国就被蒋介石亲手送到了苏联留学，随后加入了苏联共产党.</p>
<p>蒋经国在苏联生活了足足12年，并娶了一位苏联女子芬娜（后改名蒋方良）为妻。</p>
<p><img src="/archives/c0a28d53/2.png" alt="蒋经国结婚照"></p>
<p>蒋介石和苏联共产党的关系，曾经好的不得了。 </p>
<hr>
<center><font color="orange" size="4">蒋介石访问苏联</font></center>

<hr>
<p>1920年代的中国，军阀混战，但每一个军阀背后都是有靠山的。</p>
<p>皖系和奉系的靠山是日本人，吴佩孚和孙传芳的后台是英美，几乎每一个欧洲列强在中国都有自己的代理人。</p>
<p>1922年6月16日，陈炯明叛变革命，炮轰总统府，迫使孙中山流亡，中国的革命事业面临极度的困难。</p>
<p>依靠地方军阀干革命，这条路是行不通了。</p>
<p>1922年12月30日，俄罗斯、南高加索、乌克兰和白俄罗斯等4个加盟共和国成立了苏联。</p>
<p>新生的苏联遭到了整个西方世界的排斥，不得不依靠自己的力量努力的寻找盟友。</p>
<p>而在沦为欧美列强殖民地的中国，孙中山同样在寻找盟友，双方可谓是天作之合。</p>
<p>1923年8月16日，蒋介石率孙中山代表团从上海出发，并于9月2日抵达莫斯科。</p>
<p>1923年9月7日，蒋介石同俄共（布）中央书记鲁祖塔克举行会谈，在会谈中蒋介石说：</p>
<blockquote>
<p>“国民党一向认为，苏联共产党是自己的姐妹党。”</p>
</blockquote>
<p>会谈在亲切友好的氛围中结束了，然后蒋介石在苏联呆了足足3个月，和苏联共产党建立了非常深厚的友谊，苏联非常看好蒋介石这个人。</p>
<p>归国时，蒋介石已经代表孙中山和苏联达成了盟友关系，并谈妥了条件。</p>
<p>1924年1月，中国国民党在广东召开了第一次全国代表大会，改组国民党，选举共产党员加入了国民党的中央领导组织。</p>
<p>在大会上，孙中山重新解释了三民主义，提出了<font color="red">“联俄、联共、扶助农工”</font>等重大政策，实现了第一次国共合作。</p>
<p>1924年6月，苏联和中国共产党帮助国民党在广州成立了黄埔军校。</p>
<font color="red">钱是苏联出的，武器是苏联给的，教官是苏联派的。</font>

<p>深得苏联器重的蒋介石，任黄埔军校校长，共产党人周恩来，任黄埔军校政治部主任。</p>
<font color="red">苏联最高政治顾问鲍罗廷，甚至被蒋介石公开称之为“亚父”。</font>

<p>创立初期的黄埔军校，是非常红的，简直可以说是共产党的军校。</p>
<p>这不奇怪，因为这本来就是由苏联主导创办的。</p>
<p>1925年3月12日，孙中山先生去世。</p>
<p>此时的国民党，大部分力量都来自于苏联，所以非常的亲苏。</p>
<p>1925年4月，蒋介石在黄埔军校、部队等场合频频发表亲苏讲话：</p>
<blockquote>
<p>“三民主义和共产主义都是为无产阶级奋斗以求生存的。”<br>“俄国人来帮助我们，是为求中国之自由平等。”<br>“我们要党成功，主义实现，一定要仿效俄国共产党的办法。”<br>“在我们党军里，没有什么共产派与反共产派，完全以三民主义为中心，完成国民革命。”</p>
</blockquote>
<p>1925年10月，蒋介石派出自己年仅15岁的亲生长子蒋经国去苏联留学，并迅速加入苏联共产党。</p>
<p>1925年12月，中国共产党总书记陈独秀在发表的文章中，把蒋介石列为仅次于汪精卫的国民党领袖。</p>
<p>1926年2月的共产国际全会上，中国国民党被吸收为共产国际的同情党，也就是准共产党，同时大会选举<font color="red">蒋介石为共产国际执委主席团名誉常委。</font></p>
<p>这是当时中国人在共产国际里拿到的最高职位，<font color="red">也就是说当时蒋介石在共产国际里的地位，比中国共产党领袖还要高。</font></p>
<p>1926年4月，广州国民党中央召开了全国第二次代表大会，汪精卫重申孙中山先生的联俄联共扶助工农三大政策，汪精卫说：</p>
<blockquote>
<p>“西山会议派打出反对联俄联共的旗帜，就是打出反对孙中山先生的旗帜，所以成为总理的叛徒，革命的蟊贼。”</p>
</blockquote>
<p>随后，苏联给予了国民党政府高达数百万美元的军事援助，以武器装备等形式直接提供。</p>
<p>1926年7月，北伐开始，北伐军势如破竹的消灭了各路军阀，举国震动。</p>
<p>吴佩孚和孙传芳被消灭后，急了眼的张作霖不顾一切的强闯苏联大使馆抓捕共产党人，并搜出了蒋介石和冯玉祥向苏联借款的契约书以及苏联向北伐军提供武器的装备清单并公诸于众。</p>
<p>李大钊及其17岁的女儿，也在这一次武装突袭苏联大使馆的行动中被张作霖抓获，随后惨遭杀害。</p>
<p>但张作霖的反革命行为在北伐大势面前也只是螳臂当车，蒋介石率领的北伐军依然势如破竹，将中国最富饶的经济精华区悉数占领。<br>然后，问题来了。 </p>
<hr>
<center><font color="orange" size="4">叛变工农的蒋介石</font></center>

<hr>
<p>北伐取得了辉煌的成果后，就是消化吸收胜利果实的时候了，然后再加一把力，就可以解放全国。</p>
<p>按之前的约定，中国国民党负责枪杆子打天下，而中国共产党负责在农村发动农民，在城市发动工人，最后联手打造一个新的中国。<br>这时候，虞恰卿来了。</p>
<p>虞恰卿，上海金融界的绝对大佬，连黄金荣和杜月笙等人见了面都要尊称一声“大哥”，背后是整个江浙财阀，依靠和英美贸易赚钱，超级买办，可以说是英美在华利益的代言人。</p>
<p>共产党在上海搞的工人运动，极大的损害了他们的利益，已经突破了他们可以容忍的底线。</p>
<p>在上海，虞恰卿数次和蒋介石会谈，试探其革命态度。</p>
<blockquote>
<p>虞：你们国民党人的口号是扶助工农，我们有钱人怎么办？<br>蒋：穷赤佬，怎么靠得住？<br>虞：你们北伐军要打倒列强，我们跟洋人做生意，我们怎么办？<br>蒋：洋人怎么打得倒？</p>
</blockquote>
<p>1927年2月，在探明了蒋介石态度后，虞恰卿代表江浙财阀，和蒋介石谈条件。</p>
<p>苏联可是条大腿，北伐军力量的源头，蒋介石的亲儿子还在苏联留学，而苏联的要求就是发动工农，打倒大地主和大资本家，这有什么好谈的呢？</p>
<p>这事本来是没得谈的，但架不住江浙财阀开出的条件实在太高了。</p>
<p>虞恰卿在沟通了江浙财阀后，向蒋介石承诺了每年6000万大洋的资助，且可以代蒋介石沟通英美购买军火，并获得英美的国际支持。</p>
<p>这个条件实在高的有点离谱了，要知道和苏联结盟三年，拿到的支持平均下来每年也不过七八百万大洋。</p>
<p>1927年3月29日，上海商业联合会认捐了500万银元。</p>
<p>1927年4月1日，又给蒋介石提供了300万银元。</p>
<p>上海棉纺业的荣宗敬说：</p>
<blockquote>
<p>“要铜钱用，我有，做事体请洽卿、晓籁两位老哥，(钱)要多少，我出多少。”</p>
</blockquote>
<p>蒋介石说： </p>
<blockquote>
<p>“此次革命成功，商界暗中助力，大非浅鲜，此后仍以协助为期。至劳资问题，在南昌已议有办法，决不使上海方面有武汉态度。” </p>
</blockquote>
<p>这800万银元，是上海工商界大资本家的诚意。</p>
<p>剩下的，自然要看蒋介石的诚意了。</p>
<p>仅仅江浙一带的财阀，每年就能给蒋介石6000万银元，那全国的财阀能给多少？</p>
<p>那些穷赤佬，又能给多少？</p>
<p>哪怕是苏联给的资助，平均下来每年也不过只是七八百万银元而已。</p>
<p>至于武器和教官，苏联有的英美德等列强都有，只要有钱一切都好说。</p>
<p>北伐能成功不就是因为苏联的先进武器和教官么，剩下的就是蒋总司令自己的英明神武了。</p>
<p>如今只要抛弃苏联，蒋介石的实力可以凭空增长十倍以上，而且是忠于蒋介石自己个人的力量。</p>
<p>至于亲儿子蒋经国，没了可以再生，自己还年轻。</p>
<p>蒋介石从来不认为发动工农会获得强大的力量，认为是自己在花钱解放和帮助他们，工农阶层是纯粹的拖累和消耗品，社会精英才是财富和力量的源泉。<br>在这种思想的支配下，这笔账其实很好算。</p>
<font color="red">1927年4月12日，蒋介石在上海发动震惊全国的“四一二反革命政变”，大肆屠杀中国共产党人和国民党左派，镇压工人运动，公开和苏联决裂。 </font>

<p><img src="/archives/c0a28d53/3.png" alt=" "></p>
<p>因为身上的红色印记实在太深，身为当时在共产国际中地位最高的中国人，蒋介石不得不用非常极端的办法向江浙的大资本财阀和其背后的英美力量表示忠心：</p>
<blockquote>
<p>宁可错杀一千，不可放过一个。</p>
</blockquote>
<p>四一二反革命政变发生后，苏联震惊了，<font color="red">国民党也震惊了。</font></p>
<p>汪精卫立刻在武汉的国民党总部发表讲话，称蒋介石 </p>
<blockquote>
<p>“丧心病狂之至，自绝于党，自绝于民众”。</p>
</blockquote>
<p>1927年4月18日，汪精卫以国民党中央的名义，发表正式通电： </p>
<blockquote>
<p>“蒋中正屠杀民众，摧残党部，甘为反动，罪恶昭章。已经中央执行委员会决议，开除党籍，免去本人所兼各职。著全国将士及各革命团体拿解中央，按反革命罪条例惩治。”</p>
</blockquote>
<p>为对抗武汉的正统国民政府，蒋介石干脆在南京也成立了一个国民政府，另立中央，自任国民党中央军委主席和国民革命军总司令。</p>
<font color="red">史称宁汉分裂。</font>

<p>而蒋介石的亲儿子蒋经国，被愤怒的苏联直接发配到了西伯利亚当列兵并严加看管。</p>
<p>但汪精卫，很快就扛不住了。</p>
<p>当时的中国共产党，按共产国际的意思在国民党的占领区内发动工农，在城市里打倒资本家，在农村里打倒地主。</p>
<p>但当时整个中国的精英阶层，不是地主出身，就是资本家出身。</p>
<p>家庭不富裕，不可能支撑孩子去读书，更不可能当官或者成为高级军官。</p>
<p>连字都认不全，你拿什么去读军校？</p>
<p>随着共产党活动范围的不断加大，武汉政府国民党官员中的反共情绪越来越明显。</p>
<p>国民党的军官大部分都是地主出身，而他们的父母亲友，正在被红色农会给揪斗。</p>
<p>1927年5月，国民革命军35军军长何健的父亲，因为是大地主，所以被农会绑了之后游街示众。</p>
<p>自己父亲受此大辱，全家人的生命和财产都遭到生死威胁，作为家里的亲儿子应该如何应对，能否眼睁睁的看着自己家破人亡而无动于衷？</p>
<p>5月21日晚，何建一怒之下命令35军33团的团长许克祥在长沙发动了“马日事变”，大肆捕杀共产党人和亲共分子，并释放了所有被农会关押的地主。</p>
<p>随后，许克祥等人在长沙成立<font color="red">“中国国民党湖南救党办事处”</font>，并在全湖南范围内捕杀革命群众1万余人以上。</p>
<p>共产党方面要求武汉国民政府惩处“不法军官”，这让汪精卫很尴尬，因为何健的35军是武汉国民政府的铁杆支持者，汪精卫手中为数不多的核心武力。</p>
<font color="red">而且何健并不认为自己叛变了三民主义，反而认为自己是在“救党”，他坚定的认为搞土改极其荒诞，会亡党亡国。</font>

<p>武汉国民政府中大多数人对何健、许克祥等人持支持态度，因为他们自己的家族均在土改运动中损失惨重。</p>
<p>如果汪精卫处罚了许克祥，那整个政府都有分崩离析，被蒋介石全部拉拢过去的可能性。</p>
<p>最终，许克祥安然无恙，“马日事变”不了了之。</p>
<p>蒋介石叛变革命后，共产国际认为国民党靠不住，密令武汉的中共自己组织“工农革命军”，改组国民党武汉政府，没收地主土地，实行公有制，史称<font color="red">《五月指示》。</font></p>
<p>1927年6月1日，共产国际的使者鲁易抵达武汉，在把《五月指示》交给中共之前，先给了汪精卫过目。</p>
<p>在鲁伊的眼里，汪精卫是亲苏的左派，准共产党人，武汉国民政府的实际控制者，是靠得住的革命战友。</p>
<p>汪精卫看完《五月指示》后大吃一惊，随后找到苏联最高顾问鲍罗廷，明确表示自己不能接受这样的指示，否则武汉国民政府会彻底完蛋。如果共产国际非要执行这样的指令，那他只能和共产党一拍两散，最多给共产党一个和平退出的机会。</p>
<p>鲍罗廷不愿中国的革命事业就此断送，于是找到了陈独秀，两人主张对汪精卫进行妥协，暂不执行《五月指示》的命令，放弃激进的土改运动。</p>
<p>但张国焘、李立三等人，明确反对陈独秀的“右倾投降主义路线”，要求按共产国际的《五月指示》彻底没收地主的土地。</p>
<p>1927年7月12日，中共中央通过决议，撤销陈独秀的总书记职务，要求所有共产党人退出国民党，并发表《对政局宣言》，痛斥汪精卫背叛孙中山先生的革命遗志。</p>
<p>1927年7月15日，汪精卫在武汉召集会议，宣布停止和中国共产党的一切合作，要求所有共产党人退出国民党，对武汉国民党进行”清党”。</p>
<font color="red">至此，第一次国共合作彻底破裂。</font>

<p>1927年8月1日，20军军长贺龙等人发动“南昌起义”，正式宣布归属于共产党，对国民党势力造成了沉重打击。</p>
<p>而武汉国民政府，也从和平清党，改为武力清党，大规模逮捕处死共产党人，变得和南京国民政府别无二致。</p>
<font color="red">在武汉国民政府也开始武力屠杀共产党人时，武汉政府和南京政府的根本政治分歧就消失了。</font>

<p>冯玉祥居中调和，但汪精卫提出国民政府合二为一的前提条件是蒋介石必须下台。</p>
<p>在这个难以接受的条件面前，蒋介石表现出了极高的政治智慧。</p>
<p>1927年8月14日，蒋介石通电下野，前往日本访问。这一招以退为进赢得了大量的同情和支持，为蒋介石日后的复出做好了铺垫。</p>
<p>1927年8月19日，汪精卫代表武汉国民政府发表《迁都南京宣言》。</p>
<font color="red">至此，宁汉合流。</font>

<p>孙中山制定的“联俄联共扶助农工”三大政策，从此被国民党彻底抛弃，不复存在。</p>
<font color="red">蒋介石是主动背叛了孙中山的遗志，汪精卫是被动背叛了孙中山的遗志，但他们最终都选择了同样的路。</font>

<p>这说明国民政府背叛孙中山，背叛共产国际<font color="red">是大势所趋，是历史的必然。</font></p>
<p>中国的经济力量和武装力量都掌握在地主阶级和资产阶级手里，谁搞土改，谁发动工人，谁就会被他们清算。</p>
<p>蒋介石敏锐的发现了这一点，主动做了大资产阶级大地主的代理人，血腥屠杀共产党。</p>
<p>而汪精卫后知后觉，虽然努力维持和苏联的关系，但他的手下迫使他最终还是走上了这条路。</p>
<p>汪精卫最终斗不过蒋介石，理所当然，政治眼光和能力确实要差了一筹。</p>
<p>苏联当年认为蒋介石极有能力，大力提拔蒋介石作为共产国际在中国的代理人，某种意义上也没看错人。</p>
<font color="red">蒋介石这辈子唯一的错误，就是低估了土改之后，中国工农阶层爆发出来的恐怖力量。</font>

<p>四一二反革命政变前，国民党有121万党员，在册的共产党为5万人。</p>
<p>血腥清党一年后，国民党只剩下了22万党员，消失了足足100万人。</p>
<p>不止共产党被清理掉了，所有具备左倾思想的国民党员都被清理掉了，国民党建立的县、乡级基层党组织基本瓦解，彻底瘫痪。</p>
<p>留下来的22万国民党员，是纯右派的国民党，坚定的支持大地主阶级和大资产阶级的利益。</p>
<p>不是家中有良田千亩，就是家里在棉纱厂有干股。</p>
<p>而另外一边，共产党走了左派路线，全国到处搞土改，依赖工农的力量干革命。</p>
<p>中学历史书上是这么写的：</p>
<blockquote>
<p>大革命失败后，国民党变成了一个代表地主阶级、买办性的大资产阶级利益的反动集团所控制的政党。</p>
</blockquote>
<p>也许你曾经觉得这句话很虚，有故意抹黑自己曾经竞争对手的嫌疑，那是因为你小的时候不懂历史。</p>
<p>看完这篇文章后，你会发现这句话没有一个字是虚的，字字属实且精炼无比，<font color="red">用区区几个字就还原了历史事实。 </font></p>
<hr>
<center><font color="orange" size="4">国共的路线之争</font></center>

<hr>
<p>北伐时，国民党和共产党本是一家，后来发生分裂的原因也并不是出于个人恩怨。</p>
<font color="red">本质上来说，这是路线斗争，或者说是阶级斗争。</font>

<p>以蒋介石为首的国民党人，认为只有依靠大地主阶级和大资产阶级等“社会精英”提供的力量，依靠英美列强的力量，才有可能实现三民主义，才有可能拯救中国。</p>
<p>以毛泽东为首的共产党人，则把一切筹码都压在了土改身上，认为只有依靠工农阶层的力量，才有可能实现三民主义，才有可能拯救中国。</p>
<font color="red">国共两党都认可三民主义，但都觉得自己的办法才能真正的实现三民主义，而且都坚定的认为对方那一套是歪理邪说。</font>

<p>道理说不通，那就只能战场上见真章，看看谁的力量更大。</p>
<p>然后，毛泽东越打越强，蒋介石越打越弱。</p>
<p>史书上说：</p>
<blockquote>
<p>中国共产党是历史的选择，是人民的选择。</p>
</blockquote>
<p>如果你不清楚历史的细节，你也许会认为这句话是在吹牛，给自己脸上贴金。</p>
<p>但如果你从头到尾了解了所有的细节，那么你会发现这句话字字珠玑。</p>
<p>1947年3月，蒋介石对延安发动了大规模进攻，一位名叫安娜·路易斯·斯特朗的美国记者忧虑的问毛泽东：</p>
<blockquote>
<p>“您对取得最后胜利有过怀疑吗？”</p>
</blockquote>
<p>毛泽东是这么回应的：</p>
<blockquote>
<p>“那要看我们的土地改革工作完成得好不好。</p>
</blockquote>
<p>论文韬武略，蒋介石是一等一的人才，北伐期间无共产党人可与其争辉。</p>
<p>后期战场上的拙劣表现，手下军队的纷纷倒戈，从根子上说都是因为失去了工农阶层的支持。</p>
<p>你的军官也许是地主出身，但你的士兵不可能也是地主出身。</p>
<p>农民和工人的数量永远占据绝对优势，一旦有人成功唤醒他们的革命意识，爆发出来的能量会令世界颤抖。</p>
<p>蒋介石输的一点都不冤。</p>
<font color="red">当年他抛弃了人民，人民最终也抛弃了他。</font>


<p><font size="2">参考文献</font></p>
<p><font size="2">（1）杨天石著. 找寻真实的蒋介石：蒋介石日记解读 上. 太原：山西人民出版社, 2008.05.</font></p>
<p><font size="2">（2）杨树标著. 蒋介石传. 北京：团结出版社, 1989.06.</font></p>
<p><font size="2">（3）杨奎松著. 国民党的“联共”与“反共” 上. 桂林：广西师范大学出版社, 2016.03.</font></p>
<p><font size="2">（4）孟东：《蒋介石的莫斯科之行》 </font></p>
<p><font size="2">（5）邢和明 《蒋介石与莫斯科的恩恩怨怨》</font></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下使用inotify+rsync实时同步文件</title>
    <url>/archives/657b4685/</url>
    <content><![CDATA[<p><img src="/archives/657b4685/1.png" alt=" "></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多企业（特别是制造业）都通过收费的软件进行共享文件服务器的备份，而中小企业基于成本问题，往往会使用免费的软件，例如feefilesync就是一个比较优秀的开源备份同步软件。但是有些场合需要用到实时同步，备份软件做不了实时同步或者只能做到文件量不大的同步，如feefilesync有实时同步功能，文件较少的时候还是挺好用的，可以做到以秒为单位的文件同步，缺点是每次同步的时候都会扫一遍目录，通过对比不同的文件再进行操作，如果文件目录有较多文件的时候，同步过程就会十分缓慢，会影响到生产业务，所以必须寻求一种可以实时同步的方案，当然可以通过程序员开发windows的程序，但是较为复杂。</p>
<p>inotify+rsync是linux下比较常用的实时同步方案，原理是通过inotify监控文件变化，再通过rsync软件同步到目标目录，Windows下是否也能使用？答案是可以的，部署比linux复杂一点。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><p>文件服务器：192.168.1.189文件服务器windows server 2008<br>同步到：192.168.1.160</p>
<p>图：<br><img src="/archives/657b4685/2.png" alt=" "></p>
<h3 id="inotify"><a href="#inotify" class="headerlink" title="inotify"></a>inotify</h3><p>inotify是开源软件，thekid大神开发，可以在github获得源码：<br><a href="https://github.com/thekid/inotify-win">https://github.com/thekid/inotify-win</a></p>
<p>然后，本地电脑安装.net4.0和开发模块，通过csc.exe来编译获得可执行文件：<br><code>%WINDIR%\Microsoft.NET\Framework\v4.0.30319\csc.exe /t:exe /out:inotifywait.exe src\*.cs</code></p>
<h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><p>windows下rsync叫cwrsync，通过网上搜索可以找到，分服务器端和客户端，这里只用到服务端就可以，使用本地复制模式的命令，通过1.189本地目录拷贝到1.160的共享上：<br><code>rsync -avz --port=873 --delete --progress 源文件 目标目录</code><br>同样道理，如果在其他服务器安装客户端，可以通过客户端推送模式来推送文件到服务端上。</p>
<h3 id="执行触发"><a href="#执行触发" class="headerlink" title="执行触发"></a>执行触发</h3><p>inotify和rsync只是负责各自的工作，inotify负责监听，但是要如何触发到rsync来执行，则需要写脚本，本例子是使用Python来调用的。<br>由于服务端是较久的server 2008系统，只能安装较早版本的python，这里使用Python 3.6.0版本，官网下载就行。</p>
<h2 id="安装和调试"><a href="#安装和调试" class="headerlink" title="安装和调试"></a>安装和调试</h2><h3 id="inotify安装和测试"><a href="#inotify安装和测试" class="headerlink" title="inotify安装和测试"></a>inotify安装和测试</h3><p>本机生成的inotify.exe文件拷贝到服务器c盘根目录，使用命令提示符即可测试，其中，服务器需要安装.net 4.0的运行组件才能正常运行：<br><img src="/archives/657b4685/3.png" alt=" "></p>
<p>inotify的参数可以通过github网页获得，这里使用的是-mrq —format “%%e %%w\%%f”，输出事件名字+文件名+路径，如果对监听目录文件操作有输出，则说明软件能正常运行。</p>
<h3 id="rsync安装和测试"><a href="#rsync安装和测试" class="headerlink" title="rsync安装和测试"></a>rsync安装和测试</h3><p>直接双击安装服务端，安装过程会提示启用服务的用户和密码，可以使用默认的，该场景是本地传输，所以不用认证的参数。安装完后需要添加系统环境变量，之后同步的脚本执行命令时需要用到，添加的路径为默认的软件路径。<br><img src="/archives/657b4685/4.png" alt=" "></p>
<p>添加上系统变量后，就可以使用命令提示符直接运行测试：<br><img src="/archives/657b4685/5.png" alt=" "></p>
<p><code>rsync.exe -avz --port=873 --delete --progress /cygdrive/c/123/ /cygdrive/c/111</code></p>
<p>需要注意的是，windows版的rsync指定源目录和目标目录时要以/cygdrive开头。</p>
<p>rsync的参数可以从官网获得。其中：<br>-a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性<br>-v, –verbose 详细模式输出<br>-z, –compress 对备份的文件在传输时进行压缩处理<br>—delete 删除那些目标目录中源目录没有的文件<br>–-progress 显示备份过程</p>
<p>如果没有错误输出说明软件和设置是正常的。</p>
<h3 id="使用python执行触发"><a href="#使用python执行触发" class="headerlink" title="使用python执行触发"></a>使用python执行触发</h3><p>先上脚本代码，该代码也是网上找的，修改适配python3.6或以上版本，使用subprocess模块来启动进程。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># import smtplib</span></span><br><span class="line"><span class="comment"># from email.mime.text import MIMEText</span></span><br><span class="line"><span class="comment"># from email.mime.multipart import MIMEMultipart</span></span><br><span class="line"><span class="comment"># from email.header import Header</span></span><br><span class="line">rsyncSrc=<span class="string">&#x27;C:\\123&#x27;</span></span><br><span class="line">rsyncSrc2=<span class="string">&#x27;/cygdrive/c/123/&#x27;</span></span><br><span class="line">rsyncDes=<span class="string">&#x27;/cygdrive/c/111&#x27;</span></span><br><span class="line">listen=<span class="string">&#x27;C:\inotifywait.exe -mrq --format &quot;%%e %%w\%%f&quot; &quot;C:\\123&quot;&#x27;</span></span><br><span class="line">popen=subprocess.Popen(listen,stdout=subprocess.PIPE,stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># def smail(mailfrom,receivers,subject,body,att):</span></span><br><span class="line"><span class="comment"># sender = &#x27;devops@netinn.net&#x27;</span></span><br><span class="line"><span class="comment"># mailtotag = &#x27;devops all&#x27;</span></span><br><span class="line"><span class="comment"># smtpserver = &#x27;smtp.netinn.net&#x27;</span></span><br><span class="line"><span class="comment"># username = &#x27;devops@netinn.net&#x27;</span></span><br><span class="line"><span class="comment"># password = &#x27;Test123456&#x27; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个带附件的实例</span></span><br><span class="line"><span class="comment"># message = MIMEMultipart()</span></span><br><span class="line"><span class="comment"># message[&#x27;From&#x27;] = Header(mailfrom, &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># message[&#x27;To&#x27;] = Header(mailtotag, &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># message[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮件正文内容</span></span><br><span class="line"><span class="comment"># if isinstance(body,unicode):</span></span><br><span class="line"><span class="comment"># body = str(body)</span></span><br><span class="line"><span class="comment"># message.attach(MIMEText(body, &#x27;plain&#x27;, &#x27;utf-8&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造附件1，传送当前目录下的 test.txt 文件</span></span><br><span class="line"><span class="comment"># att1 = MIMEText(open(att, &#x27;rb&#x27;).read(), &#x27;base64&#x27;, &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># att1[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span></span><br><span class="line"><span class="comment"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></span><br><span class="line"><span class="comment"># att1[&quot;Content-Disposition&quot;] = &#x27;attachment; filename=log&#x27;</span></span><br><span class="line"><span class="comment"># message.attach(att1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># att2 = MIMEText(open(att, &#x27;rb&#x27;).read(), &#x27;base64&#x27;, &#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># att2[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span></span><br><span class="line"><span class="comment"># att2[&quot;Content-Disposition&quot;] = &#x27;attachment; filename=att&#x27;</span></span><br><span class="line"><span class="comment">#message.attach(att2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># message[&quot;Accept-Language&quot;] = &quot;zh-CN&quot;</span></span><br><span class="line"><span class="comment"># message[&quot;Accept-Charset&quot;] = &quot;ISO-8859-1,utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># smtpObj = smtplib.SMTP(smtpserver)</span></span><br><span class="line"><span class="comment"># smtpObj.login(username, password)</span></span><br><span class="line"><span class="comment"># smtpObj.sendmail(sender, receivers, message.as_string())</span></span><br><span class="line"><span class="comment"># print &quot;mail send&quot;</span></span><br><span class="line"><span class="comment"># except smtplib.SMTPException:</span></span><br><span class="line"><span class="comment"># print &quot;Error: send failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mailfrom=&#x27;cop@quyiyuan.com&#x27;</span></span><br><span class="line"><span class="comment"># receivers = [&#x27;xx@netinn.net&#x27;,&#x27;xx@netinn.net&#x27;,&#x27;xx@qq.com&#x27;,&#x27;xx@hotmail.com&#x27;,&#x27;xx@xx.com&#x27;,&#x27;xx@xx.com&#x27;] # 接收邮件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line=popen.stdout.readline().strip()</span><br><span class="line">    <span class="comment"># print(line)</span></span><br><span class="line">    <span class="comment"># lineArr=line.decode(&#x27;utf-8&#x27;).split(&#x27; &#x27;)</span></span><br><span class="line">    lineArr=line.decode(<span class="string">&#x27;gbk&#x27;</span>).split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    oper=lineArr[<span class="number">0</span>]</span><br><span class="line">    file=lineArr[<span class="number">1</span>]</span><br><span class="line">    touched=<span class="literal">False</span></span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    <span class="keyword">if</span> file.index(rsyncSrc)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (oper==<span class="string">&#x27;MODIFY&#x27;</span>) <span class="keyword">or</span> (oper==<span class="string">&#x27;CREATE&#x27;</span>) <span class="keyword">or</span> (oper==<span class="string">&#x27;MOVED_FROM&#x27;</span>) <span class="keyword">or</span> (oper==<span class="string">&#x27;MOVED_TO&#x27;</span>) <span class="keyword">or</span> (oper==<span class="string">&#x27;DELETE&#x27;</span>):</span><br><span class="line">            <span class="comment"># _current_file=file.replace(rsyncSrc,&#x27;/cygdrive/c/123&#x27;)</span></span><br><span class="line">            <span class="comment"># cureent_file=_cureent_file.replace(&#x27;\\&#x27;,&#x27;/&#x27;)</span></span><br><span class="line">            <span class="comment"># print(cureent_file)</span></span><br><span class="line">            cmd=<span class="string">&#x27;set CYGWIN=nodosfilewarning &amp;&amp; cd /d &#x27;</span>+rsyncSrc+<span class="string">&#x27; &amp;&amp; &#x27;</span>+<span class="string">&#x27;start /b rsync -avz --delete --progress &#x27;</span>+rsyncSrc2+<span class="string">&#x27; &#x27;</span>+rsyncDes+<span class="string">&#x27; 2&gt;&gt;C:\\rsynclog\\error.log&#x27;</span></span><br><span class="line">            touched=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> touched:</span><br><span class="line">                print(cmd)</span><br><span class="line">                rsyncAction=os.popen(cmd)</span><br><span class="line">                rsyncStat=rsyncAction.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;speedup is&quot;</span> <span class="keyword">in</span> rsyncStat:</span><br><span class="line">                    print(file+<span class="string">&#x27; rsynced!&#x27;</span>)</span><br><span class="line">                    print(rsyncStat)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(file+<span class="string">&#x27; rsync failed!&#x27;</span>)</span><br><span class="line">                    <span class="comment"># att=&#x27;D:\\logs\\error.log&#x27;</span></span><br><span class="line">                    <span class="comment"># subject =&#x27;SyncError:&#x27;+file</span></span><br><span class="line">                    <span class="comment"># body=rsyncStat</span></span><br><span class="line"><span class="comment">#smail(mailfrom,receivers,subject,body,att)</span></span><br><span class="line"><span class="comment">#rsyncAction=subprocess.check_output(cmd1)</span></span><br><span class="line"><span class="comment">#rsyncAction=subprocess.check_output(cmd,stdout=subprocess.PIPE,stderr=subprocess.STDOUT,shell=True)</span></span><br></pre></td></tr></table></figure>
<p>该代码还带邮件发送功能，因为没用到所以注释掉。<br>代码解析：</p>
<p>定义了四个变量，分别为rsyncSrc，rsyncSrc2，rsyncDes，listen</p>
<p>第一个和第二个变量都是源目录路径，只不过是给不同对象需要的表现形式不一样，通过popen来执行inotify程序，然后循环模块里获取inotify输出的信息，从而获得文件变化的路径，这个路径的输出格式跟第一个变量匹配，如果匹配成功，就根据事件来执行rsync程序，这时执行rsync需要的路径格式就是第二个变量和第三个变量了。</p>
<p>命令提示符运行测试，把代码保存为inotify+rsync.py：<br><code>python inotify+rsync.py</code></p>
<p><img src="/archives/657b4685/6.png" alt=" "></p>
<p>测试OK！</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>AD</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>用简单的语言帮你理解时空旅行和光速不变</title>
    <url>/archives/577d12c9/</url>
    <content><![CDATA[<p><img src="/archives/577d12c9/1.png" alt=" "></p>
<p>原创 一棵青木 海中青木 2022-10-12 23:30 发表于湖北</p>
<p>很多人都对爱因斯坦的时空旅行感兴趣，全球科学家都证实时空旅行确实理论可行。</p>
<p>但为什么时空旅行可行，几乎所有的文章都非常生涩难懂，全篇都是密密麻麻的证明公式，不利于普通人的理解。</p>
<font color="red">于是我今天就用简单的语言，把最核心的几个东西抽出来，公式省略，写一篇让人一看就懂的东西来解释时空旅行的原理，做我最擅长的科普工作。</font>

<p>要理解为什么时空旅行可行，首先要理解光速不变原理，因为光速不变所以才存在了时空旅行的可能。</p>
<font color="red">从字面意思来说，光速不变指的是物体的速度永远不可能超越光速，但实际并不是的，物体的速度是可以超越光速的，但这要看你采用了哪个参考系。</font>

<p>光速有一个非常重要的特性，严重颠覆普通人的认知，只要你理解这一点就会消除大部分对于时空旅行的误解。</p>
<p>假设你在宇宙飞船上，向前发射了一束光，光以光速，也就是30万公里每秒的速度前进，然后你立即启动飞船，以10万公里每秒的速度向前追赶这束光。</p>
<p>请问此时这束光远离你的速度是多少？</p>
<p>按正常人的理解，光向前30万公里每秒，你向前10万公里每秒，所以此时光远离你的速度应该是20万公里每秒。</p>
<p>错，此时这束光远离你的速度依然是30万公里每秒。</p>
<font color="red">不管你追赶这束光的速度多块，哪怕你从10万公里每秒加速到20万公里，30万公里乃至于100万公里每秒，光永远比你快30万公里每秒。</font>

<p>在你自己看来，你的速度也许达到了100万公里每秒，超光速了，但在旁观者眼里，你还是比光速慢，因为光永远在你前面，且以一个恒定的速度远离你。</p>
<p>所以在你自己的参考系里，是可以超光速的，但在其他人的参考系里，你没有超光速，也没有任何人可以超光速。</p>
<p>很奇怪吧，但还有更奇怪的。</p>
<p>如果你在向前发射这束光后，立即以10万公里每秒后退，远离这束光。</p>
<p>理论上说，此时这束光远离你的速度，应该是40万公里每秒。</p>
<p>但实际上并不是，此时这束光远离你的速度还是30万公里每秒。</p>
<font color="red">哪怕你向后不断加速，加速到30万公里每秒乃至于更高的100万公里每秒，光远离你的速度还是30万公里每秒，不会快一丝一毫。</font>

<p>出现这种奇怪的现象是因为当你拥有速度后，你的时间和空间的关系就发生了扭曲，速度越快则扭曲的程度越严重。</p>
<p>你疯狂增加你的速度，但光远离你或接近你的速度却是固定的，那你多出来的速度哪去了？</p>
<p>转化成了时间。</p>
<p>你疯狂加速，达到了超光速，速度10倍于光速，10光年的距离你一年就到了，但实际上你的速度永远低于光速，其他人看你还是按低于光速的速度慢慢飞过来的，但其他人过了10年，你这里才过了1年，所以你感觉自己一年就到了，肉体也只衰老了一岁，看起来好像是超光速了。</p>
<font color="red">这就是时空旅行的理论基础。</font>

<p>有人说，这都是扯淡，都是歪理邪说，利用大量让人看不懂的公式反复推导出来的谬论，没有任何证据。</p>
<font color="red">如果没有证据，那时空旅行就是个假说，不会被当成理论，也不会那么火。</font>

<font color="red">证据当然是有的，而且很常见。</font>

<p>1971年，为证实爱因斯坦这一颠覆常识，怎么看都很扯淡，但偏偏从理论和公式层面怎么都找不出漏洞的光速不变原理，科学家设计出了钟慢实验。</p>
<p>人类确实不能达到很高的速度，但按爱因斯坦的理论，哪怕速度仅有1米每秒，也会发生时空扭曲，只不过扭曲的程度很微弱而已。</p>
<font color="red">既然如此，那就代表时空扭曲是可以测量的。</font>

<p>铯原子钟，人类最精确的计时工具，每经过一千万年，误差最多不超过1秒。</p>
<p>科学家把四台铯原子钟分别放在两架飞机上，然后在地面上放一台铯原子钟作为参考种，在地面上把五台铯原子钟进行了校准。</p>
<p>然后一架飞机向东飞，一架飞机向西飞，搭配地球自转获得一个很高的速度差值。</p>
<p>绕地球飞一圈，回到原机场，让我看看时间到底有没有变慢或者是变快，反正无论多小的误差我都是可以测出来的。</p>
<p>结果向东的飞机，落地后比地面的铯原子钟慢了59纳秒。</p>
<p>向西的飞机，落地后比地面的铯原子钟快了273纳秒。</p>
<p>和根据爱因斯坦时空理论计算出来的数值几乎完全一样！</p>
<p><img src="/archives/577d12c9/2.png" alt=" "></p>
<font color="red">这就是鼎鼎大名的钟慢现象，也是时空旅行可行的最核心证据，现在铺天盖地的时空旅行电影都是从这个实验被证实，全球科学家广泛接受之后才开始拍摄的。</font>

<p>有人说，这个什么铯原子钟，有问题吧，反正我觉得是钟有问题，或者是测量有问题，绝对不是时间变慢了，这还是在扯淡。</p>
<p>而且就算是真的，又有什么用，卵用没有啊。</p>
<p>别急，还有证据。</p>
<p>发现了钟慢效应后，科学家利用不同速度下时间会发生改变这一特性，终于解决了太空卫星对地面精准定位的办法。</p>
<p>我们都知道要精准定位一个点，需要精确描述这个点和卫星之间的距离，而不管用什么手段测量距离，都必须要使用时间这个参数。</p>
<p>在以前，不管用什么办法测量距离，都会产生极其恐怖的误差，科学家百思不得其解。</p>
<p>这个误差有多离谱？</p>
<p>同样的办法计算出的坐标，每天都偏差11公里之多。</p>
<p>今天算出来的坐标点精准定位在天安门。10天后再测，能偏110公里之多，定位点都跑到河北了。</p>
<p>最核心的原因，就是导航卫星上的时间流逝速度和地面上不一样，如果采用同样的时间参数进行计算，就会得出非常离谱的距离差距。</p>
<p>这个时间流速的计算很复杂。</p>
<p>假定GPS卫星以每小时1.4万公里的速度绕地球飞行，那么根据运动速度越快则时间越慢的狭义相对论，每天卫星上的时间都会悄悄比地面慢7微秒。</p>
<p>同时根据广义相对论，任何质量都会扭曲身边的时空，质量越大则扭曲程度越厉害，而卫星的高度远远高于飞机，距离地面大概2万公里，远离地球，所处时空受到地球质量的扭曲效应会小得多，所以地球表面的钟每天会反过来比卫星上的钟慢45微秒。</p>
<p>两者叠加计算，导航卫星上的原子钟每天会比地面快38微秒，然后折算进每分每秒进行校准。</p>
<p>这就是时空效应在卫星导航上的应用。</p>
<font color="red">时空时空，时间和空间，当时空的扭曲程度不一致时，如果你非要保持时间不变，那空间就会出现巨大的误差。</font>

<font color="red">如果你要保持空间不变，就必须要修正时间。</font>

<p>根据卫星的高度和速度，不断算出卫星目前被扭曲的时间流速，然后每时每刻不断修正导航卫星的铯原子钟参数。</p>
<p>GPS对地面的定位精度是10米还是1米还是更低，完全取决于工程人员对铯原子钟时间参数的修正程度。</p>
<p>卫星被扭曲的时间流速算的越精准，GPS对地面的定位精度就会越高。</p>
<p>你手机上使用的卫星导航，以及国家的军事导航卫星，必须每时每刻都在修正自己的时间。</p>
<font color="red">不懂爱因斯坦的时空旅行理论，或者不认可，那你的国家就永远不可能设计的出卫星导航系统。</font>

<p>每天偏差11公里的定位精度，和每时每刻都保持在10米乃至于1米的定位精度，这简直是天差地别。</p>
<p>卫星的速度相对于汽车和飞机来说很快，但相对于光速而言那简直是九牛一毛。</p>
<font color="red">如果人类不断提升物体的速度，那时空扭曲程度就会飞速提升。</font>

<font color="red">你的速度越快，“钟”就越慢。</font>

<p>而且时空旅行并不取决于运动的方向，只取决于物体的速度。</p>
<p>因为无论你向哪个方向飞，光从任意方向远离你的速度或者接近你的速度永远是光速，这一奇怪的特性导致你向任意方向超高速飞行，时间都会发生巨大扭曲。</p>
<p>超高速度的你，明明感觉自己只过了一年，但留在地面上的亲戚却认为你已经飞行了十年。</p>
<p>如果你瞬间掉头，重新向地球飞，依然是超时空旅行状态，时间不会因为你运动方向截然相反而倒流，你的时间流速依然你地面亲戚块。</p>
<p>如果你从超高速状态不断减速，那时间也并不会倒流，不断减速只会导致你的时间变慢现象不断的减弱，你的时间流速开始不断和地面上的亲戚靠拢。</p>
<p>当你减速到和地面亲戚等同的速度时，你们之间的时间流速会重新变得相等，但并不代表里面的9年时间差会回来，这9年时间就永远失去了，莫名其妙的没了，再也不可能回得来。</p>
<p>超时空旅行前，你20岁，你亲戚也是20岁，然后你用一年时间跑了10光年。</p>
<p>回地球后，你21岁，但你的亲戚已经30岁了。</p>
<p>在你看来，你在飞船上只渡过了一年，每天打牌，时间计算的清清楚楚，除以运动的距离10光年，得出自己是在超光速运动，速度已经达到了10倍光速。</p>
<p>但在地面亲戚看来，你始终没有达到光速，永远比光速低一点，实际上你是花了10年多一点的时间才完成了这10光年旅途，他自己老了10岁就是证据。</p>
<font color="red">这就是时空旅行，让不同人的时间发生错位。</font>

<p>为了解释为什么你不断消耗能量去加速却永远达不到光速，只会让时间变得越来越慢，间接超光速，人类用质增效应去解释。</p>
<p>简单的说，但你不断加速的时候，只有你自己感觉自己是超光速了，外界看来你只会越来越接近光速，而随之带来的是你的质量飞速增加，加速的能量都被转化成了质量。</p>
<p>而你所在飞船上的时间变慢，则是因为自身质量飞速增加对周围时空的扭曲。</p>
<p>当你不断减速的时候，质量在飞速减小，对周围时空的扭曲也减少，然后时间流速开始恢复正常。</p>
<p>所以物体可以超光速进行时空旅行，又不可以超光速，这并不矛盾，也不是爱因斯坦的相对论在狡辩。</p>
<p>但时空旅行并不代表能回到过去，理解了原理之后你就会知道这是完全不可能的事情，那完全都是电影为了凸出艺术效果而瞎掰的。</p>
<font color="red">无论多快的速度，都只会让时间变慢，越来越慢，但再慢也不会是负数，永远是个正值。</font>

<p>慢到极致，你在飞船里过1年，外界可能已经过了几千年，但你在超光速飞船里也永远只能活100年，以你自身为中心的时间参考系是永远不会变的。</p>
<p>所以才叫钟慢效应，钟变慢了，外界看似你活了几万年，其实你还是只活了100年。</p>
<p>钟慢效应并不能改变宇宙飞船经历的真实时间，但可以压缩时间。</p>
<p>空间不能变那就扭曲时间，比如超时空旅行。</p>
<p>时间不能变那就扭曲空间，比如人类目前琢磨的所谓虫洞或空间折叠。</p>
<font color="red">反正时空是联动的，想在星空中高速移动必须要扭曲至少一个，所以叫时空效应。</font>

<p>至于为什么无论你向哪个方向飞，以多快的速度飞，光都会永恒的以光速C值远离你或靠近你，为什么光速会有如此奇怪的特性？</p>
<p>这个叫宇宙常数，没人知道为什么，科学家只知道宇宙就是这么运转的，目前最顶级的宇宙常数就是光速C值，无人可以突破。</p>
<font color="red">但时间流速可以不同，这个是切切实实存在的，证据一箩筐，天上的卫星和你我手机里的导航系统就是证据，这个时间流速的差值虽然很微小，但确实是存在的，且时时刻刻都在影响你我的生活。</font>

<p>大量星辰的速度快的难以想象，还有很多星辰的质量大的难以想象，这说明宇宙里存在大量时空严重扭曲的地方，这些地区的规则和地球完全不同，甚至连时间都不同。</p>
<p>而这，仅仅是宇宙神秘面纱的冰山一角，未知的宇宙规律还不知道有多少。</p>
<font color="red">明白了这些，你才能够理解宇宙的浩瀚和人类的渺小。</font>

<font color="red">地球只是个婴儿摇篮而已，星辰大海才是人类的未来，因为那里存在着无限可能。</font>











]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试工具</title>
    <url>/archives/86c9021f/</url>
    <content><![CDATA[<p><img src="/archives/86c9021f/1.png" alt=" "></p>
<p>祺印说信安 2022-08-03 00:00 发表于河南</p>
<p>渗透测试员，有时被称为道德黑客，是一名安全专家，对客户的网络或系统发起模拟攻击以找出漏洞。目标是展示恶意攻击者可能在何处以及如何利用目标网络，在真正的攻击发生之前缓解任何弱点。</p>
<p>渗透人员与恶意黑客使用的工具和技术基本相同。</p>
<p>回到过去，黑客攻击很困难，需要大量的手动操作。然而，时至今日一整套自动化测试工具将黑客变成了半机械人，可以进行比以往更多的测试的计算机增强型人类。好比，可以乘飞机，为什么要骑马？以下是使现代渗透测试人员的工作更快、更好、更智能的工具。</p>
<h2 id="顶级渗透测试工具"><a href="#顶级渗透测试工具" class="headerlink" title="顶级渗透测试工具"></a>顶级渗透测试工具</h2><h3 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h3><p>如果没有使用Kali Linux作为基本渗透测试操作系统，算不上真正的黑客。除非你拥有更牛前沿知识和专门的用例，要么是不称职的黑客。Kali 以前称为 BackTrack Linux，由 Offensive Security 的优秀人员（OffSec，运行 OSCP 认证的人）维护，Kali 在各个方面都经过优化，可作为渗透测试人员使用。</p>
<p>虽然可以在自己的硬件上运行Kali，但在OS X 或Windows 上使用Kali虚拟机的渗透测试人员更为常见。</p>
<p>Kali 附带了这里提到的大多数工具，并且是大多数用例的默认渗透测试操作系统。但请注意——Kali 是针对进攻而非防守进行优化的，并且很容易反过来被利用。不要在Kali VM 中保留自己的超级机密文件。</p>
<h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p>端口扫描器的鼻祖，nmap（网络映射器的缩写）是一种久经考验的真正渗透测试工具，很少有人能离不开它。开放了哪些端口？这些端口上正在运行什么？在侦察阶段，这是渗透测试人员必不可少的信息，而 nmap 通常是完成这项工作的最佳工具。</p>
<p>尽管非技术高管偶尔会歇斯底里地认为某个未知方正在对企业进行端口扫描，但 nmap 本身是完全合法使用的，类似于敲附近每个人的前门以查看是否有人是家。许多合法组织，如保险机构、Shodan和 Censys 等互联网制图师，以及 BitSight 等风险评分员，使用专门的端口扫描软件（通常是 nmap 竞争对手 masscan 或 zmap）定期扫描整个 IPv4 范围，以绘制大型企业的公共安全态势图。也就是说，恶意攻击者也会进行端口扫描，因此可以记录下来以备将来参考。</p>
<h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><p>当你可以Metasploit时为什么要利用？这个适当命名的Metasploit软件就像一把弩：瞄准你的目标，选择你的漏洞，选择一个有效载荷，然后开火。对于大多数渗透测试人员来说，Metasploit是必不可少的，使以前繁琐的大量工作自动化，并且正如其网站所宣传的那样，确实是“世界上最常用的渗透测试框架”。作为一个由 Rapid7 提供商业支持的开源项目，Metasploit 是防御者保护其系统免受攻击者攻击的必备工具。</p>
<h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><p>网络协议分析器将更加令人难忘。Wireshark是一款无处不在的工具，可用于了解通过网络的流量。虽然通常用于深入了解日常 TCP/IP 连接问题，但 Wireshark 支持对数百种协议的分析，包括对其中许多协议的实时分析和解密支持。如果不熟悉渗透测试，Wireshark 是一个必须学习的工具。</p>
<h3 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h3><p>与软件的同名软件不同，John the Ripper 不会在维多利亚时代的伦敦连环杀人，而是会愉快地以 GPU 最快的速度破解加密。这个密码破解器是开源的，用于离线密码破解。John 可以使用可能密码的单词列表并对其进行变异，将“a”替换为“@”，将“s”替换为“5”等等，或者它可以使用强大的硬件运行无穷大，直到找到密码。考虑到绝大多数人使用简单的短密码，John 经常成功地破解加密。</p>
<h3 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a>Hashcat</h3><p>自称“世界上最快和最先进的密码恢复实用程序”可能并不谦虚，但hashcat的人们当然知道他们的价值。Hashcat 让John the Ripper一筹莫展。它是破解哈希的首选渗透测试工具，hashcat 支持多种密码猜测暴力攻击，包括字典和掩码攻击。</p>
<p>渗透测试通常涉及散列密码的泄露，利用这些凭据意味着将像 hashcat 这样的程序在离线状态下松动，以期至少猜测或暴力破解其中一些密码。</p>
<p>Hashcat 在现代 GPU 上运行最好（抱歉，Kali VM 用户）。旧版 hashcat 仍然支持 CPU 上的哈希破解，但警告用户它比利用显卡的处理能力要慢得多。</p>
<h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><p>John the Ripper 的伴侣 Hydra 在需要在线破解密码时发挥作用，例如 SSH 或 FTP 登录、IMAP、IRC、RDP 等等。将 Hydra 指向你想破解的服务，如果你愿意，可以给它传递一个单词列表，然后扣动扳机。像 Hydra 这样的工具提醒人们为什么限制密码尝试和在几次登录尝试后断开用户连接可以成功地防御攻击者。</p>
<h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><p>没有提到 Web 漏洞扫描器 Burp Suite，就没有完整的对渗透测试工具的讨论，它与迄今为止提到的其他工具不同，它既不是免费的也不是自由的，而是专业人士使用的昂贵工具。虽然有 Burp Suite 社区版，但它缺乏很多功能，而 Burp Suite 企业版每年的售价高达 3,999 美元（伙计们，心理定价并没有让它看起来便宜多少）。</p>
<p>不过，他们可以摆脱这种流鼻血的价格是有原因的。Burp Suite 是一个非常有效的 Web 漏洞扫描程序。将其指向要测试的网络资源，并在准备好后触发。Burp 的竞争对手 Nessus 提供了同样有效（且价格相似）的产品。</p>
<h3 id="Zed-Attack-Proxy"><a href="#Zed-Attack-Proxy" class="headerlink" title="Zed Attack Proxy"></a>Zed Attack Proxy</h3><p>那些没有现金购买 Burp Suite 的人会发现 OWASP 的 Zed Attack Proxy (ZAP) 几乎同样有效，它既是免费软件又是自由软件。顾名思义，ZAP 位于浏览器和正在测试的网站之间，并允许拦截（也称为中间人）流量以检查和修改。它缺乏 Burp 的许多花里胡哨，但它的开源许可证使得大规模部署变得更容易、更便宜，并且它是一个很好的初学者工具，可以了解 Web 流量到底有多脆弱。ZAP 的竞争对手 Nikto 提供了一个类似的开源工具。</p>
<h3 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h3><p>有人说SQL 注入吗？好吧，你好，sqlmap。这个非常有效的 SQL 注入工具是开源的，并且“自动化检测和利用 SQL 注入缺陷并接管数据库服务器的过程”，就像它的网站所说的那样。Sqlmap 支持所有常用目标，包括 MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、Informix、HSQLDB 和 H2。老前辈过去不得不用热针在他们的硬盘上进行 SQL 注入。如今，sqlmap 将从渗透测试工作中消除眯眼的工作。</p>
<h3 id="aircrack-ng"><a href="#aircrack-ng" class="headerlink" title="aircrack-ng"></a>aircrack-ng</h3><p>工作环境Wi-Fi（或家庭 Wi-Fi）的安全性如何？用 aircrack-ng 找出答案。这个 wifi 安全审计工具是免费/自由的，但必须自己购买Pringles 。（听说 7-11 的暗网市场可以提供一个处于低位的市场。）如今破解 Wi-Fi 通常是可能的，因为配置不当、密码错误或加密协议过时。Aircrack-ng 是许多人的首选——有或没有 Pringles 天线。</p>
<h2 id="渗透测试工具的类型"><a href="#渗透测试工具的类型" class="headerlink" title="渗透测试工具的类型"></a>渗透测试工具的类型</h2><h3 id="网络渗透测试工具"><a href="#网络渗透测试工具" class="headerlink" title="网络渗透测试工具"></a>网络渗透测试工具</h3><p>典型的黑客每天都在闯入不属于他们的网络，因此渗透测试人员需要能够帮助他们访问目标网络基础设施的工具。首选，Kali Linux、nmap、Metasploit、Wireshark、John the Ripper 和 Burp Suite 都属于这一类。其他流行的网络渗透测试工具包括数据包操作程序 Scapy；w3af，一个攻击和审计框架；以及漏洞扫描器 Nessus、Netsparker 和 Acunetix。 </p>
<h3 id="Web-应用程序渗透测试工具"><a href="#Web-应用程序渗透测试工具" class="headerlink" title="Web 应用程序渗透测试工具"></a>Web 应用程序渗透测试工具</h3><p>面向 Web 的应用程序是任何组织都需要保护的主要攻击面之一，因此渗透测试人员希望将大量精力集中在此处以真正评估其目标的安全性。Nmap、Metasploit、Wireshark、Jon the Ripper、Burp Suite、ZAP、sqlmap、w3af、Nessus、Netsparker 和 Acunetix 都可以帮助完成这项任务，BeEF 也是一个专注于 Web 浏览器的工具；Web 应用程序漏洞扫描程序 Wapiti、Arachni、Vega 和 Ratproxy；diresearch，一个命令行工具，旨在暴力破解网络服务器上的目录和文件；和 Sn1per，一个“一体式”渗透测试框架。</p>
<h3 id="数据库渗透测试工具"><a href="#数据库渗透测试工具" class="headerlink" title="数据库渗透测试工具"></a>数据库渗透测试工具</h3><p>如果黑客的目标是泄露有价值的数据，那么这些皇冠上的宝石通常潜伏在某个数据库中，因此对于渗透测试人员来说，拥有撬开锁的工具非常重要。nmap和sqlmap 是用于此目的的重要工具。SQL Recon 是一种主动和被动扫描程序，专门针对并尝试识别网络上的所有 Microsoft SQL Server，以及 BSQL Hacker，一种自动 SQL 注入工具。</p>
<h3 id="自动化渗透测试工具"><a href="#自动化渗透测试工具" class="headerlink" title="自动化渗透测试工具"></a>自动化渗透测试工具</h3><p>手动查找目标系统中所有可能的漏洞可能需要数年时间。许多渗透测试工具都内置了自动化功能以加快流程。Metasploit、John the Ripper、Hydra、Sn1per 和 BSQL Hacker 在这方面脱颖而出。</p>
<h3 id="开源渗透测试工具"><a href="#开源渗透测试工具" class="headerlink" title="开源渗透测试工具"></a>开源渗透测试工具</h3><p>笔测试起源于一个对开源运动投入巨资的黑客世界。除了 Burp Suite 之外，我们所有的首选工具都是开源的，Scapy、BeEF、w3af、Wapiti、Arachni、Vega、Ratproxy 和 Sn1per 也是如此。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>最全SQL 语句大全</title>
    <url>/archives/b6e09bfa/</url>
    <content><![CDATA[<p><img src="/archives/b6e09bfa/1.png" alt=" "></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1、说明：创建数据库</p>
<p>CREATE DATABASE database-name</p>
<p>2、说明：删除数据库</p>
<p>drop database dbname</p>
<p>3、说明：备份sql server</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 创建 备份数据的 device</span></span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">master</span></span><br><span class="line">EXEC sp_addumpdevice <span class="string">&#x27;disk&#x27;</span>, <span class="string">&#x27;testBack&#x27;</span>, <span class="string">&#x27;c:\mssql7backup\MyNwind_1.dat&#x27;</span></span><br><span class="line"><span class="comment">--- 开始 备份</span></span><br><span class="line"><span class="keyword">BACKUP</span> <span class="keyword">DATABASE</span> pubs <span class="keyword">TO</span> testBack</span><br></pre></td></tr></table></figure>
<p>4、说明：创建新表</p>
<p>create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)</p>
<p>根据已有的表创建新表：<br>A：create table tab_new like tab_old (使用旧表创建新表)<br>B：create table tab_new as select col1,col2… from tab_old definition only</p>
<p>5、说明：删除新表</p>
<p>drop table tabname </p>
<p>6、说明：增加一个列</p>
<p>Alter table tabname add column col type</p>
<p>注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</p>
<p>7、说明：添加主键：Alter table tabname add primary key(col) </p>
<p>说明：删除主键：Alter table tabname drop primary key(col) </p>
<p>8、说明：创建索引：create [unique] index idxname on tabname(col….) </p>
<p>删除索引：drop index idxname<br>注：索引是不可更改的，想更改必须删除重新建。</p>
<p>9、说明：创建视图：create view viewname as select statement</p>
<p>删除视图：drop view viewname</p>
<p>10、说明：几个简单的基本的sql语句</p>
<p>选择：select <em> from table1 where 范围<br>插入：insert into table1(field1,field2) values(value1,value2)<br>删除：delete from table1 where 范围<br>更新：update table1 set field1=value1 where 范围<br>查找：select </em> from table1 where field1 like ’%value1%’ —-like的语法很精妙，查资料!<br>排序：select * from table1 order by field1,field2 [desc]<br>总数：select count as totalcount from table1<br>求和：select sum(field1) as sumvalue from table1<br>平均：select avg(field1) as avgvalue from table1<br>最大：select max(field1) as maxvalue from table1<br>最小：select min(field1) as minvalue from table1</p>
<p>11、说明：几个高级查询运算词</p>
<p>A：UNION 运算符 </p>
<p>UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。 </p>
<p>B：EXCEPT 运算符 </p>
<p>EXCEPT运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。</p>
<p>C：INTERSECT 运算符</p>
<p>INTERSECT运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。<br>注：使用运算词的几个查询结果行必须是一致的。 </p>
<p>12、说明：使用外连接 </p>
<p>A、left （outer） join：<br>左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。<br>SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c<br>B：right （outer） join:<br>右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。<br>C：full/cross （outer） join：<br>全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。</p>
<p>12、分组:Group by:</p>
<p>一张表，一旦分组 完成后，查询后只能得到组相关的信息。<br>组相关的信息：（统计信息） count,sum,max,min,avg  分组的标准)<br>在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据<br>在selecte统计函数中的字段，不能和普通的字段放在一起；</p>
<p>13、对数据库进行操作：</p>
<p>分离数据库：sp_detach_db;<br>附加数据库：sp_attach_db 后接表明，附加需要完整的路径名</p>
<p>14.如何修改数据库的名称:</p>
<p>sp_renamedb ‘old_name’, ‘new_name’</p>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)</p>
<p>法一：select <em> into b from a where 1&lt;&gt;1（仅用于SQlServer）<br>法二：select top 0 </em> into b from a</p>
<p>2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)</p>
<p>insert into b(a, b, c) select d,e,f from b;</p>
<p>3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径) (Access可用)</p>
<p>insert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where 条件<br>例子：..from b in ‘“&amp;Server.MapPath(“.”)&amp;”\data.mdb” &amp;”‘ where..</p>
<p>4、说明：子查询(表名1：a 表名2：b)</p>
<p>select a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3)</p>
<p>5、说明：显示文章、提交人和最后回复时间</p>
<p>select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b</p>
<p>6、说明：外连接查询(表名1：a 表名2：b)</p>
<p>select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c</p>
<p>7、说明：在线视图查询(表名1：a )</p>
<p>select * from (SELECT a,b,c FROM a) T where t.a &gt; 1;</p>
<p>8、说明：between的用法,between限制查询数据范围时包括了边界值,not between不包括</p>
<p>select * from table1 where time between time1 and time2<br>select a,b,c, from table1 where a not between 数值1 and 数值2</p>
<p>9、说明：in 的使用方法</p>
<p>select * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)</p>
<p>10、说明：两张关联表，删除主表中已经在副表中没有的信息 </p>
<p>delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )</p>
<p>11、说明：四表联查问题：</p>
<p>select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where …..</p>
<p>12、说明：日程安排提前五分钟提醒 </p>
<p>SQL: select * from 日程安排 where datediff(‘minute’,f开始时间,getdate())&gt;5</p>
<p>13、说明：一条sql 语句搞定数据库分页</p>
<p>select top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段</p>
<p>具体实现：关于数据库分页：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> @<span class="keyword">start</span> <span class="built_in">int</span>,@<span class="keyword">end</span> <span class="built_in">int</span></span><br><span class="line">  @<span class="keyword">sql</span>  <span class="keyword">nvarchar</span>(<span class="number">600</span>)</span><br><span class="line">  <span class="keyword">set</span> @<span class="keyword">sql</span>=’<span class="keyword">select</span> top’+<span class="keyword">str</span>(@<span class="keyword">end</span>-@<span class="keyword">start</span>+<span class="number">1</span>)+’+<span class="keyword">from</span> T <span class="keyword">where</span> rid <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> top’+<span class="keyword">str</span>(@<span class="keyword">str</span><span class="number">-1</span>)+’Rid <span class="keyword">from</span> T <span class="keyword">where</span> Rid&gt;<span class="number">-1</span>)’</span><br><span class="line">  exec sp_executesql @<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>
<p>注意：在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）</p>
<p>14、说明：前10条记录</p>
<p>select top 10 * form table1 where 范围</p>
<p>15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)</p>
<p>select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)</p>
<p>16、说明：包括所有在 TableA中但不在 TableB和TableC中的行并消除所有重复行而派生出一个结果表</p>
<p>(select a from tableA ) except (select a from tableB) except (select a from tableC)</p>
<p>17、说明：随机取出10条数据</p>
<p>select top 10 * from tablename order by newid()</p>
<p>18、说明：随机选择记录</p>
<p>select newid()</p>
<p>19、说明：删除重复记录</p>
<p>1) delete from tablename where id not in (select max(id) from tablename group by col1,col2,…)</p>
<p>2) select distinct <em> into temp from tablename<br>  delete from tablename<br>  insert into tablename select </em> from temp</p>
<p>评价：这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename</span><br><span class="line"><span class="comment">--添加一个自增列</span></span><br><span class="line"><span class="keyword">add</span>  column_b <span class="built_in">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> column_b <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(column_b) <span class="keyword">from</span> tablename <span class="keyword">group</span> <span class="keyword">by</span> column1,column2,...)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">drop</span> <span class="keyword">column</span> column_b</span><br></pre></td></tr></table></figure>
<p>20、说明：列出数据库里所有的表名</p>
<p>select name from sysobjects where type=’U’ // U代表用户</p>
<p>21、说明：列出表里的所有的列名</p>
<p>select name from syscolumns where id=object_id(‘TableName’)</p>
<p>22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。</p>
<p>select type,sum(case vender when ‘A’ then pcs else 0 end),sum(case vender when ‘C’ then pcs else 0 end),sum(case vender when ‘B’ then pcs else 0 end) FROM tablename group by type</p>
<p>显示结果：<br>type vender pcs<br>电脑 A 1<br>电脑 A 1<br>光盘 B 2<br>光盘 A 2<br>手机 B 3<br>手机 C 3</p>
<p>23、说明：初始化表table1</p>
<p>TRUNCATE TABLE table1</p>
<p>24、说明：选择从10到15的记录</p>
<p>select top 5 <em> from (select top 15 </em> from table order by id asc) table_别名 order by id desc</p>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>1、1=1，1=2的使用，在SQL语句组合时用的较多</p>
<p>“where 1=1” 是表示选择全部    “where 1=2”全部不选，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if @strWhere !=&#x27;&#x27; </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> @strSQL = <span class="string">&#x27;select count(*) as Total from [&#x27;</span> + @tblName + <span class="string">&#x27;] where &#x27;</span> + @strWhere</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> @strSQL = <span class="string">&#x27;select count(*) as Total from [&#x27;</span> + @tblName + <span class="string">&#x27;]&#x27;</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>我们可以直接写成</p>
<p>set @strSQL = ‘select count(*) as Total from [‘ + @tblName + ‘] where 1=1 安定 ‘+ @strWhere </p>
<p>2、收缩数据库</p>
<p>—重建索引<br>DBCC REINDEX<br>DBCC INDEXDEFRAG<br>—收缩数据和日志<br>DBCC SHRINKDB<br>DBCC SHRINKFILE</p>
<p>3、压缩数据库</p>
<p>dbcc shrinkdatabase(dbname)</p>
<p>4、转移数据库给新用户以已存在用户权限</p>
<p>exec sp_change_users_login ‘update_one’,’newname’,’oldname’<br>go</p>
<p>5、检查备份集</p>
<p>RESTORE VERIFYONLY from disk=’E:\dvbbs.bak’</p>
<p>6、修复数据库</p>
<p>ALTER DATABASE [dvbbs] SET SINGLE_USER<br>GO<br>DBCC CHECKDB(‘dvbbs’,repair_allow_data_loss) WITH TABLOCK<br>GO<br>ALTER DATABASE [dvbbs] SET MULTI_USER<br>GO</p>
<p>7、日志清除</p>
<p>SET NOCOUNT ON<br>DECLARE @LogicalFileName sysname,<br> @MaxMinutes INT,<br> @NewSize INT</p>
<p>USE tablename — 要操作的数据库名<br>SELECT  @LogicalFileName = ‘tablename_log’, — 日志文件名<br>@MaxMinutes = 10, — Limit on time allowed to wrap log.<br> @NewSize = 1  — 你想设定的日志文件的大小(M)</p>
<p>Setup / initialize<br>DECLARE @OriginalSize int<br>SELECT @OriginalSize = size<br> FROM sysfiles<br> WHERE name = @LogicalFileName<br>SELECT ‘Original Size of ‘ + db_name() + ‘ LOG is ‘ +<br> CONVERT(VARCHAR(30),@OriginalSize) + ‘ 8K pages or ‘ +<br> CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + ‘MB’<br> FROM sysfiles<br> WHERE name = @LogicalFileName<br>CREATE TABLE DummyTrans<br> (DummyColumn char (8000) not null)</p>
<p>DECLARE @Counter    INT,<br> @StartTime DATETIME,<br> @TruncLog   VARCHAR(255)<br>SELECT @StartTime = GETDATE(),<br> @TruncLog = ‘BACKUP LOG ‘ + db_name() + ‘ WITH TRUNCATE_ONLY’</p>
<p>DBCC SHRINKFILE (@LogicalFileName, @NewSize)<br>EXEC (@TruncLog)<br>— Wrap the log if necessary.<br>WHILE @MaxMinutes &gt; DATEDIFF (mi, @StartTime, GETDATE()) — time has not expired<br> AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName)<br> AND (@OriginalSize <em> 8 /1024) &gt; @NewSize<br> BEGIN — Outer loop.<br>SELECT @Counter = 0<br> WHILE   ((@Counter &lt; @OriginalSize / 16) AND (@Counter &lt; 50000))<br> BEGIN — update<br> INSERT DummyTrans VALUES (‘Fill Log’) DELETE DummyTrans<br> SELECT @Counter = @Counter + 1<br> END<br> EXEC (@TruncLog)<br> END<br>SELECT ‘Final Size of ‘ + db_name() + ‘ LOG is ‘ +<br> CONVERT(VARCHAR(30),size) + ‘ 8K pages or ‘ +<br> CONVERT(VARCHAR(30),(size</em>8/1024)) + ‘MB’<br> FROM sysfiles<br> WHERE name = @LogicalFileName<br>DROP TABLE DummyTrans<br>SET NOCOUNT OFF</p>
<p>8、说明：更改某个表</p>
<p>exec sp_changeobjectowner ‘tablename’,’dbo’</p>
<p>9、存储更改全部表</p>
<p>CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch<br>@OldOwner as NVARCHAR(128),<br>@NewOwner as NVARCHAR(128)<br>AS</p>
<p>DECLARE @Name    as NVARCHAR(128)<br>DECLARE @Owner   as NVARCHAR(128)<br>DECLARE @OwnerName   as NVARCHAR(128)</p>
<p>DECLARE curObject CURSOR FOR<br>select ‘Name’    = name,<br>   ‘Owner’    = user_name(uid)<br>from sysobjects<br>where user_name(uid)=@OldOwner<br>order by name</p>
<p>OPEN   curObject<br>FETCH NEXT FROM curObject INTO @Name, @Owner<br>WHILE(@@FETCH_STATUS=0)<br>BEGIN<br>if @Owner=@OldOwner<br>begin<br>   set @OwnerName = @OldOwner + ‘.’ + rtrim(@Name)<br>   exec sp_changeobjectowner @OwnerName, @NewOwner<br>end<br>— select @name,@NewOwner,@OldOwner</p>
<p>FETCH NEXT FROM curObject INTO @Name, @Owner<br>END</p>
<p>close curObject<br>deallocate curObject<br>GO</p>
<p>10、SQL SERVER中直接循环写入数据</p>
<p>declare @i int<br>set @i=1<br>while @i&lt;30<br>begin<br>    insert into test (userid) values(@i)<br>    set @i=@i+1<br>end</p>
<p>案例：</p>
<p>有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Name   scor</span><br><span class="line">Zhangshan 80</span><br><span class="line">Lishi 59</span><br><span class="line">Wangwu 50</span><br><span class="line">Songquan 69</span><br></pre></td></tr></table></figure>
<p>while((select min(score) from tb_table)<60) begin update tb_table set score="score*1.01" where score<60 if (select min(score) from tb_table)>60<br>  break<br> else<br>    continue<br>end</60)></p>
<h2 id="数据开发"><a href="#数据开发" class="headerlink" title="数据开发"></a>数据开发</h2><p>1.按姓氏笔画排序:</p>
<p>Select * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多</p>
<p>2.数据库加密:</p>
<p>select encrypt(‘原始密码’)<br>select pwdencrypt(‘原始密码’)<br>select pwdcompare(‘原始密码’,’加密后密码’) = 1—相同；否则不相同 encrypt(‘原始密码’)<br>select pwdencrypt(‘原始密码’)<br>select pwdcompare(‘原始密码’,’加密后密码’) = 1—相同；否则不相同</p>
<p>3.取回表中字段:</p>
<p>declare @list varchar(1000),<br>@sql nvarchar(1000)<br>select @list=@list+’,’+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name=’表A’<br>set @sql=’select ‘+right(@list,len(@list)-1)+’ from 表A’<br>exec (@sql)</p>
<p>4.查看硬盘分区:</p>
<p>EXEC master..xp_fixeddrives</p>
<p>5.比较A,B表是否相等:</p>
<p>if (select checksum_agg(binary_checksum(<em>)) from A)<br>     =<br>    (select checksum_agg(binary_checksum(</em>)) from B)<br>print ‘相等’<br>else<br>print ‘不相等’</p>
<p>6.杀掉所有的事件探察器进程:</p>
<p>DECLARE hcforeach CURSOR GLOBAL FOR SELECT ‘kill ‘+RTRIM(spid) FROM master.dbo.sysprocesses<br>WHERE program_name IN(‘SQL profiler’,N’SQL 事件探查器’)<br>EXEC sp_msforeach_worker ‘?’</p>
<p>7.记录搜索:</p>
<p>开头到N条记录Select Top N * From 表</p>
<p>N到M条记录(要有主索引ID)</p>
<p>Select Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID   Desc</p>
<p>N到结尾记录Select Top N * From 表 Order by ID Desc<br>案例例如1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。</p>
<p>select top 10 recid from A where recid not  in(select top 30 recid from A)</p>
<p>分析：如果这样写会产生某些问题，如果recid在表中存在逻辑索引。</p>
<p>select top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。</p>
<p>解决方案</p>
<p>1，用order by select top 30 recid from A order by ricid 如果该字段不是自增长，就会出现问题</p>
<p>2，在那个子查询中也加条件：select top 30 recid from A where recid&gt;-1</p>
<p>例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。<br>set @s = ‘select top 1 * from T   where pid not in (select top ‘ + str(@count-1) + ‘ pid  from  T)’</p>
<p>print @s      exec  sp_executesql  @s</p>
<p>9：获取当前数据库中的所有用户表</p>
<p>select Name from sysobjects where xtype=’u’ and status&gt;=0</p>
<p>10：获取某一个表的所有字段</p>
<p>select name from syscolumns where id=object_id(‘表名’)</p>
<p>select name from syscolumns where id in (select id from sysobjects where type = ‘u’ and name = ‘表名’)</p>
<p>两种方式的效果相同</p>
<p>11：查看与某一个表相关的视图、存储过程、函数</p>
<p>select a.* from sysobjects a, syscomments b where a.id = b.id and b.text like ‘%表名%’</p>
<p>12：查看当前数据库中所有存储过程</p>
<p>select name as 存储过程名称 from sysobjects where xtype=’P’</p>
<p>13：查询用户创建的所有数据库</p>
<p>select * from master..sysdatabases D where sid not in(select sid from master..syslogins where name=’sa’)<br>或者<br>select dbid, name AS DB_NAME from master..sysdatabases where sid &lt;&gt; 0x01</p>
<p>14：查询某一个表的字段和数据类型</p>
<p>select column_name,data_type from information_schema.columns<br>where table_name = ‘表名’</p>
<p>15：不同服务器数据库之间的数据操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建链接服务器</span></span><br><span class="line">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br><span class="line">exec sp_addlinkedsrvlogin &#x27;ITSV &#x27;, &#x27;false &#x27;,null, &#x27;用户名 &#x27;, &#x27;密码 &#x27;</span><br><span class="line"><span class="comment">--查询示例</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ITSV.数据库名.dbo.表名</span><br><span class="line"><span class="comment">--导入示例</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> 表 <span class="keyword">from</span> ITSV.数据库名.dbo.表名</span><br><span class="line"><span class="comment">--以后不再使用时删除链接服务器</span></span><br><span class="line">exec sp_dropserver <span class="string">&#x27;ITSV &#x27;</span>, <span class="string">&#x27;droplogins &#x27;</span></span><br><span class="line"><span class="comment">--连接远程/局域网数据(openrowset/openquery/opendatasource)</span></span><br><span class="line"><span class="comment">--1、openrowset</span></span><br><span class="line"><span class="comment">--查询示例</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> openrowset( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;sql服务器名 &#x27;</span>; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br><span class="line"><span class="comment">--生成本地表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> 表 <span class="keyword">from</span> openrowset( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;sql服务器名 &#x27;</span>; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br><span class="line"><span class="comment">--把本地表导入远程表</span></span><br><span class="line"><span class="keyword">insert</span> openrowset( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;sql服务器名 &#x27;</span>; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> 本地表</span><br><span class="line"><span class="comment">--更新本地表</span></span><br><span class="line"><span class="keyword">update</span> b</span><br><span class="line"><span class="keyword">set</span> b.列A=a.列A</span><br><span class="line"> <span class="keyword">from</span> openrowset( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;sql服务器名 &#x27;</span>; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)as a inner join 本地表 b</span><br><span class="line">on a.column1=b.column1</span><br><span class="line"><span class="comment">--openquery用法需要创建一个连接</span></span><br><span class="line"><span class="comment">--首先创建一个连接创建链接服务器</span></span><br><span class="line">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br><span class="line"><span class="comment">--查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> openquery(ITSV, <span class="string">&#x27;SELECT * FROM 数据库.dbo.表名 &#x27;</span>)</span><br><span class="line"><span class="comment">--把本地表导入远程表</span></span><br><span class="line"><span class="keyword">insert</span> openquery(ITSV, <span class="string">&#x27;SELECT * FROM 数据库.dbo.表名 &#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 本地表</span><br><span class="line"><span class="comment">--更新本地表</span></span><br><span class="line"><span class="keyword">update</span> b <span class="keyword">set</span> b.列B=a.列B <span class="keyword">FROM</span> openquery(ITSV, <span class="string">&#x27;SELECT * FROM 数据库.dbo.表名 &#x27;</span>) <span class="keyword">as</span> a <span class="keyword">inner</span> <span class="keyword">join</span> 本地表 b <span class="keyword">on</span> a.列A=b.列A</span><br><span class="line"><span class="comment">--3、opendatasource/openrowset</span></span><br><span class="line"><span class="keyword">SELECT</span>   * <span class="keyword">FROM</span>   opendatasource( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#x27;</span> ).test.dbo.roy_ta</span><br><span class="line"><span class="comment">--把本地表导入远程表</span></span><br><span class="line"><span class="keyword">insert</span> opendatasource( <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#x27;</span>).数据库.dbo.表名</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 本地表</span><br></pre></td></tr></table></figure>
<h2 id="SQL-Server基本函数"><a href="#SQL-Server基本函数" class="headerlink" title="SQL Server基本函数"></a>SQL Server基本函数</h2><p>1.字符串函数 长度与分析用</p>
<p>1,datalength(Char_expr) 返回字符串包含字符数,但不包含后面的空格<br>2,substring(expression,start,length) 取子串，字符串的下标是从“1”，start为起始位置，length为字符串长度，实际应用中以len(expression)取得其长度<br>3,right(char_expr,int_expr) 返回字符串右边第int_expr个字符，还用left于之相反<br>4,isnull( check_expression , replacement_value )如果check_expression為空，則返回replacement_value的值，不為空，就返回check_expression字符操作类<br>5,Sp_addtype自定義數據類型<br>例如：EXEC sp_addtype birthday, datetime, ‘NULL’<br>6,set nocount {on|off}<br>使返回的结果中不包含有关受 Transact-SQL 语句影响的行数的信息。如果存储过程中包含的一些语句并不返回许多实际的数据，则该设置由于大量减少了网络流量，因此可显著提高性能。SET NOCOUNT 设置是在执行或运行时设置，而不是在分析时设置。</p>
<p>SET NOCOUNT 为 ON 时，不返回计数（表示受 Transact-SQL 语句影响的行数）。<br>SET NOCOUNT 为 OFF 时，返回计数</p>
<h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><p>在SQL查询中：from后最多可以跟多少张表或视图：256<br>在SQL语句中出现 Order by,查询时，先排序，后取<br>在SQL中，一个字段的最大容量是8000，而对于nvarchar(4000),由于nvarchar是Unicode码。 </p>
<p>SQLServer2000同步复制技术实现步骤</p>
<p>一、 预备工作</p>
<p>1.发布服务器,订阅服务器都创建一个同名的windows用户,并设置相同的密码,做为发布快照文件夹的有效访问用户<br>—管理工具<br>—计算机管理<br>—用户和组<br>—右键用户<br>—新建用户<br>—建立一个隶属于administrator组的登陆windows的用户（SynUser）</p>
<p>2.在发布服务器上,新建一个共享目录,做为发布的快照文件的存放目录,操作:<br>我的电脑—D:\ 新建一个目录,名为: PUB<br>—右键这个新建的目录<br>—属性—共享<br>—选择”共享该文件夹”<br>—通过”权限”按纽来设置具体的用户权限,保证第一步中创建的用户(SynUser) 具有对该文件夹的所有权限<br>—确定</p>
<p>3.设置SQL代理(SQLSERVERAGENT)服务的启动用户(发布/订阅服务器均做此设置)<br>开始—程序—管理工具—服务<br>—右键SQLSERVERAGENT<br>—属性—登陆—选择”此账户”<br>—输入或者选择第一步中创建的windows登录用户名（SynUser）<br>—“密码”中输入该用户的密码</p>
<p>4.设置SQL Server身份验证模式,解决连接时的权限问题(发布/订阅服务器均做此设置)<br>企业管理器<br>—右键SQL实例—属性<br>—安全性—身份验证<br>—选择”SQL Server 和 Windows”<br>—确定</p>
<p>5.在发布服务器和订阅服务器上互相注册<br>企业管理器<br>—右键SQL Server组<br>—新建SQL Server注册…<br>—下一步—可用的服务器中,输入你要注册的远程服务器名 —添加<br>—下一步—连接使用,选择第二个”SQL Server身份验证”<br>—下一步—输入用户名和密码（SynUser）<br>—下一步—选择SQL Server组,也可以创建一个新组<br>—下一步—完成</p>
<p>6.对于只能用IP,不能用计算机名的,为其注册服务器别名（此步在实施中没用到）<br> (在连接端配置,比如,在订阅服务器上配置的话,服务器名称中输入的是发布服务器的IP)<br>开始—程序—Microsoft SQL Server—客户端网络实用工具<br>—别名—添加<br>—网络库选择”tcp/ip”—服务器别名输入SQL服务器名<br>—连接参数—服务器名称中输入SQL服务器ip地址<br>—如果你修改了SQL的端口,取消选择”动态决定端口”,并输入对应的端口号</p>
<p>二、 正式配置</p>
<p>1、配置发布服务器</p>
<p>打开企业管理器，在发布服务器（B、C、D）上执行以下步骤:<br>(1) 从[工具]下拉菜单的[复制]子菜单中选择[配置发布、订阅服务器和分发]出现配置发布和分发向导<br>(2) [下一步] 选择分发服务器 可以选择把发布服务器自己作为分发服务器或者其他sql的服务器（选择自己）<br>(3) [下一步] 设置快照文件夹<br>采用默认\\servername\Pub<br>(4) [下一步] 自定义配置<br>可以选择:是,让我设置分发数据库属性启用发布服务器或设置发布设置<br>否,使用下列默认设置（推荐）<br>(5) [下一步] 设置分发数据库名称和位置 采用默认值<br>(6) [下一步] 启用发布服务器 选择作为发布的服务器<br>(7) [下一步] 选择需要发布的数据库和发布类型<br>(8) [下一步] 选择注册订阅服务器<br>(9) [下一步] 完成配置</p>
<p>2、创建出版物</p>
<p>发布服务器B、C、D上<br>(1)从[工具]菜单的[复制]子菜单中选择[创建和管理发布]命令<br>(2)选择要创建出版物的数据库，然后单击[创建发布]<br>(3)在[创建发布向导]的提示对话框中单击[下一步]系统就会弹出一个对话框。对话框上的内容是复制的三个类型。我们现在选第一个也就是默认的快照发布(其他两个大家可以去看看帮助)<br>(4)单击[下一步]系统要求指定可以订阅该发布的数据库服务器类型,<br>SQLSERVER允许在不同的数据库如 orACLE或ACCESS之间进行数据复制。<br>但是在这里我们选择运行”SQL SERVER 2000”的数据库服务器<br>(5)单击[下一步]系统就弹出一个定义文章的对话框也就是选择要出版的表<br>注意: 如果前面选择了事务发布 则再这一步中只能选择带有主键的表<br>(6)选择发布名称和描述<br>(7)自定义发布属性 向导提供的选择:<br>是 我将自定义数据筛选,启用匿名订阅和或其他自定义属性<br>否 根据指定方式创建发布 （建议采用自定义的方式）<br>(8)[下一步] 选择筛选发布的方式<br>(9)[下一步] 可以选择是否允许匿名订阅<br>1)如果选择署名订阅,则需要在发布服务器上添加订阅服务器<br>方法: [工具]-&gt;[复制]-&gt;[配置发布、订阅服务器和分发的属性]-&gt;[订阅服务器] 中添加<br>否则在订阅服务器上请求订阅时会出现的提示:改发布不允许匿名订阅<br>如果仍然需要匿名订阅则用以下解决办法<br>[企业管理器]-&gt;[复制]-&gt;[发布内容]-&gt;[属性]-&gt;[订阅选项] 选择允许匿名请求订阅<br>2)如果选择匿名订阅,则配置订阅服务器时不会出现以上提示<br>(10)[下一步] 设置快照 代理程序调度<br>(11)[下一步] 完成配置<br>当完成出版物的创建后创建出版物的数据库也就变成了一个共享数据库<br>有数据<br>srv1.库名..author有字段:id,name,phone,<br>srv2.库名..author有字段:id,name,telphone,adress</p>
<p>要求：<br>srv1.库名..author增加记录则srv1.库名..author记录增加<br>srv1.库名..author的phone字段更新，则srv1.库名..author对应字段telphone更新<br>—*/</p>
<p>—大致的处理步骤<br>—1.在 srv1 上创建连接服务器,以便在 srv1 中操作 srv2,实现同步<br>exec sp_addlinkedserver ‘srv2’,’’,’SQLOLEDB’,’srv2的sql实例名或ip’<br>exec sp_addlinkedsrvlogin ‘srv2’,’false’,null,’用户名’,’密码’<br>go<br>—2.在 srv1 和 srv2 这两台电脑中,启动 msdtc(分布式事务处理服务),并且设置为自动启动<br>。我的电脑—控制面板—管理工具—服务—右键 Distributed Transaction Coordinator—属性—启动—并将启动类型设置为自动启动<br>go</p>
<p>—然后创建一个作业定时调用上面的同步处理存储过程就行了</p>
<p>企业管理器<br>—管理<br>—SQL Server代理<br>—右键作业<br>—新建作业<br>—“常规”项中输入作业名称<br>—“步骤”项<br>—新建<br>—“步骤名”中输入步骤名<br>—“类型”中选择”Transact-SQL 脚本(TSQL)”<br>—“数据库”选择执行命令的数据库<br>—“命令”中输入要执行的语句: exec p_process<br>—确定<br>—“调度”项<br>—新建调度<br>—“名称”中输入调度名称<br>—“调度类型”中选择你的作业执行安排<br>—如果选择”反复出现”<br>—点”更改”来设置你的时间安排</p>
<p>然后将SQL Agent服务启动,并设置为自动启动,否则你的作业不会被执行</p>
<p>设置方法:</p>
<p>我的电脑—控制面板—管理工具—服务—右键 SQLSERVERAGENT—属性—启动类型—选择”自动启动”—确定.<br>—3.实现同步处理的方法2,定时同步<br>—在srv1中创建如下的同步处理存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> proc p_process <span class="keyword">as</span></span><br><span class="line"><span class="comment">--更新修改过的数据</span></span><br><span class="line"><span class="keyword">update</span> b <span class="keyword">set</span> <span class="keyword">name</span>=i.name,telphone=i.telphone</span><br><span class="line"><span class="keyword">from</span> srv2.库名.dbo.author b,author i</span><br><span class="line"><span class="keyword">where</span> b.id=i.id <span class="keyword">and</span></span><br><span class="line">(b.name &lt;&gt; i.name <span class="keyword">or</span> b.telphone &lt;&gt; i.telphone)</span><br><span class="line"><span class="comment">--插入新增的数据</span></span><br><span class="line"><span class="keyword">insert</span> srv2.库名.dbo.author(<span class="keyword">id</span>,<span class="keyword">name</span>,telphone)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,telphone <span class="keyword">from</span> author i</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> srv2.库名.dbo.author <span class="keyword">where</span> <span class="keyword">id</span>=i.id)</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除已经删除的数据(如果需要的话)</span></span><br><span class="line"><span class="keyword">delete</span> b</span><br><span class="line"><span class="keyword">from</span> srv2.库名.dbo.author b</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> author <span class="keyword">where</span> <span class="keyword">id</span>=b.id)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>
<p>来源：cnblogs.com/liuqifeng/p/9148831.html</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins+svn持续集成</title>
    <url>/archives/2da40177/</url>
    <content><![CDATA[<p><img src="/archives/2da40177/1.png" alt=" "></p>
<p>环境：<br>kettle设计软件，windows平台，svn客户端使用tortoisesvn客户端</p>
<p>svn服务器：192.168.1.185，使用visual svn软件做服务器</p>
<p>kettle软件和调度平台在同一服务器：192.168.1.200</p>
<p>jenkins服务器：192.168.1.200</p>
<p>最近有个数据仓库的项目，需要使用ETL工具kettle来进行，而kettle的调度任务平台可以提供直接读取kettle的ktr和kjb文件，或者通过数据库来读取，使用文件方式非常方便，但是设计完kettle作业后，需要同步文件到调度平台读取，手工拷贝方式太麻烦，就是用现有的svn平台来进行持续集成。通过设置本地kettle作业设计文件夹到svn，自动同步到svn，jenkins再自动更新任务版本，服务器中创建jenkins集成文件的软链接，提供给kettle任务调度平台读取。</p>
<h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><h3 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h3><p>新建一个资源库，新建一个用户访问该资源库</p>
<p><img src="/archives/2da40177/2.png" alt=" "></p>
<p>点击新建的资源库，可以看到资源库地址，后面要用到这个地址</p>
<p><img src="/archives/2da40177/3.png" alt=" "></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>安装完tortoisesvn，右击需要同步的文件夹，然后点检出，填上资源库地址，用户名和密码就行</p>
<p><img src="/archives/2da40177/4.png" alt=" "></p>
<p>同步的文件夹会有一个绿色勾标记，需要刷新图标缓存或者重启即会显示。</p>
<h2 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h2><p>jenkins安装有几种方式，具体可以看官方说明，这里基于tomcat：<br><a href="https://www.jenkins.io/doc/book/installing/linux/#red-hat-centos">https://www.jenkins.io/doc/book/installing/linux/#red-hat-centos</a></p>
<h3 id="检查JDK环境"><a href="#检查JDK环境" class="headerlink" title="检查JDK环境"></a>检查JDK环境</h3><p>jenkins基于java，需要安装JDK环境，也可以使用docker更方便：<br><code>java -version</code></p>
<p>如果没有，则需安装，这里要注意，不同版本的jenkins要用不同的java版本，具体可以看官网：<br><a href="https://get.jenkins.io/war-stable/">https://get.jenkins.io/war-stable/</a></p>
<p>这里选择安装java 8（即jdk-1.8)：<br><code>yum -y install java-1.8.0-openjdk*</code></p>
<p>yum安装java默认安装目录为usr/lib/jvm</p>
<h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><p>安装并启动 Tomcat；</p>
<p>从官网下载 jenkins.war 至 $CATALINA_BASE/webapps，Tomcat 会自动部署；</p>
<p>浏览器访问：<a href="http://centos:8080/jenkins/">http://centos:8080/jenkins/</a></p>
<h3 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h3><p>输入命令以找到密码：<br><code>tail /var/lib/jenkins/secrets/initialAdminPassword</code></p>
<p>输入密码后,进入插件安装页面。点击Install suggested plugins,安装默认插件。</p>
<p>安装完成后，页面会自动进入管理员账户注册页面，创建账号</p>
<p>全局安全设置：</p>
<p>默认情况下，任何用户都可以使用 Jenkins 进行发布。可以进入相关设置：系统管理 / 全局安全设置（Configure Global Security），选择 Jenkins专有用户数据库，不要选中 允许用户注册，选择 登录用户可以做任何事，选中 Allow anonymous read access</p>
<p><img src="/archives/2da40177/5.png" alt=" "></p>
<p><img src="/archives/2da40177/6.png" alt=" "></p>
<p>全局工具配置</p>
<p>进入：系统管理 / 全局工具设置（Global Tool Configuration）</p>
<p>JDK 下不勾选“自动安装”，指定别名=JDK-1.8.0_342, JAVA_HOME=/usr/java/jdk1.8.0_342</p>
<p>插件配置<br>首页  &gt;&gt; Manager Jenkins(系统管理)   &gt;&gt; Manage Plugins(插件管理)<br>Subversion    # 版本管理 SVN 的插件</p>
<p>确保这个插件已经安装，如果已安装中没有这几个插件，到可选插件中搜索并安装，安装失败可重试或者下载在“高级”界面通过hpi上传</p>
<p>新建一个项目：</p>
<p><img src="/archives/2da40177/7.png" alt=" "></p>
<p><img src="/archives/2da40177/8.png" alt=" "></p>
<p><img src="/archives/2da40177/9.png" alt=" "></p>
<p><img src="/archives/2da40177/10.png" alt=" "></p>
<p>这样，当有新的提交后，就会自动同步到jenkins</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓部署使用</title>
    <url>/archives/41789693/</url>
    <content><![CDATA[<p><img src="/archives/41789693/1.png" alt=" "></p>
<h2 id="数据仓"><a href="#数据仓" class="headerlink" title="数据仓"></a>数据仓</h2><h2 id="ETL工具"><a href="#ETL工具" class="headerlink" title="ETL工具"></a>ETL工具</h2><h3 id="工具对比"><a href="#工具对比" class="headerlink" title="工具对比"></a>工具对比</h3><p>【国外】<br>1、datastage （收费）<br>点评：最专业的ETL工具， 2005年被IBM收购，目前发展到11.7版本。在数据集成的基础上，增加了数据质量分析、数据血缘分析、业务元数据管理等内容。技术支持也比较少，使用难度较大，尤其不菲的价格，导致国内用户较少。<br>2、informatica （收费）<br>点评：informatica创立于1993年，专业程度与Datastage旗鼓相当，有4个不同版本，即：标准版，实时版，高级版，云计算版。按用户许可收费，价格比Datastage便宜点。不具有数据质量功能，需要以编程方式进行处理。，没有任何Web集成功能。Informatica与datastage一样需要更高的学习成本。<br>3、ODI （收费）<br>点评：oracle数据库厂商提供的工具，有局限性，与oracle数据库耦合太深。ODI属于ELT架构，将数据传输到目标数据后，再目标数据库进行数据清洗转换处理，如果流程过多会对目标数据库有一定压力。对Web集成功能比较弱，运行监控能力比较差，获取技术支持比较困难。<br>4、kettle（免费）<br>点评：业界最有名的开源ETL工具。开源当然就免费，免费的有些东西使用就不是很方便。社区版缺乏项目管理、流程管理、运行监控功能，商业版有提供，价格比较高。适合用于少量流程或作为ETL的研究学习。</p>
<p>【国内】</p>
<ol>
<li>Datax （免费）<br>点评：产品化程度还有一定距离。由于没有可视化开发界面，需要编写Java代码。数据清洗转换的能力比较弱，但在大数据传输能力比较好。</li>
<li>Restcloud（免费）<br>点评：国产比较好的ETL工具之一，采用B/S架构，可视化化开发，在数据传输与处理的能力与kettle相当，学习成本较低。与kettle比较，增加项目管理、流程管理、质量监测等功能。由于推出时间较短，技术支持目前只能通过社区获取。</li>
</ol>
<p>其实还有其他比较优秀的，因为公司的流量不大，就选用开源的kettle。</p>
<h3 id="kettle使用"><a href="#kettle使用" class="headerlink" title="kettle使用"></a>kettle使用</h3><p>kettle纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。</p>
<p>Kettle工程存储方式：<br>1、以XML形式存储<br>2、以资源库方式存储(数据库资源库和文件资源库)</p>
<p>Kettle的两种设计：<br><img src="/archives/41789693/2.png" alt=" "></p>
<p>Kettle的组成:<br><img src="/archives/41789693/3.png" alt=" "></p>
<p>任务保存：<br>数据库资源需要连接数据库，这里已经用docker创建了kettle相关的数据库，然后使用kettle创建数据库资源库。需要注意的是，创建数据库资源库后，会在C:\USER\XXX.KETTLE目录下生成一个resources.xml的文件，该文件记录了数据库连接的信息，如果用linux版本的任务调度工具，需要把该文件拷贝到相应目录才行</p>
<h2 id="任务调度工具"><a href="#任务调度工具" class="headerlink" title="任务调度工具"></a>任务调度工具</h2><p>1、kettle-web<br>2、taskctl<br>官网：<a href="http://www.taskctl.com/">http://www.taskctl.com/</a></p>
<p>基础版就已经够用，2022官方新版本8.0，官方建议使用web平台，根据官方教程搭建服务器和客户端，搭建好后使用taskctl的kettle插件来执行kettle任务。</p>
<p>安装教程：<br><a href="http://www.taskctl.com/forum/detail_124.html">http://www.taskctl.com/forum/detail_124.html</a></p>
<p>查看配置文件说明：<br><code>su - kettle</code><br><code>iconv -f gbk -t utf-8 $TASKCTLDIR/src/plugin/ktrjob/shell/cprunktrjob.sh</code></p>
<p>其中有说明kettle的ktr和kjb是如何定义的，通过读取xml标签来获取参数，例如ktr作业：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(三) 作业定义举例:</span><br><span class="line"><span class="comment">#    1.  </span></span><br><span class="line"><span class="comment">#       &lt;[kettle转换类作业自定义作业类型名]&gt;</span></span><br><span class="line"><span class="comment">#           &lt;name&gt;job1&lt;/name&gt;</span></span><br><span class="line"><span class="comment">#           &lt;progname&gt;[.ktr文件位置和文件名]&lt;/progname&gt; </span></span><br><span class="line"><span class="comment">#           &lt;exppara&gt;pan.sh文件所在文件夹&lt;/exppara&gt;</span></span><br><span class="line"><span class="comment">#       &lt;[kettle转换类作业自定义作业类型名]&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    2.  </span></span><br><span class="line"><span class="comment">#       &lt;ktrjob&gt;</span></span><br><span class="line"><span class="comment">#           &lt;name&gt;job2&lt;/name&gt;</span></span><br><span class="line"><span class="comment">#           &lt;progname&gt;/home/username/trans.ktr&lt;/progname&gt; </span></span><br><span class="line"><span class="comment">#           &lt;para&gt;filepath=/home/username,filename=test.txt&lt;/para&gt;</span></span><br><span class="line"><span class="comment">#           &lt;exppara&gt;env=/home/pdi-ce/data-integration&lt;/exppara&gt;</span></span><br><span class="line"><span class="comment">#       &lt;/ktrjob&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    3.  </span></span><br><span class="line"><span class="comment">#       &lt;ktrjob&gt;</span></span><br><span class="line"><span class="comment">#           &lt;name&gt;job3&lt;/name&gt;</span></span><br><span class="line"><span class="comment">#           &lt;progname&gt;/home/username/trans.ktr&lt;/progname&gt; </span></span><br><span class="line"><span class="comment">#           &lt;para&gt;filepath=/home/username,filename=test.txt&lt;/para&gt;</span></span><br><span class="line"><span class="comment">#           &lt;exppara&gt;env=/home/pdi-ce/data-integration,rep=myrep1,user=admin,pass=admin&lt;/exppara&gt;</span></span><br><span class="line"><span class="comment">#       &lt;/ktrjob&gt;</span></span><br><span class="line"><span class="comment">#   </span></span><br></pre></td></tr></table></figure>
<p>拷贝windows版本上的resources.xml文件到/home/kettle/.kettle目录（插件默认读取该文件的数据库连接信息）</p>
<p>登陆taskctl网页，进入admin模块，点击作业类型，可以见到ktrjob和kjbjob的插件<br><img src="/archives/41789693/4.png" alt=" "></p>
<p>选择designer模块，添加作业资源，点击设计资源，选择作业资源：<br><img src="/archives/41789693/5.png" alt=" "></p>
<p>点击加号添加作业资源，这里我设置了两种资源，一种是直接读取本地目录的文件，另一种是读取kettle的数据库资源（预先在kettle的windows环境里面创建好了）</p>
<h3 id="直接读取文件设置"><a href="#直接读取文件设置" class="headerlink" title="直接读取文件设置"></a>直接读取文件设置</h3><p><img src="/archives/41789693/6.png" alt=" "></p>
<p>驱动类型选择 file_explorer<br>资源链接方式选择filter_by_extension<br>文件目录填作业文件的路径，扩展名是转换作业的填.ktr(ktrjob)是作业的填.kjb(kjbjob)<br>关联作业类型可以填写作业类型的环境参数，这里只需要填kettle软件的路径就行。</p>
<p>回到控制容器，选择右上角的作业设计，左侧可以选择刚刚建立的作业资源，点击查询，获取到文件名，直接拖到加号创建作业<br><img src="/archives/41789693/7.png" alt=" "></p>
<p>选取运行代理和执行时间计划后提交保存，然后编译发布，就可以到监控模块见到该作业，这里可以先点作业进行调试，调试成功后再点发布，就可以到monitor模块进行作业调度<br>可以通过代码标签切换查看代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--************************************************************* </span></span><br><span class="line"><span class="comment">   TASKCTL技术平台模块文件 </span></span><br><span class="line"><span class="comment">      工程名称：IOT </span></span><br><span class="line"><span class="comment">    定时器名称: IOT任务调度 </span></span><br><span class="line"><span class="comment">      模块名称: MainModul </span></span><br><span class="line"><span class="comment"> *****************************************************************--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">serial</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>MainModul_rootnode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monititle</span>&gt;</span>监控组1<span class="tag">&lt;/<span class="name">monititle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">begin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>MainModul_beginjob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jobdesc</span>&gt;</span>begin<span class="tag">&lt;/<span class="name">jobdesc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">begin</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  用户模块代码自定义区开始 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  用户模块代码自定义区结束 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ktrjob</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>直接读取MATERIAL文件执行<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">progname</span>&gt;</span>/data/kettle/data-integration/workspace/TRA_DW_DIM_MATERIAL.ktr<span class="tag">&lt;/<span class="name">progname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exppara</span>&gt;</span>env=/data/kettle/data-integration,/data/kettle/data-integration<span class="tag">&lt;/<span class="name">exppara</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jobdesc</span>&gt;</span>直接读取MATERIAL文件执行<span class="tag">&lt;/<span class="name">jobdesc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">agentid</span>&gt;</span>svrnode<span class="tag">&lt;/<span class="name">agentid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timingplan</span>&gt;</span>000000 m 1<span class="tag">&lt;/<span class="name">timingplan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">monititle</span>&gt;</span>监控组1<span class="tag">&lt;/<span class="name">monititle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ktrjob</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从插件配置文件说明：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#       (一) 功能: 在CTL服务或代理用户执行kettle转换</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       (二) 参数: 在TASKCTL所有插件中，具有以下统一的参数接口</span></span><br><span class="line"><span class="comment">#       1. tccid		【无用】容器（流程或定时器）ID    </span></span><br><span class="line"><span class="comment">#       2. jobid		【无用】作业ID</span></span><br><span class="line"><span class="comment">#       3. progname		【有用】程序名称。程序名对应作业类型的progname属性</span></span><br><span class="line"><span class="comment">#       4. para			【有用】参数信息。参数信息对应作业类型的para属性</span></span><br><span class="line"><span class="comment">#       5. exppara	    【有用】环境参数信息。环境参数信息对作业类型的exppara属性</span></span><br><span class="line"><span class="comment">#       6. hostuser 	【无用】远程主机用户链接信息。远程主机用户链接信息对应作业类型的hostuser属性    </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       参数说明：</span></span><br><span class="line"><span class="comment">#       (1) progname: 一般为文件系统(.ktr)或资源库的完整路径及名称</span></span><br><span class="line"><span class="comment">#           </span></span><br><span class="line"><span class="comment">#       (2) para    : 一般为kettle作业的命名参数或变量</span></span><br><span class="line"><span class="comment">#            </span></span><br><span class="line"><span class="comment">#       (3) exppara : 一般为kettle的pan.sh文件所在位置。例如：/home/pdi-ce/data-integration，若需要调用资源库，则需要增加rep(资源库名称)，user(资源库用户)，pass(资源库密码)</span></span><br></pre></td></tr></table></figure></p>
<p>插件会读取：</p>
<p><ktrjob> — 确定是ktrjob的任务</ktrjob></p>
<p><progname> — 读取文件路径（全路径需加后缀）</progname></p>
<p><exppara> — 读取环境参数，如果直接读取文件，则不用rep参数</exppara></p>
<h3 id="读取数据库资源库"><a href="#读取数据库资源库" class="headerlink" title="读取数据库资源库"></a>读取数据库资源库</h3><p>作业资源库配置实例：<br><img src="/archives/41789693/8.png" alt=" "></p>
<p>驱动类型选择kttle_explorer<br>资源链接方式选择db_repository<br>其他填写数据库连接的信息，同样需要添加管理作业类型，添加ktr，参数为：<br><code>env=/data/kettle/data-integration,rep=test,user=admin,pass=admin</code><br>按照上面添加读取文件一样添加作业即可。</p>
<p>代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ktrjob</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>数据库资源读取MATERIAL文件<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">progname</span>&gt;</span>/TO_EDW/TRA_DW_DIM_MATERIAL<span class="tag">&lt;/<span class="name">progname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exppara</span>&gt;</span>env=/data/kettle/data-integration,rep=test,user=admin,pass=admin<span class="tag">&lt;/<span class="name">exppara</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jobdesc</span>&gt;</span>数据库资源读取MATERIAL文件<span class="tag">&lt;/<span class="name">jobdesc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">agentid</span>&gt;</span>svrnode<span class="tag">&lt;/<span class="name">agentid</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">timingplan</span>&gt;</span>000000 m 1<span class="tag">&lt;/<span class="name">timingplan</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">monititle</span>&gt;</span>监控组1<span class="tag">&lt;/<span class="name">monititle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ktrjob</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里多了rep参数，插件通过这个参数来识别读取类型是否为资源库。然后读取数据库资源的时候，会调用/home/kettle/.kettle目录密码的resources.xml文件的数据库连接参数来连接数据库资源文件。我之前执行任务的时候怎么都报错，说该作业文件不是一个文件，后来才明白，在网页添加的数据库连接参数是插件来获取资源信息，而执行任务的时候是kettle软件pan.sh来读取数据库资源，所以如果没有该数据库连接资源文件，则会执行错误。</p>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p><img src="/archives/41789693/9.png" alt=" "></p>
<p>在designer模块任务发布后，就可以在调度监控看到，如果修改了作业，重新发布后，需要在实时监控退出的状态下重载，以获取最新的任务信息。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>一项网络工程</title>
    <url>/archives/c0cffff5/</url>
    <content><![CDATA[<p><img src="/archives/c0cffff5/1.png" alt=" "></p>
<p>最近伙伴有一项简单的网络工程需要配置设备，就答应帮忙配置，顺便回顾下网络知识，拓扑如下：</p>
<p><img src="/archives/c0cffff5/2.png" alt=" "></p>
<p>说明：<br>该公司使用电信千兆宽带接入，通过光猫接到路由器，品牌是维盟的，路由器下接入三层交换机，交换机是华为S5735-L48系列，当核心交换机用。<br>需求：<br>公司分5层楼，每层楼接有一个接入交换机，通过光纤到核心交换机，每层楼配置一个VLAN可以互访，所有VLAN均可上网。<br>难点：<br>路由器对接三层交换机，每个VLAN通过三层交换机进行上网。</p>
<h3 id="规划："><a href="#规划：" class="headerlink" title="规划："></a>规划：</h3><p>1楼使用VLAN 11，网关192.168.11.254<br>2楼使用VLAN 12，网关192.168.12.254<br>3楼使用VLAN 13，网关192.168.13.254<br>4楼使用VLAN 14，网关192.168.14.254<br>5楼使用VLAN 15，网关192.168.15.254<br>AP使用VLAN 16，网关192.168.16.254，使用47口<br>服务器使用 VLAN 10，网关192.168.0.254<br>路由器默认地址：192.168.8.1<br>因为交换机没有NAT功能，只能依靠路由器进行上网，单独设置一个VLAN与路由器通信：<br>交换机与路由器互通VLAN 100，网关192.168.8.254，使用48口</p>
<h3 id="详细配置："><a href="#详细配置：" class="headerlink" title="详细配置："></a>详细配置：</h3><p>交换机：<br>默认交换机使用WEB方式可以进行配置，但是WEB方式太麻烦，登录后需要更改命令行模式<br>首先要用电脑的网卡接入到交换机的G0/0/1端口，默认WEB访问只开放这个端口，后面可以修改全部端口都可访问。按着交换机面板MODE键不放，一直到LED灯从闪到常亮放开，电脑网卡手动配置IP:192.168.1.X，配置好后浏览器访问<a href="http://192.168.1.253，默认的地址">http://192.168.1.253，默认的地址</a><br>首次登陆需要修改密码，登陆后，第一件事就是配置telnet登陆，使用admin用户配置勾选telnet，修改密码后保存就可以。</p>
<p>1、创建VLAN，配置VLANIF的IP地址<br><code>vlan batch xxx</code><br><code>inter vlan x</code><br><code>ip addr xxxx</code><br><code>dhcp select global</code><br>2、创建DHCP，IP POOL<br><code>dhcp enable</code><br><code>ip pool xxx</code><br><code>gateway-list 192.168.1.254</code> 地址池网关<br><code>network 192.168.1.0 mask 255.255.255.0</code>  地址池下发网段<br><code>dns-list 192.168.1.254</code> dns地址<br>3、配置端口绑定VLAN，其中48口也配置成access模式<br>4、配置静态路由：ip route-static 0.0.0.0 0.0.0.0 192.168.8.1，这样默认就会走VLAN 100出去</p>
<p>路由器：<br>配置静态路由回程：目标192.168.11.254（为VLANIF地址），网关为192.168.8.254，每个VLAN都需要配一条，这样就能跟三层交换机互通，这个其实跟静态路由0.0.0.0 192.168.11.254 192.168.8.254一样，所有到VLAN 11的流量，下一跳为192.168.8.254</p>
<p>测试OK</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle 18c静默安装</title>
    <url>/archives/d097fba5/</url>
    <content><![CDATA[<p><img src="/archives/d097fba5/1.png" alt=" "></p>
<p>Oracle 18c其实就是12.2.0.2，19c就是12.2.0.3。db_home.zip 安装包大概4.25G，解压后有8.9G，数据库软件安装完成后有9.4G，创建完数据库后有13G。注：安装18c时需要把压缩文件解压到ORACLE_HOME路径下，在此目录下运行./runInstaller</p>
<h3 id="检查oracle-18c所需依赖包"><a href="#检查oracle-18c所需依赖包" class="headerlink" title="检查oracle 18c所需依赖包"></a>检查oracle 18c所需依赖包</h3><p><code>rpm -q binutils compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libXext libXtst libX11 libXau libXi make sysstat</code></p>
<h3 id="yum安装依赖包"><a href="#yum安装依赖包" class="headerlink" title="yum安装依赖包"></a>yum安装依赖包</h3><p><code>yum install -y binutils compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libXext libXtst libX11 libXau libXi make sysstat</code></p>
<h3 id="创建所需操作系统用户组和用户"><a href="#创建所需操作系统用户组和用户" class="headerlink" title="创建所需操作系统用户组和用户"></a>创建所需操作系统用户组和用户</h3><p>创建前先检查selinux和防火墙是否打开<br>创建用户和组：</p>
<p><code>groupadd oinstall</code><br><code>groupadd dba</code><br><code>groupadd oper</code><br><code>groupadd backupdba</code><br><code>groupadd dgdba</code><br><code>groupadd kmdba</code><br><code>useradd -g oinstall -G dba,backupdba,dgdba,kmdba,oper oracle</code><br><code>passwd oracle</code></p>
<h3 id="配置系统参数文件"><a href="#配置系统参数文件" class="headerlink" title="配置系统参数文件"></a>配置系统参数文件</h3><p>根据官方文档将参数整合成一个脚本命令，直接复制下方命令执行即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DAYTIME=$(date +%Y%m%d)</span><br><span class="line">mv /etc/sysctl.conf /etc/sysctl.conf.<span class="variable">$&#123;DAYTIME&#125;</span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">totalMemory=$((memTotal / <span class="number">2048</span>))</span><br><span class="line">shmall=$((memTotal / <span class="number">4</span>))</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$shmall</span> -lt 2097152 ]; <span class="keyword">then</span></span><br><span class="line">  shmall=2097152</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">shmmax=$((memTotal * <span class="number">1024</span> - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$shmmax</span>&quot;</span> -lt 4294967295 ]; <span class="keyword">then</span></span><br><span class="line">  shmmax=4294967295</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/sysctl.conf</span><br><span class="line"><span class="comment">##shmmal&#x27;s Calculation formula: physical memory 8G：(8*1024*1024*1024)/4096=2097152</span></span><br><span class="line"><span class="comment">##shmmax&#x27;s Calculation formula: physical memory 8G：(8/2)*1024*1024*1024 -1=4294967295</span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = <span class="variable">$shmall</span></span><br><span class="line">kernel.shmmax = <span class="variable">$shmmax</span></span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h3 id="配置系统资源限制"><a href="#配置系统资源限制" class="headerlink" title="配置系统资源限制"></a>配置系统资源限制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="配置-pam-d"><a href="#配置-pam-d" class="headerlink" title="配置 pam.d"></a>配置 pam.d</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="配置-dev-shm"><a href="#配置-dev-shm" class="headerlink" title="配置 /dev/shm"></a>配置 /dev/shm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/fstab /tmp/fstab</span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">shmTotal=$(df -k /dev/shm | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | head -n 2 | tail -n 1)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(grep -E -c <span class="string">&quot;/dev/shm&quot;</span> /etc/fstab)</span>&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">	cat &lt;&lt;EOF &gt;&gt;/etc/fstab</span><br><span class="line">tmpfs /dev/shm tmpfs size=<span class="variable">$&#123;memTotal&#125;</span>k 0 0</span><br><span class="line">EOF</span><br><span class="line">	mount -o remount /dev/shm</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$shmTotal</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$memTotal</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    shmTotal=<span class="variable">$memTotal</span></span><br><span class="line">    line=$(grep -n <span class="string">&quot;/dev/shm&quot;</span> /etc/fstab | awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">    sed -i <span class="string">&quot;<span class="variable">$&#123;line&#125;</span> d&quot;</span> /etc/fstab</span><br><span class="line">    cat &lt;&lt;EOF &gt;&gt;/etc/fstab</span><br><span class="line">tmpfs /dev/shm tmpfs size=<span class="variable">$&#123;memTotal&#125;</span>k 0 0</span><br><span class="line">EOF</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	mount -o remount /dev/shm</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="配置用户环境变量"><a href="#配置用户环境变量" class="headerlink" title="配置用户环境变量"></a>配置用户环境变量</h3><p>配置 root 用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/root/.bash_profile</span><br><span class="line"><span class="built_in">alias</span> so=<span class="string">&#x27;su - oracle&#x27;</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;[\`whoami\`@\`hostname\`:&quot;</span><span class="string">&#x27;\$PWD]# &#x27;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p>
<p>配置 oracle 用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="built_in">umask</span> 022</span><br><span class="line"><span class="built_in">export</span> TMP=/tmp</span><br><span class="line"><span class="built_in">export</span> TMPDIR=\<span class="variable">$TMP</span></span><br><span class="line"><span class="built_in">export</span> NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line"><span class="built_in">export</span> ORACLE_BASE=/u2/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=\<span class="variable">$ORACLE_BASE</span>/product/18.0.0/dbhome_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOSTNAME=oracle-back</span><br><span class="line"><span class="built_in">export</span> ORACLE_TERM=xterm</span><br><span class="line"><span class="built_in">export</span> TNS_ADMIN=\<span class="variable">$ORACLE_HOME</span>/network/admin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=\<span class="variable">$ORACLE_HOME</span>/lib:/lib:/usr/lib</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=topprdb</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/sbin:\<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$ORACLE_HOME</span>/bin:\<span class="variable">$ORACLE_HOME</span>/OPatch:\<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">alias</span> sas=<span class="string">&#x27;sqlplus / as sysdba&#x27;</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;[\`whoami\`@\`hostname\`:&quot;</span><span class="string">&#x27;\$PWD]\$ &#x27;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p>
<h3 id="创建相关文件目录"><a href="#创建相关文件目录" class="headerlink" title="创建相关文件目录"></a>创建相关文件目录</h3><p>创建$ORACLE_HOME目录：<br><code>mkdir -p /u2/oracle/product/18.0.0/dbhome_1</code><br>创建相关目录：<br><code>mkdir /u2/archivelog</code><br><code>mkdir /u2/fast_recovery_area</code><br><code>mkdir /u2/oradata</code><br><code>mkdir /u2/oraInventory</code><br><code>mkdir -p /opt/oracle/oraInventory/logs/</code></p>
<h3 id="解压oracle安装包"><a href="#解压oracle安装包" class="headerlink" title="解压oracle安装包"></a>解压oracle安装包</h3><p><code>unzip LINUX.X64_180000_db_home.zip -d /u2/oracle/product/18.0.0/dbhome_1/</code><br><code>chown -R oinstall.oracle /u2</code><br><code>chmod -R 775 /u2</code></p>
<h3 id="静默安装oracle软件"><a href="#静默安装oracle软件" class="headerlink" title="静默安装oracle软件"></a>静默安装oracle软件</h3><p>切换到oracle用户：<br><code>su - oracle</code></p>
<p>直接命令行安装：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ORACLE_HOME</span>/runInstaller -silent  -force -noconfig  -ignorePrereq \</span><br><span class="line">oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v18.0.0 \</span><br><span class="line">oracle.install.option=INSTALL_DB_SWONLY \</span><br><span class="line">UNIX_GROUP_NAME=oinstall \</span><br><span class="line">INVENTORY_LOCATION=/u2/oraInventory \</span><br><span class="line">ORACLE_BASE=/u2/oracle \</span><br><span class="line">oracle.install.db.InstallEdition=EE \</span><br><span class="line">oracle.install.db.OSDBA_GROUP=dba \</span><br><span class="line">oracle.install.db.OSOPER_GROUP=oper \</span><br><span class="line">oracle.install.db.OSBACKUPDBA_GROUP=backupdba \</span><br><span class="line">oracle.install.db.OSDGDBA_GROUP=dgdba \</span><br><span class="line">oracle.install.db.OSKMDBA_GROUP=kmdba \</span><br><span class="line">oracle.install.db.OSRACDBA_GROUP=dba \</span><br><span class="line">oracle.install.db.config.starterdb.type=GENERAL_PURPOSE</span><br></pre></td></tr></table></figure></p>
<p>使用root用户执行<br><code>/u2/oraInventory/orainstRoot.sh</code><br><code>/u2/oracle/product/18.0.0/dbhome_1/root.sh</code></p>
<h3 id="静默创建监听"><a href="#静默创建监听" class="headerlink" title="静默创建监听"></a>静默创建监听</h3><p><code>cd $ORACLE_HOME/bin</code><br><code>./netca -silent -responsefile $ORACLE_HOME/assistants/netca/netca.rsp</code></p>
<h3 id="静默创建实例"><a href="#静默创建实例" class="headerlink" title="静默创建实例"></a>静默创建实例</h3><p>创建临时变量：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 实例名称</span></span><br><span class="line">ORACLE_SID=topprdb</span><br><span class="line"><span class="comment">## 数据文件目录</span></span><br><span class="line">ORADATADIR=/u2/oradata</span><br><span class="line"><span class="comment">## 归档日志目录</span></span><br><span class="line">ARCHIVEDIR=/u2/archivelog</span><br><span class="line"><span class="comment">## 数据库字符集</span></span><br><span class="line">CHARACTERSET=AL32UTF8</span><br><span class="line"><span class="comment">## 国家字符集</span></span><br><span class="line">NCHARACTERSET=AL16UTF16</span><br><span class="line"><span class="comment">## 数据库内存这里取物理内存的 50%</span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">totalMemory=$((memTotal / <span class="number">2048</span>))</span><br><span class="line"><span class="comment">## 是否为 CDB 模式，TRUE 或者 FALSE</span></span><br><span class="line">ISCDB=TRUE</span><br></pre></td></tr></table></figure><br>静默创建数据库实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbca -silent -createDatabase \</span><br><span class="line">-ignorePrereqFailure \</span><br><span class="line">-templateName General_Purpose.dbc \</span><br><span class="line">-responseFile NO_VALUE \</span><br><span class="line">-gdbName <span class="variable">$&#123;ORACLE_SID&#125;</span> \</span><br><span class="line">-sid <span class="variable">$&#123;ORACLE_SID&#125;</span> \</span><br><span class="line">-sysPassword oracle \</span><br><span class="line">-systemPassword oracle \</span><br><span class="line">-redoLogFileSize 1024 \</span><br><span class="line">-storageType FS \</span><br><span class="line">-databaseConfigType SINGLE \</span><br><span class="line">-datafileDestination <span class="variable">$&#123;ORADATADIR&#125;</span> \</span><br><span class="line">-enableArchive <span class="literal">true</span> \</span><br><span class="line">-archiveLogDest <span class="variable">$&#123;ARCHIVEDIR&#125;</span> \</span><br><span class="line">-characterset <span class="variable">$&#123;CHARACTERSET&#125;</span> \</span><br><span class="line">-nationalCharacterSet <span class="variable">$&#123;NCHARACTERSET&#125;</span> \</span><br><span class="line">-emConfiguration NONE \</span><br><span class="line">-automaticMemoryManagement <span class="literal">false</span> \</span><br><span class="line">-totalMemory <span class="variable">$&#123;totalMemory&#125;</span> \</span><br><span class="line">-databaseType OLTP \</span><br><span class="line">-createAsContainerDatabase <span class="variable">$&#123;ISCDB&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据库主从同步（同样适合其他版本）"><a href="#数据库主从同步（同样适合其他版本）" class="headerlink" title="数据库主从同步（同样适合其他版本）"></a>数据库主从同步（同样适合其他版本）</h2><p>主库：topprdr IP:192.168.1.208<br>备库：topprdb IP:192.168.1.209<br>db_name统一为topprdr,unique_name为各自的SID</p>
<h3 id="开启主库force-logging和归档"><a href="#开启主库force-logging和归档" class="headerlink" title="开启主库force logging和归档"></a>开启主库force logging和归档</h3><p>进入sqlplus：<br>检查归档模式是否开启<br><code>archive log list;</code><br>检查force logging是否开启<br><code>SELECT LOG_MODE,FLASHBACK_on,FORCE_LOGGING FROM V$DATABASE;</code><br>开启force logging<br><code>alter database force logging;</code><br>开启归档步骤（开启归档需要关闭数据库）<br>停监听<br><code>lsnrctl status</code><br><code>lsnrctl stop</code><br>关闭数据库<br><code>sqlplus / as sysdba</code><br><code>shutdown immediate;</code><br>主库启动到Mount状态<br><code>startup mount;</code><br>开启归档<br><code>alter database archivelog;</code><br>打开主库<br><code>alter database open;</code><br>测试切换归档，确保归档正常<br><code>alter system switch logfile;</code></p>
<h3 id="配置主库参数"><a href="#配置主库参数" class="headerlink" title="配置主库参数"></a>配置主库参数</h3><p>直接使用命令设置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alter system <span class="built_in">set</span> db_unique_name=topprdr scope=both;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_archive_config=<span class="string">&#x27;dg_config=(topprdr,topprdb)&#x27;</span> scope=both;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_archive_dest_1=<span class="string">&#x27;location=/u2/archivelog valid_for=(all_logfiles,all_roles) db_unique_name=topprdr&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_archive_dest_state_2=<span class="string">&#x27;DEFER&#x27;</span> scope=both sid=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_archive_dest_2=<span class="string">&#x27;service=topprdb LGWR ASYNC NOAFFIRM COMPRESSION=ENABLE delay=0 reopen=300 valid_for=(ONLINE_LOGFILES,PRIMARY_ROLE) db_unique_name=topprdb&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_archive_max_processes = 8 scope=both;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> remote_login_passwordfile=<span class="string">&#x27;exclusive&#x27;</span> scope=spfile  sid=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> fal_server=topprdb;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> standby_file_management=auto scope=both;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> db_file_name_convert=<span class="string">&#x27;/u2/oradata/TOPPRDB/&#x27;</span>,<span class="string">&#x27;/u2/oradata/TOPPRDR&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> log_file_name_convert=<span class="string">&#x27;/u2/oradata/TOPPRDB/&#x27;</span>,<span class="string">&#x27;/u2/oradata/TOPPRDR&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter system <span class="built_in">set</span> <span class="string">&quot;_ktb_debug_flags&quot;</span> = 8 scope=both;</span><br></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<blockquote>
<p>db_unique_name    用于区分主库与备库<br>log_archive_config    用于控制发送归档日志到远程位置、接收远程归档日志，dg_config不分顺序<br>log_archive_dest_1    用于指定本地归档存放路径、valid_for指定传输的内容，使用all_logfiles,all_roles统一存放standby log,不要设置standby_archive_dest<br>log_archive_dest_2    用于指定归档推送目的地，LGWR ASYNC NOAFFIRM表示使用最大性能模式，即使DG库异常也不会影响主库运行<br>log_archive_dest_state_2    用于控制归档推送状态，先设置为defer（不推送）<br>log_archive_max_processes    用于指定归档进程个数<br>remote_login_passwordfile    用于限制管理员远程登录，默认为NONE，需要修改为EXCLUSIVE或SHARED，需要重启数据库生效<br>fal_server    FAL指获取归档日志(Fetch Archived Log)<br>standby_file_management    用于控制主库增删文件时，是否自动在备库做出相应的修改<br>db_file_name_convert    即使路径一致也建议设置，主备库参数顺序相反，主库参数顺序为’备,‘主’；备库参数顺序为’主’,‘备’，参数内容为绝对路径或者磁盘组名，如果是asm只需要磁盘组名，OMF会使用db_unique_name自动生成文件名。<br>log_file_name_convert    即使路径一致也建议设置，主备库参数顺序相反，主库参数顺序为’备,‘主’；备库参数顺序为’主’,‘备’，参数内容为绝对路径或者磁盘组名，如果是asm只需要磁盘组名，OMF会使用db_unique_name自动生成文件名。<br>_ktb_debug_flags    用于规避ADG切换导致索引坏块的问题</p>
</blockquote>
<p>配置主库standby redolog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Standby redo <span class="built_in">log</span>组数公式&gt;=(每个instance日志组个数+1)*instance个数，大小和redo <span class="built_in">log</span>一致即可</span><br><span class="line">检查日志组</span><br><span class="line">select GROUP<span class="comment">#,THREAD#,MEMBERS,BYTES/1024/1024 MB,STATUS from v$log;</span></span><br><span class="line">select GROUP<span class="comment">#,MEMBER,STATUS,TYPE from v$logfile;</span></span><br><span class="line">创建standby redolog</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 4 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo04&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 5 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo05&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 6 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo06&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 7 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo07&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 8 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo08&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 9 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo09&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 10 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo10&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 11 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo11&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 12 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo12&#x27;</span> size 1G;</span><br><span class="line">ALTER DATABASE ADD STANDBY LOGFILE GROUP 13 <span class="string">&#x27;/u2/oradata/TOPPRDR/redo13&#x27;</span> size 1G;</span><br><span class="line">检查日志组</span><br><span class="line">select GROUP<span class="comment">#,THREAD#,MEMBERS,BYTES/1024/1024 MB,STATUS from v$log;</span></span><br><span class="line">select GROUP<span class="comment">#,MEMBER,STATUS,TYPE from v$logfile;</span></span><br></pre></td></tr></table></figure>
<h3 id="复制主库密码文件到ADG库"><a href="#复制主库密码文件到ADG库" class="headerlink" title="复制主库密码文件到ADG库"></a>复制主库密码文件到ADG库</h3><p>——主库ADG库均使用文件系统———</p>
<p>复制主库其中一个节点密码文件到备库，并按DG库实例名修改文件名<br><code>scp $ORACLE_HOME/dbs/orapwtopprdr 192.168.1.209:/u2/oracle/product/18.0.0/dbhome_1/dbs/orapwtopprdb</code><br>若没有密码文件，则用orapwd命令在主库新建，再拷贝到备库<br><code>orapwd file=orapwtopprdr password=oracle entries=10 format=12</code></p>
<p>———-主库、ADG库均使用ASM—————————</p>
<p>如果oracle使用ASM，则需要用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主库</span></span><br><span class="line"><span class="comment">#确认密码文件位置</span></span><br><span class="line">su - oracle</span><br><span class="line">srvctl config database -d topprdr</span><br><span class="line">Password file: +DATA/topprdr/PASSWORD/pwdtopprdr.256.1071437689</span><br><span class="line"><span class="comment">#从ASM复制密码文件到文件系统</span></span><br><span class="line">su - grid</span><br><span class="line">asmcmd</span><br><span class="line">pwget --dbuniquename topprdr</span><br><span class="line">pwcopy +DATA/topprdr/PASSWORD/pwdtopprdr.256.1071437689 /tmp/orapwtopprdb</span><br><span class="line"><span class="comment">#从主库文件系统拷贝密码文件到ADG库文件系统</span></span><br><span class="line">su - oracle</span><br><span class="line">scp /tmp/orapwxstopprdr 192.168.1.209:/tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">#ADG库</span></span><br><span class="line"><span class="comment">#导入主库密码文件</span></span><br><span class="line">orapwd input_file=<span class="string">&#x27;/tmp/orapwtopprdr&#x27;</span> file=<span class="string">&#x27;+DATA/topprdr/PASSWORD/pwdtopprdb&#x27;</span>  dbuniquename=<span class="string">&#x27;topprdb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#异常处理，若出现OPW-00010: Could not create the password file. This resource has a Password File.错误</span></span><br><span class="line"><span class="comment">#先设置ADG库集群密码位置为空</span></span><br><span class="line">srvctl modify database -db topprdb -pwfile <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#再次导入密码文件</span></span><br><span class="line">orapwd input_file=<span class="string">&#x27;/tmp/orapwtopprdb&#x27;</span> file=<span class="string">&#x27;+DATA/topprdr/PASSWORD/pwdtopprdb&#x27;</span>  dbuniquename=<span class="string">&#x27;topprdb&#x27;</span></span><br><span class="line"><span class="comment"># 修改ADG库OCR中记录的数据库密码文件信息</span></span><br><span class="line">srvctl modify database -db topprdb -pwfile <span class="string">&#x27;+DATA/topprdr/PASSWORD/pwdtopprdb&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>——主库使用ASM，ADG库使用文件系统——-</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主库</span></span><br><span class="line"><span class="comment">#确认密码文件位置</span></span><br><span class="line">su - oracle</span><br><span class="line">srvctl config database -d topprdr</span><br><span class="line">Password file: +DATA/topprdr/PASSWORD/pwdtopprdr.256.1071437689</span><br><span class="line"><span class="comment">#从ASM复制密码文件到文件系统</span></span><br><span class="line">su - grid</span><br><span class="line">asmcmd</span><br><span class="line">pwget --dbuniquename topprdr</span><br><span class="line">pwcopy +DATA/topprdr/PASSWORD/pwdtopprdr.256.1071437689 /tmp/orapwtopprdb</span><br><span class="line"><span class="comment">#从主库文件系统拷贝密码文件到ADG库文件系统</span></span><br><span class="line">su - oracle</span><br><span class="line">scp /tmp/orapwtopprdb 192.168.1.209:/tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">#ADG库</span></span><br><span class="line"><span class="comment">#导入主库密码文件</span></span><br><span class="line">orapwd input_file=<span class="string">&#x27;/tmp/orapwtopprdb&#x27;</span> file=<span class="string">&#x27;/u01/app/oracle/product/18.0.0/db_1/dbs/orapwtopprdb&#x27;</span> SYS=Y</span><br></pre></td></tr></table></figure>
<h3 id="ADG库使用pfile启动到nomount"><a href="#ADG库使用pfile启动到nomount" class="headerlink" title="ADG库使用pfile启动到nomount"></a>ADG库使用pfile启动到nomount</h3><p>从主库生成pfile文件<br><code>create pfile=&#39;/home/oracle/pfile_dg.ora&#39; from spfile;</code><br>参考主库参数，创建ADG库pfile文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要修改的参数</span></span><br><span class="line">audit_file_dest</span><br><span class="line">control_files</span><br><span class="line">db_create_file_dest</span><br><span class="line">db_file_name_convert</span><br><span class="line">log_file_name_convert</span><br><span class="line">db_unique_name</span><br><span class="line">fal_server</span><br><span class="line">local_listener</span><br><span class="line">log_archive_dest_*</span><br><span class="line">log_archive_dest_state_*</span><br><span class="line">remote_listener</span><br><span class="line">standby_archive_dest</span><br></pre></td></tr></table></figure></p>
<p>修改后的内容<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*._ktb_debug_flags=8</span><br><span class="line">*.audit_file_dest=<span class="string">&#x27;/u2/oracle/admin/topprdb/adump&#x27;</span></span><br><span class="line">*.audit_trail=<span class="string">&#x27;db&#x27;</span></span><br><span class="line">*.compatible=<span class="string">&#x27;18.0.0&#x27;</span></span><br><span class="line">*.control_files=<span class="string">&#x27;/u2/oradata/TOPPRDB/control01.ctl&#x27;</span>,<span class="string">&#x27;/u2/oradata/TOPPRDB/control02.ctl&#x27;</span></span><br><span class="line">*.db_block_size=8192</span><br><span class="line">*.db_file_name_convert=<span class="string">&#x27;/u2/oradata/TOPPRDR/&#x27;</span>,<span class="string">&#x27;/u2/oradata/TOPPRDB&#x27;</span></span><br><span class="line">*.db_name=<span class="string">&#x27;topprdr&#x27;</span></span><br><span class="line">*.db_unique_name=<span class="string">&#x27;TOPPRDB&#x27;</span></span><br><span class="line">*.diagnostic_dest=<span class="string">&#x27;/u2/oracle&#x27;</span></span><br><span class="line">*.dispatchers=<span class="string">&#x27;(PROTOCOL=TCP) (SERVICE=topprdbXDB)&#x27;</span></span><br><span class="line">*.enable_pluggable_database=<span class="literal">true</span></span><br><span class="line">*.fal_server=<span class="string">&#x27;TOPPRDR&#x27;</span></span><br><span class="line">*.local_listener=<span class="string">&#x27;LISTENER_TOPPRDB&#x27;</span></span><br><span class="line">*.log_archive_config=<span class="string">&#x27;dg_config=(topprdr,topprdb)&#x27;</span></span><br><span class="line">*.log_archive_dest_1=<span class="string">&#x27;location=/u2/archivelog valid_for=(all_logfiles,all_roles) db_unique_name=topprdb&#x27;</span></span><br><span class="line">*.log_archive_dest_2=<span class="string">&#x27;service=topprdr LGWR ASYNC NOAFFIRM COMPRESSION=ENABLE delay=0 reopen=300 valid_for=(ONLINE_LOGFILES,PRIMARY_ROLE) db_unique_name=topprdr&#x27;</span></span><br><span class="line">*.log_archive_dest_state_2=<span class="string">&#x27;DEFER&#x27;</span></span><br><span class="line">*.log_archive_format=<span class="string">&#x27;%t_%s_%r.dbf&#x27;</span></span><br><span class="line">*.log_archive_max_processes=8</span><br><span class="line">*.log_file_name_convert=<span class="string">&#x27;/u2/oradata/TOPPRDR/&#x27;</span>,<span class="string">&#x27;/u2/oradata/TOPPRDB&#x27;</span></span><br><span class="line">*.nls_language=<span class="string">&#x27;SIMPLIFIED CHINESE&#x27;</span></span><br><span class="line">*.nls_territory=<span class="string">&#x27;CHINA&#x27;</span></span><br><span class="line">*.open_cursors=300</span><br><span class="line">*.pga_aggregate_target=779m</span><br><span class="line">*.processes=480</span><br><span class="line">*.remote_login_passwordfile=<span class="string">&#x27;exclusive&#x27;</span></span><br><span class="line">*.sga_target=3113m</span><br><span class="line">*.standby_file_management=<span class="string">&#x27;AUTO&#x27;</span></span><br><span class="line">*.undo_tablespace=<span class="string">&#x27;UNDOTBS1&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>备库使用pfile启动到nomount<br><code>sqlplus / as sysdba</code><br><code>startup nomount pfile=&#39;/home/oracle/pfile_dg.ora&#39;;</code></p>
<h3 id="启动备库监听"><a href="#启动备库监听" class="headerlink" title="启动备库监听"></a>启动备库监听</h3><p><code>vim /u2/oracle/product/18.0.0/dbhome_1/network/admin/listener.ora</code><br>加入静态注册信息<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SID_LIST_LISTENER =</span><br><span class="line">  (SID_LIST =</span><br><span class="line">    (SID_DESC =</span><br><span class="line">      (GLOBAL_DBNAME = topprdb)</span><br><span class="line">      (ORACLE_HOME = /u2/oracle/product/18.0.0/dbhome_1)</span><br><span class="line">      (SID_NAME = topprdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><br>重启备库监听<br><code>lsnrctl stop</code><br><code>lsnrctl start</code></p>
<p>配置主库tnsnames.ora文件，增加备库tns信息，用于与主库通讯</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TOPPRDB =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.209)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = topprdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置备库tnsnames.ora文件，增加主库tns信息，用于与备库通讯<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TOPPRDR =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.208)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = topprdr)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p>
<p>主库与备库相互验证tns<br><code>rman target sys/oracle@topprdb</code><br><code>rman target sys/oracle@topprdr</code></p>
<p>创建备库spfile文件<br><code>sqlplus / as sysdba</code><br><code>create spfile from pfile=&#39;/home/oracle/pfile_dg.ora&#39;;</code></p>
<p>重启ADG库<br><code>shutdown immediate</code><br><code>exit</code></p>
<p><code>sqlplus / as sysdba</code><br><code>startup nomount</code></p>
<p>在备库通过RMAN复制主库<br>连接主库与ADG库<br><code>rman target sys/oracle@topprdr auxiliary sys/oracle@topprdb</code><br>执行复制<br><code>duplicate target database for standby from active database</code></p>
<p>主库开启投递归档<br><code>alter system set log_archive_dest_state_2=&#39;ENABLE&#39; scope=both sid=&#39;*&#39;;</code></p>
<p>开启备库<br><code>sqlplus / as sysdba</code><br><code>alter database open;</code></p>
<p>备库开启日志应用<br><code>alter database recover managed standby database parallel 8 using current logfile disconnect from session;</code></p>
<p>检查日志传输情况，主库与备库分别执行，对比结果<br><code>select thread#,max(sequence#) from v$archived_log group by thread# order by 1;</code></p>
<h3 id="备库启停维护"><a href="#备库启停维护" class="headerlink" title="备库启停维护"></a>备库启停维护</h3><p>取消ADG同步<br>停止备库日志应用，在备库执行<br><code>ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL;</code><br>停止主库投递归档到备库，在主库执行<br><code>alter system set log_archive_dest_state_2=defer scope=both;</code></p>
<p>开启备库日志应用<br><code>alter database recover managed standby database parallel 8 using current logfile disconnect from session;</code></p>
<h3 id="修改备库为read-only模式实现简单主备读写分离"><a href="#修改备库为read-only模式实现简单主备读写分离" class="headerlink" title="修改备库为read only模式实现简单主备读写分离"></a>修改备库为read only模式实现简单主备读写分离</h3><p><code>alter database open read only;</code><br><code>select database_role,open_mode from v$database;</code><br>可以看到DATABASE_ROLE为PHYSICAL STANDBY，OPEN_MODE为READ ONLY WITH APPLY</p>
<p>从主库创建pdb后，主库可以使用pdb的service id来远程登陆，用户名也是创建pdb的用户名，而备库同样可以使用pdb名来连接，但用户名和密码都是orapwtopprdb通过密码文件来认证，所以远程连接备库读取数据库时，用户名密码是填主库具有远程连接权限的用户名和密码。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle 19c</title>
    <url>/archives/ca6c8058/</url>
    <content><![CDATA[<p><img src="/archives/ca6c8058/1.png" alt=" "></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Oracle 19c，或者说是Oracle 12.2.0.3，是12c中稳定的版本，就像Oracle 11.2.0.4，是值得让客户做出升级决策，从Oracle支持的版本序列图中，就可以看出Oracle 19c所处的地位，Oracle 19c将稳定性作为此版本的核心目标，开发人员专注于修复已知问题，而不是添加新功能，这可能是让19c更加可靠以及让客户决定升级的关键因素<br><img src="/archives/ca6c8058/2.png" alt=" "></p>
<h2 id="ORACLE-19C-安装"><a href="#ORACLE-19C-安装" class="headerlink" title="ORACLE 19C 安装"></a>ORACLE 19C 安装</h2><p>环境：<br>CentOS 7.9<br>安装方法：最简单的RPM安装<br>需要先安装一下组件：<br>oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm<br>下载地址：<br><a href="https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/index.html">https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/index.html</a><br>下载ORACLE 19C安装包：<br>官网下载（需登录）：<br><a href="https://www.oracle.com/cn/database/technologies/oracle-database-software-downloads.html#19c">https://www.oracle.com/cn/database/technologies/oracle-database-software-downloads.html#19c</a><br>把下载的包上传到服务器上（lrzsz)</p>
<p>添加oracle的yum源解决依赖问题：<br><code>wget http://public-yum.oracle.com/public-yum-ol7.repo</code><br>添加GPG-KEY：<br><code>wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle</code></p>
<p>开始安装：<br><code>yum localinstall -y oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</code><br><code>yum localinstall -y oracle-database-ee-19c-1.0-1.x86_64.rpm</code></p>
<h2 id="配置oracle"><a href="#配置oracle" class="headerlink" title="配置oracle"></a>配置oracle</h2><p>oracle RPM安装方式默认安装路径为/opt/oracle</p>
<h3 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h3><p>默认数据库系统配置文件放在/etc/sysconfig/下，默认的配置文件名是oracledb_ORCLCDB-19c.conf，默认数据库实例名称也是ORCLCDB<br><code>cat /etc/sysconfig/oracledb_ORCLCDB-19c.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#This is a configuration file to setup the Oracle Database. </span><br><span class="line">#It is used when running &#39;&#x2F;etc&#x2F;init.d&#x2F;oracledb_ORCLCDB configure&#39;.</span><br><span class="line">#Please use this file to modify the default listener port and the</span><br><span class="line">#Oracle data location.</span><br><span class="line"></span><br><span class="line"># LISTENER_PORT: Database listener</span><br><span class="line">LISTENER_PORT&#x3D;1521</span><br><span class="line"></span><br><span class="line"># ORACLE_DATA_LOCATION: Database oradata location</span><br><span class="line">ORACLE_DATA_LOCATION&#x3D;&#x2F;opt&#x2F;oracle&#x2F;oradata</span><br><span class="line"></span><br><span class="line"># EM_EXPRESS_PORT: Oracle EM Express listener</span><br><span class="line">EM_EXPRESS_PORT&#x3D;5500</span><br></pre></td></tr></table></figure>
<p>配置文件定义了监听的端口和数据库文件的路径，可以按需求修改，这里就先用默认配置</p>
<p>修改数据库初始化配置文件：<br><code>cat /etc/init.d/oracledb_ORCLCDB-19c</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Setting the required environment variables</span><br><span class="line">export ORACLE_HOME&#x3D;&#x2F;opt&#x2F;oracle&#x2F;product&#x2F;19c&#x2F;dbhome_1</span><br><span class="line"></span><br><span class="line">export ORACLE_VERSION&#x3D;19c</span><br><span class="line">export ORACLE_SID&#x3D;ORCLCDB</span><br><span class="line">export TEMPLATE_NAME&#x3D;General_Purpose.dbc</span><br><span class="line">export CHARSET&#x3D;AL32UTF8</span><br><span class="line">export PDB_NAME&#x3D;maintest</span><br><span class="line">export LISTENER_NAME&#x3D;LISTENER</span><br><span class="line">export NUMBER_OF_PDBS&#x3D;1</span><br><span class="line">export CREATE_AS_CDB&#x3D;true</span><br></pre></td></tr></table></figure>
<p>这里定义了初始化数据库的配置，主要修改以下配置：<br>export ORACLE_SID=ORCLCDB       #默认数据库名为ORCLCDB，可以自行修改，我这里也是用默认<br>export CHARSET=ZHS16GBK            #默认为AL32UTF8，可以修改为ZHS16GBK，国内使用效率高一点<br>export PDB_NAME=maintest        #默认数据库名为ORCLPDB1，可以自行修改，我这里修改成maintest<br>export LISTENER_NAME=LISTENER   #默认监听器的名字</p>
<p>从12c开始 oracle添加了CDB，默认连接的都是CDB，在不切换到pdb的情况下，创建用户名需要加C##的前缀,因为CDB中默认创建的是common user如果想要创建本地用户，则要在PDB容器中创建</p>
<p>修改好后，可以建立数据库实例：<br><code>etc/init.d/oracledb_ORCLCDB-19c configure</code><br>大概十几分钟的过程，和服务器性能有关</p>
<p>建立完数据库实例，可以先修改oracle用户的环境变量，oracle安装完毕后会自动创建oracle用户<br><code>touch /home/oracle/.bash_profile</code><br><code>vim /home/oracle/.bash_profile</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ORACLE_BASE&#x3D;&#x2F;opt&#x2F;oracle</span><br><span class="line">export ORACLE_HOME&#x3D;&#x2F;opt&#x2F;oracle&#x2F;product&#x2F;19c&#x2F;dbhome_1</span><br><span class="line">export ORACLE_SID&#x3D;ORCLCDB</span><br><span class="line">export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH:$HOME&#x2F;.local&#x2F;bin:$HOME&#x2F;bin</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$ORACLE_HOME&#x2F;lib:&#x2F;usr&#x2F;lib</span><br><span class="line">export NLS_LANG&#x3D;&quot;SIMPLIFIED CHINESE_CHINA&quot;.AL32UTF8</span><br></pre></td></tr></table></figure>
<p>应用配置：<br><code>source /home/oracle/.bash_profile</code></p>
<h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><p>切换到oracle用户操作：<br><code>su oracle</code><br><code>sql plus / as sysdba</code></p>
<p>默认oracle命令行界面不支持上下箭头操作，此时可以加入rlwrap工具来操作：<br>切换回root用户：<br><code>yum install -y rlwrap</code></p>
<p>这样在oracle用户下就可以使用上下键:<br>bash-4.2$ <code>rlwrap sqlplus / as sysdba</code></p>
<h2 id="实用配置"><a href="#实用配置" class="headerlink" title="实用配置"></a>实用配置</h2><h3 id="停机后手动启动"><a href="#停机后手动启动" class="headerlink" title="停机后手动启动"></a>停机后手动启动</h3><p>切换到oracle用户<br>启动监听：<br><code>lsnrctl start</code><br>启动数据库实例：<br><code>cd $ORACLE_HOME/bin</code><br><code>./dbstart $ORACLE_HOME</code><br>进入命令行启动数据库：<br><code>sqlplus / as sysdba</code><br><code>startup mount;</code><br><code>alter database open;</code></p>
<h3 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h3><ol>
<li><p>需要先修改一下 oracle 的启动脚本配置:<br>vi /etc/oratab<br>将“ORCLCDB:/opt/oracle/product/19c/dbhome_1:N”<br>改为“ORCLCDB:/opt/oracle/product/19c/dbhome_1:Y”<br>保存退出</p>
</li>
<li><p>然后设置数据库的启动命令<br>增加的内容为: 注意改成自己的$ORACLE_HOME<br><code>vim /usr/bin/oracle.sh</code></p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment">#  script  For oracle19c.service</span></span><br><span class="line">/data1/opt/oracle/app/oracle/product/19/dbhome_1/bin/lsnrctl start</span><br><span class="line">/data1/opt/oracle/app/oracle/product/19/dbhome_1/bin/dbstart /data1/opt/oracle/app/oracle/product/19/dbhome_1/dbhome_1</span><br></pre></td></tr></table></figure>
<ol>
<li><p>设置文件oracle.sh的读写权限<br>chmod 777 /usr/bin/oracle.sh</p>
</li>
<li><p>设置 oracle19c.service<br>vi /etc/systemd/system/oracle19c.service<br>编辑添加内容为:</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Oracle19c</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">LimitMEMLOCK=infinity</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">User=oracle</span><br><span class="line">Environment=<span class="string">&quot;ORACLE_HOME=/opt/oracle/product/19c/dbhome_1&quot;</span></span><br><span class="line">ExecStart=/usr/bin/oracle.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ol>
<li>设置开机自动启动<br>systemctl enable oracle19c</li>
</ol>
<h3 id="orawd创建密码文件跳过复杂度"><a href="#orawd创建密码文件跳过复杂度" class="headerlink" title="orawd创建密码文件跳过复杂度"></a>orawd创建密码文件跳过复杂度</h3><p>以12c的格式来创建<br><code>orapwd file=orapwzqt.ora password=admin entries=10 format=12</code></p>
<h2 id="数据库启动的不同状态"><a href="#数据库启动的不同状态" class="headerlink" title="数据库启动的不同状态"></a>数据库启动的不同状态</h2><p>启动数据库时<br>先要找到初始化文件（spfile或pfile），此时数据库处在nomount状态（初始阶段）；<br>其次根据初始文件找到控制文件（Control File），此时数据库处在mount状态；<br>然后根据控制文件找到数据库文件（Data File）、重做日志文件（Redo File）；<br>此时数据库处在open状态，可以让用户访问数据库了。</p>
<h3 id="关闭数据库的四个不同命令"><a href="#关闭数据库的四个不同命令" class="headerlink" title="关闭数据库的四个不同命令"></a>关闭数据库的四个不同命令</h3><p>1、用SQLplus登录到数据库<br><code>sqlpuls / as sysdba</code><br>查看当前数据库的状态：<br><code>select instance_name,status from v$instance;</code><br>可以查看到实例名和当前状态</p>
<p>2、关闭数据库</p>
<p><code>shutdown immediate;</code><br>再次运行<br><code>select instance_name,status from v$instance;</code><br>则会出现ORA-01034:ORACLE not avaliable的报错<br>其实是关闭了实例（Instance）,实例已经不在内存中，则显示Oracle数据库处在不能用的状态。</p>
<p>关闭数据库的4个命令如下：<br>shutdown immediate ：不允许新的连接、不等待会话结束、不等待事务结束、做一个检查点并关闭数据文件。没有结束的事物自动rollback。启动时不需要对数据库进行实例恢复，最常用的命令，即使还有事务在运行，还有用户停留在数据库上，都可以关闭数据库。<br>shutdown abort：不允许新的连接、不等待会话结束、不等待事务结束、不做检查点且没有关闭数据文件。启动时数据库将自动进行实例恢复。很少用，一般数据库在运行复杂业务时，shutdown immediate 命令不能关闭数据库，并且需要快速关闭数据库是使用。<br>shurdown transactional：不允许新的连接、不等待会话结束、不等待事务结束、做一个检查点并关闭数据文件。启动时数据库不需要实例恢复，这个命令也很少使用，在数据库的业务很重要时，需要等到事务处理完成以后才能关闭。<br>shutdown normal（等于shutdown）：不允许新的连接、等待会话结束、等待事务结束、做一个检查点并关闭数据文件。启动时数据库不需要实例恢复。这个命令很少使用，只有还有用户停留在数据库上，都不能正常关闭时使用。</p>
<h3 id="启动数据库到nomonunt状态"><a href="#启动数据库到nomonunt状态" class="headerlink" title="启动数据库到nomonunt状态"></a>启动数据库到nomonunt状态</h3><p>startup nomount<br>nomount状态是数据库进程刚运行到初始化文件（spfile或pfile文件）<br>pfile文件是文本文件，可以手工编辑<br>spfile是二进制文件，不能手工修改里面的参数，只能用数据库命令进行修改，还能在数据库运行是修改spfile里面的参数，提高了该文件的安全性。数据库默认使用spfile启动数据库。<br>nomount状态一般是在维护数据库是需要用到，如修改数据库重要参数，恢复数据库的控制文件以及数据时都需要用到该状态。<br>查看spfile文件的操作：<br><code>show parameter spfile;</code><br>根据spfile文件创建pfile文件<br><code>create pfile=&#39;D:\app\pfile.ora&#39; from spfile;</code><br>打开pfile文件即可查看到数据库的重要参数<br>shutdown immediate 以后重新使用pfile 文件启动数据库到nomount状态<br><code>startup nomount pflie=&#39;D:\app\pfile.ora&#39;;</code><br>启动到nomount状态以后，输入查询语句<br><code>select name from v$controlfile;</code><br>报错，说明数据库在nomount 状态下不能查看控制文件的路径。<br>Oracle数据库启动时，进程先读取到初始化spfile文件，可见该文件是数据库重要文件之一。</p>
<h3 id="数据库的mount状态"><a href="#数据库的mount状态" class="headerlink" title="数据库的mount状态"></a>数据库的mount状态</h3><p>数据库的mount状态中，Oracle进程会读取到控制文件中的参数；该状态在数据库恢复时需用到，儿数据库在配置数据库的备库（Dataguard）时，数据库的备库是处于mount的状态。<br><code>alter database mount;</code><br><code>select instance_name,status from v$instance;</code><br>数据库显示处于mounted状态，表示Oracle已处于mount状态<br>查看控制文件的具体位置：<br><code>select name from v$controlfile;</code><br>打开控制文件是二进制文件，不能用记事本查看其内容。</p>
<p>可以使用oracle的命令，把控制文件的内容显示在trace（追踪）中：<br>alter database backup controlfile to trace as ‘D:\app\ct1.trc’;<br>即可用记事本打开ct1.trc文件，查看到里面的控制文件内容；其中‘—’为注释，其他内容则是控制文件的内容，可以根据控制文件来重建数据库的控制文件；该文件显示重做日志（Redo Logfile）组位置及其大小、数据文件（Data file）位置、字符集等。</p>
<p>将数据库启动到mount状态操作：<br>先关闭数据库：shutdown immediate;<br>启动到mount状态：startup mount;</p>
<h3 id="数据库的open状态"><a href="#数据库的open状态" class="headerlink" title="数据库的open状态"></a>数据库的open状态</h3><p>数据库open状态表示数据库已经正常运行，且允许数据库用户访问，可以对数据库的数据进行增删改查操作，数据库可以正常工作了。<br>将数据库改为open状态：<br><code>alter database open;</code><br>查看数据库的数据文件位置：<br><code>select name from v$datafile;</code></p>
<p>查看数据库的重做日志位置：<br><code>select member from v$logfile;</code></p>
<h3 id="数据库的密码文件"><a href="#数据库的密码文件" class="headerlink" title="数据库的密码文件"></a>数据库的密码文件</h3><p>Windows系统中oracle数据库中，密码文件位置：<br>F:\app11G\Administrator\product\11.2.0\dbhome_1\database<br>\PWDorcl11G.ora（orcl11G位数据库名）<br>Linux和Unix系统中名字叫orapworcl(orcl为数据库名)<br>改密码文件的作用是允许数据库的sysdba、sysoper用户通过口令远程登录，比如sys为数据库的sysdba的用户。<br>查看数据库中的“是否允许远程登录”的参数：<br><code>show parameter remote_login_passwordfile;</code></p>
<p>remote_login_passwordfile 为none则表示不能远程；为exclusive则表示可以远程<br><code>alter system set remote_login_passwordfile=none scope=spfile;</code><br>重启数据库才能生效，输入强制数据库重启SQL命令<br><code>startup force；</code></p>
<h3 id="查询及说明表空间"><a href="#查询及说明表空间" class="headerlink" title="查询及说明表空间"></a>查询及说明表空间</h3><p>用sys账号登录查询：<br>select<br>tablespace_name as “表空间名称”,<br>block_size/1024 as “数据块存储大小单元KB”,<br>status as “表空间的状态”,<br>contents as “表空间的类型”,<br>logging as “是否有日志记录”<br>from dba_tablespaces;</p>
<p>tablespace_name as “表空间名称”,<br>block_size/1024 as “数据块存储大小单元KB”,—一般默认是8KB，如果需要存储大对象可设为18K<br>status as “表空间的状态”,—online表空间处于联机状态，offline为脱机<br>contents as “表空间的类型”,—permanent永久保存，undo还原表空间的数据，相当于回收站，只能保存最近更改的数据；temporary一般为临时表空间数据，不会永久存储在系统数据文件中，只在查询或者排序是，内存不够时借用改空间临时存放数据<br>logging as “是否有日志记录”—重要需保存数据的表空间，一般都为logging状态，需要记录相关日志，像临时表空间或者不重要的表空间则不需要记录。</p>
<h3 id="查询及说明数据文件"><a href="#查询及说明数据文件" class="headerlink" title="查询及说明数据文件"></a>查询及说明数据文件</h3><p>查看数据文件的表空间、大小、是否扩展以及最大值<br>select<br>tablespace_name as “表空间名称”,<br>file_name as “数据文件路径”,<br>bytes/1024/1024 as “数据文件大小MB”,<br>autoextensible as “数据文件是否自动扩展”,<br>maxbytes/1024/1024 as “数据文件最大MB”<br>from dba_data_files;<br>表空间和数据文件是一对多的关系。</p>
<p>数据文件路径：是oracle数据库的数据文件再系统所在的磁盘位置；<br>数据文件大小：可以看到每个数据文件现在使用了多大空间；<br>是否自动扩展：一般为了节省磁盘空间，刚开始的数据文件都设置得比较小，当数据不断增多是，文件是否自动扩展，直至到达设定的最大值；<br>数据文件最大值：及该数据文件最大容量。可以根据具体的需要来进行设置，若是默认，则根据所在的系统允许单个文件的最大值。</p>
<h3 id="查询及说明重做日志"><a href="#查询及说明重做日志" class="headerlink" title="查询及说明重做日志"></a>查询及说明重做日志</h3><p>查看重做日志得位置、状态、大小和类型：<br><code>select * from v$logfile;</code></p>
<p>group#（组）：可以看到数据库中共有3组重做日志，图中每组只有一个文件<br>status（状态）：stale为已经把数据提交到数据库中，空白状态为正在使用该文件<br>member（成员）：为每组的成员（这里每组只有一个成员），并 列出路径和名称。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建kettle调度监控平台项目</title>
    <url>/archives/b27e42bf/</url>
    <content><![CDATA[<p><img src="/archives/b27e42bf/1.png" alt=" "></p>
<p>最近有有个kettle的项目需求，要求能快速转移和部署，那只能使用docker来做了。</p>
<h3 id="准备和测试"><a href="#准备和测试" class="headerlink" title="准备和测试"></a>准备和测试</h3><p>kettle是一个开源的项目，已经有人把它打包成web项目，项目地址为：<a href="https://gitcode.net/mirrors/zhaxiaodong9860/kettle-scheduler/-/tree/master">https://gitcode.net/mirrors/zhaxiaodong9860/kettle-scheduler/-/tree/master</a><br>项目创建人使用的是windows，需要把项目转移到Linux上使用。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：CentOS 7.9 core<br>docker版本：docker-ce-17.12.1<br>docker-compose版本： 1.29.2<br>基础镜像：alpine:latest<br>jre版本：1.8<br>mysql版本：5.7<br>tomcat版本：8.5</p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>其实docker版本没什么要求，直接yun install也可以，不过因为先装了docker私有镜像harbor，所以就要更新docker版本：<br>可以参考harbor的需求环境：<a href="https://goharbor.io/docs/2.4.0/install-config/installation-prereqs/">https://goharbor.io/docs/2.4.0/install-config/installation-prereqs/</a><br>先删除旧版本：<br><code>yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</code><br>添加docker安装源：<br><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code><br>安装最新版本：<br><code>yum install docker-ce docker-ce-cli containerd.io</code><br>或者指定版本：<br><code>yum list docker-ce --showduplicates | sort -r</code><br><code>yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code><br>安装docker-compose：<br><code>curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></p>
<h3 id="构造JRE基础镜像"><a href="#构造JRE基础镜像" class="headerlink" title="构造JRE基础镜像"></a>构造JRE基础镜像</h3><p>这一步很关键，所有配置都再基础镜像上修改。<br>下载alpine镜像：<br><code>docker pull alpine</code><br>通过dockerfile构建镜像:<br><code>cd /opt/</code><br><code>mkdir -p alpine_jre &amp;&amp; cd alpine_jre &amp;&amp; touch Dockerfile</code><br><code>vim Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> JRE Docker Maintainers <span class="string">&quot;yanpengshan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/latest-stable/main/&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">  <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/latest-stable/community/&quot;</span> &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要的软件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk add --no-cache ca-certificates &amp;&amp; \</span></span><br><span class="line"><span class="bash">  apk add --no-cache curl bash tree tzdata &amp;&amp; \</span></span><br><span class="line"><span class="bash">  cp -rf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/bin:$&#123;PATH&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JRE</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache openjdk8-jre-base &amp;&amp; \</span></span><br><span class="line"><span class="bash">  rm -rf /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &#123; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span>; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;set -e&#x27;</span>; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span>; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;</span>; \</span></span><br><span class="line"><span class="bash">   &#125; &gt; /usr/<span class="built_in">local</span>/bin/docker-java-home \</span></span><br><span class="line"><span class="bash">  &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/docker-java-home</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/default-jvm</span><br><span class="line"><span class="keyword">ENV</span> PATH $&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/jre/bin</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">  \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apk add --no-cache openjdk8-jre</span></span><br></pre></td></tr></table></figure>
<p>创建镜像：<br><code>docker build -t alpine_jre .</code></p>
<p>此时创建名字为alpine_jre的镜像成功。</p>
<h3 id="构造tomcat基础镜像"><a href="#构造tomcat基础镜像" class="headerlink" title="构造tomcat基础镜像"></a>构造tomcat基础镜像</h3><p>在alpine_jre:latest的镜像基础下再创建tomcat镜像。<br>此时没有用dockerfile构建，因为涉及太多参数，编写dockerfile比较麻烦，所以就直接进入alpine_jre的镜像进行手动修改。<br>首先到清华大学镜像站下载tomcat二进制包：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.78/bin/apache-tomcat-8.5.78.tar.gz">https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.78/bin/apache-tomcat-8.5.78.tar.gz</a><br>启动alpine_jre镜像：<br><code>docker run -d alpine_jre:latest /bin/sh</code><br>使用<code>docker ps -a</code>查看镜像是否启动成功以及其容器ID<br>拷贝tomcat包到容器的/opt目录：<br><code>docker cp apache-tomcat-8.5.78.tar.gz 容器ID:/opt/</code><br>进入容器环境：<br><code>docker exec -it 容器ID /bin/sh</code><br>进入/opt目录解压tomcat：<br><code>tar zxf apache-tomcat-8.5.78.tar.gz</code><br>移动tomcat文件到/usr/local/tomcat/目录下：<br><code>mv apache-tomcat-8.5.78/ /usr/local/tomcat/</code><br>创建运行脚本：<br><code>vim run.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/default-jvm</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line">sh /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh run</span><br></pre></td></tr></table></figure>
<p>脚本指定了JAVA的路径以及TOMCAT的启动<br>保存退出后添加脚本执行权限：<br><code>chmod +x run.sh</code></p>
<p>完成后删除tomcat的安装包以创造一个干净的tomcat镜像。<br>删除完毕后退出镜像，此时可以保存容器为镜像：<br><code>docker commit 容器ID alpine_tomcat:v1</code></p>
<p>测试运行镜像：<br><code>docker run -d -p 8888:8080 --name web alpine_tomcat:v1 /opt/run.sh</code><br>此时访问主机IP:8888，正常的话就会显示tomcat的欢迎页面。</p>
<h3 id="拷贝tomcat配置文件，web源码包及修改配置"><a href="#拷贝tomcat配置文件，web源码包及修改配置" class="headerlink" title="拷贝tomcat配置文件，web源码包及修改配置"></a>拷贝tomcat配置文件，web源码包及修改配置</h3><p>先不要关闭容器，在宿主主机创建docker的数据目录进行映射，这样数据就可以持久化：<br>我的docker数据存放在/data目录下，先创建数据库和kettle的数据目录：<br><code>mkdir -p &#123;/data/mysql/conf,/data/mysql/data,/data/kettle/conf,/data/kettle/webapps,/data/kettle/logs&#125;</code><br>复制tomcat配置文件到/data/kettle/conf目录下：<br><code>docker cp 容器ID:/usr/local/tomcat/conf/ /data/kettle/conf</code><br>下载WEB包到/data/kettle/webapps：<br><a href="https://blog.csdn.net/zhaxiaodong/article/details/84107102">https://blog.csdn.net/zhaxiaodong/article/details/84107102</a><br>博主上传到百度云，用的是WAR包，只要tomcat的server.xml中host字段unpackWARs=”true”，就说明放到目录下会自动解压<br>修改server.xml：<br>在最后host字段增加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;kettle-scheduler&quot;</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>  <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/archives/b27e42bf/2.png" alt=" "></p>
<p>安装博客要求修改db.properties和kettle.properties文件：<br><code>vim /data/kettle/webapps/kettle-scheduler/WEB-INF/classes/resource/db.properties</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.168.1.205:13306/kettle?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>
<p><code>vim /data/kettle/webapps/kettle-scheduler/WEB-INF/classes/resource/kettle.properties</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kettle.home=/usr/<span class="built_in">local</span>/tomcat/webapps/kettle-scheduler</span><br><span class="line">kettle.plugin=/usr/<span class="built_in">local</span>/tomcat/bin/plugins</span><br><span class="line">kettle.script=Html/js/libs/url</span><br><span class="line">kettle.loglevel=detail</span><br><span class="line">kettle.log.file.path=/usr/<span class="built_in">local</span>/tomcat/logs</span><br><span class="line">kettle.file.repository=/usr/<span class="built_in">local</span>/tomcat/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>其中，博客上有kettle8.0工具下载地址：[点击下载]<a href="https://sourceforge.net/projects/pentaho/files/Pentaho%208.0/client-tools/pdi-ce-8.0.0.0-28.zip/download?use_mirror=nchc">https://sourceforge.net/projects/pentaho/files/Pentaho%208.0/client-tools/pdi-ce-8.0.0.0-28.zip/download?use_mirror=nchc</a><br>就是说需要用到大数据组件的：将下载下来的工具的data-integration目录下的simple-jndi、system和plugins文件夹拷贝到apache-tomcat-9.0.12\bin目录下<br>不需要用到大数据组件的：将kettle-scheduler的web目录下kettle-lifecycle-listeners.xml和kettle-registry-extensions.xml删除。</p>
<h3 id="下载数据库镜像及配置docker-compose"><a href="#下载数据库镜像及配置docker-compose" class="headerlink" title="下载数据库镜像及配置docker-compose"></a>下载数据库镜像及配置docker-compose</h3><p>下载mysql 5.7镜像：<br><code>docker pull mysql:5.7</code><br>运行mysql镜像：<br><code>docker run -d -p 13306:3306 -v /data/mysql/data/:/var/lib/mysql mysql:5.7 -e MYSQL_ROOT_PASSWORD: &#39;123456&#39;</code><br>拷贝sql文件到目录下：<br><code>docker cp kettle-scheduler.sql 容器ID:/opt</code><br>进入容器：<br><code>docker exec -it 容器ID</code><br>进入/opt目录然后运行：<br><code>mysql -u root -p 123456</code><br>创建数据库：<br><code>create database kettle</code><br>切换数据库：<br><code>use kettle</code><br>导入数据库<br><code>source kettle-scheduler.sql</code><br>此时导入成功，退出容器，使用nvaicat软件测试连接数据库：<br><img src="/archives/b27e42bf/3.png" alt=" "><br><img src="/archives/b27e42bf/4.png" alt=" "></p>
<p>创建docker-compose.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kettle-mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kettle-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">kettle</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">13306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/data/:/var/lib/mysql</span></span><br><span class="line">  <span class="attr">kettle-pack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kettle</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kettle-mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">alpine_tomcat:v2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8888:8080&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/kettle/webapps:/usr/local/tomcat/webapps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/kettle/conf/:/usr/local/tomcat/conf/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/kettle/logs/:/usr/local/tomcat/logs/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/opt/run.sh</span></span><br></pre></td></tr></table></figure>
<p>数据库配置是根据kettle的web项目要求配置的，其他是安装自己实践一步步配置出来的。</p>
<p>此时此刻，安心访问吧，默认用户名和密码都是admin：<br><img src="/archives/b27e42bf/5.png" alt=" "><br><img src="/archives/b27e42bf/6.png" alt=" "></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>加班后别锻炼，字节跳动员工猝死健身房</title>
    <url>/archives/bac1bf89/</url>
    <content><![CDATA[<p><img src="/archives/bac1bf89/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木</p>
<p>今天，我和大家说一下健身的本质，<font color="red">希望大家在劳累工作之后，千万不要去锻炼。</font></p>
<p>一位互联网知名大厂的员工在健身房猝死了，留下了遗腹子和<font color="red">每个月2.1万的月供。</font></p>
<p>每个月2.1万的月供，大概对应着400万的房贷吧。</p>
<p>这钱实在太多了，无论是总额还是月供，都不是这位遗孀可以承受的。因此她只能失去这套房子，现在寻求的也只是能让自己损失最小的处理办法而已。</p>
<p>这里顺口插句话，我真觉得这位互联网大厂员工应该给自己买一份保险。</p>
<p>我对保险的看法长期以来都是一样的，这东西对穷人来说没意义，对富人来说没有用，但对中产来说很有必要，有点收入但抗风险能力极低，像这种高收入但平时把房贷给拉满的中产，如果当初给自己（家庭收入较高的一方）买一份保险，那出现这种事情，至少家中遗孀就不会陷入这种经济困境。</p>
<p><img src="/archives/bac1bf89/2.png" alt=" "></p>
<p>恋爱八年，结婚三年，宝宝刚怀上2个月，结果如今阴阳两隔。</p>
<p><img src="/archives/bac1bf89/3.png" alt=" "></p>
<p>她很爱她老公，在急救室门口等了一天一夜，可惜还是没能从死神手里将其救回。</p>
<p><img src="/archives/bac1bf89/4.png" alt=" "></p>
<p>根据字节跳动的内网公告，这名员工是2月21日下午18点进入健身房开始运动，18点56分出现头晕现象，19时09分被建议送医，19时30分120急救车抵达现场。</p>
<p>这份公告是面向内部所有字节员工发送的，知情人很多，时间点精确到分钟，不可能有人敢伪造，因此这应该就是事实。<br>下午6点去健身房，这当然不算加班，送医过程也算迅速。</p>
<p>但其遗孀所述该员工平时加班很多，压力很大，我相信也是事实，毕竟整个行业都是这样。</p>
<p>21日是周一，字节跳动应该是上班的，下午6点去健身房应该是下班后的行为，结果发生了猝死。</p>
<p>为什么?</p>
<font color="red">不是说健身可以促进身体健康吗，为何会有人因为健身而猝死？</font>

<font color="red">健身的本质到底是什么？</font>

<p>首先，健身可以促进身体健康这种说法是正确的，也是有科学依据的。</p>
<p>抗疫英雄，84岁的钟南山长期健身，身体素质特别棒，看起来只有五六十岁。</p>
<p><img src="/archives/bac1bf89/5.png" alt=" "></p>
<p>这种级别的顶级医学专家现身说法，亲自长期保持健身习惯，足以说明<font color="red">在医学角度，健身是肯定可以促进身体健康的。</font></p>
<p>健身可以提升身体机能，可以提升身体素质上限，从而提升你身体的抗压能力。</p>
<font color="red">保持长期健身的人，精力更旺盛，工作能力更强。</font>

<font color="red">但是，这并不代表健身的过程会促进身体健康，这也是有科学依据的。</font>

<p>为什么？</p>
<p>你平时散步，慢跑那种是不叫健身的，这种叫呼吸呼吸新鲜空气，不会对身体造成很大负荷，也不会提升你的身体机能。</p>
<p>如果你想提升自己的身体机能，无论你是想增大肌肉还是想提升心肺功能，都一定要超负荷。</p>
<p>肌肉的特点就是它们在被强迫超负荷运作后才会生长，而且不会对任何不足的负荷做出反应。</p>
<p>假定你能承受的正常负荷是10，哪怕你今天运动到了9，只要没突破10，你的肌肉就不会出现一丝一毫的增大或者增强，只有负荷达到11甚至15才会促进肌肉生长。</p>
<p>如果你自己去健身房练着玩，很难感受到什么是真正的健身，也很难练出效果。</p>
<p>但如果你找了一个健身教练带你，或者你自学了健身技巧，那你的健身效果就会完全不一样了。</p>
<p>健身教练绝不会给你锻练全身肌肉，你去一次他也只会让你练一个小时，再多他都不让你练。</p>
<font color="red">在这一个小时里，健身教练只会锻炼你某一块的肌肉。</font>

<p>对于无基础的普通人来说，要么练上肢，要么就练下肢，绝不会一起练。</p>
<p>对于有点基础的人来说，这一小时甚至有可能只炼一个部位，比如说胸大肌，其他一律不练。</p>
<p>这么做的目的，就是要达到在最短的时间里把这块肌肉练到“力竭”状态，通过多组练习反复拉伸和收缩这块肌肉，最终导致其彻底脱力，通过极大的负荷将其肌肉纤维拉断。</p>
<font color="red">通过超越极限的负荷将其肌肉纤维拉断后，这块肌肉的纤维数量会快速减少，然后报复性反弹，进行了超量恢复。</font>

<p>换句话说，此时你的肌肉就变粗变大了，达到了增肌的效果。</p>
<p>当然，如果你后面长期不运动，这块肌肉又会恢复到正常水平。</p>
<p><img src="/archives/bac1bf89/6.png" alt=" "></p>
<font color="red">你想提升身体的每一块肌肉，都要经历这个过程，包括体内看不见的心肺功能，也是需要经历超越极限的锻炼才能得到有效提升。</font>

<p>因此，很多健身房就喜欢以超越极限等类似词汇来进行命名。</p>
<p>身体机能提升后，你的身体素质当然会增强，身体当然会更健康。</p>
<p>但是如果你懂得健身和增肌的原理，你就会清晰的发现，<font color="red">增强健康是健身的结果，而不是过程。</font></p>
<font color="red">健身的过程，并不健康，需要通过对身体施加极限荷载来破坏身体机能，然后才能达到健身的效果。</font>

<p>所以，健身后你一定要休息，而且是很长时间的休息，肌肉的恢复和生长都是在休息中完成的。</p>
<p>大肌群练完后需要休息72小时，小肌群练完后要休息48小时，才能进行下一轮锻炼。</p>
<p>为什么健身达人每次只炼一块肌肉，其他肌肉全部放松，故意不练。</p>
<p>因为每块肌肉的恢复期太长，所以他们就每次练一块，第二天换一块练，轮流破坏，轮流恢复，以达到无限锻炼的目的。</p>
<p>直接把全身所有肌群都给练到极限，不仅对身体负荷恐怖到难以承受，而且没有意义，因为你第二天就肌肉酸痛到近乎于瘫痪，没办法继续练了，而别人可以持续健身，综合效果远胜于你。</p>
<p>所谓健身技巧，全部都是告诉你如何控制肌肉来达到每次只有少量肌群参与发力，而其他肌群故意放松，以达到单独训练那块肌肉的目的。</p>
<font color="red">但无论怎么做，你都会有至少一块肌肉经历超越极限的负荷，对身体形成巨大负担。</font>

<p>即便你不用专业的健身法，就是随便练练，只要认真练了，那也是负荷，而不是放松。</p>
<p>现在我们的媒体天天宣传健身有利于健康，这确实是事实，但媒体没有说清楚为什么健身有利于健康。</p>
<p>如果把健身强化身体素质的过程和原理说清楚，那你就应该知道，<font color="red">健身有利于健康，并不代表健身的过程有利于健康。</font></p>
<font color="red">你加班加的很累的时候，你上班上了一天很累的时候，其实并不适合去健身。</font>

<p>因为健身是一个更累的过程，比你上班还要累的多，同时会对你的身体造成沉重负荷。</p>
<p>健身后，人是需要大量休息的，因为只有休息才能尽快恢复身体。</p>
<p>同样，健身前，人也是需要休息的，至少要先放松一下，给自己的身体留一点精力余地再去健身。</p>
<font color="red">如果你觉得很累，然后试图通过健身去消灭自己的疲劳，那就是本末倒置了，因为健身的过程肯定会让你更累，疲劳更严重。</font>

<p>正确的健身，应该安排在休息之后，把健身当一次工作任务来完成，这本来就不比加班更轻松。</p>
<p>如果你在过度疲劳后去健身，那身体是非常有可能出现问题的。</p>
<p>你去健身房的目的是保护身体健康，提升身体素质，而不是反过来。</p>
<p><font color="red">再次提醒，健身有利于身体，</font>并不代表健身的过程有利于身体，两者都是科学，且并不矛盾，请务必根据自己身体的实际情况，合理健身，不要把健身的过程当成修复身体疲劳的法宝。</p>
<p>今天给大家写这篇文章，主要就是为了扫盲这个知识点。</p>
<p>希望这位员工的悲剧，不会再重现。</p>
<p>[阅读原文]<a href="https://mp.weixin.qq.com/s/Ni83oDSLQgShGXEmtz4PIQ">https://mp.weixin.qq.com/s/Ni83oDSLQgShGXEmtz4PIQ</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>人物</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>一个大学生发42万创业基金，浙江还有这种好事？</title>
    <url>/archives/34986ae2/</url>
    <content><![CDATA[<p><img src="/archives/34986ae2/1.png" alt=" "></p>
<p>原创 一棵青木</p>
<p>听说浙江省给每个大学生准备了42万创业基金。</p>
<p>2月17日，一则消息上了新闻，直接刷屏了整个杭州的朋友圈。</p>
<p>大概意思是浙江省鼓励大学生创业，<font color="red">如果创业失败，那么贷款10万以下由政府代偿，贷款10万以上的部分政府代偿80%，封顶50万。</font></p>
<p><img src="/archives/34986ae2/2.png" alt=" "></p>
<p>这么算下来，政府代偿的金额比例是10万加上40万的八成，总计42万。</p>
<p>只要你是大学生，你去创业了，那就可以放心贷款，创业成功了算你自己的，创业失败了政府帮你还42万贷款。</p>
<p>这种消息一旦上了新闻，那肯定是要刷屏的啊。</p>
<p>一夜之间，连收购大学生身份证的广告都出来了，<font color="red">包创业失败，10万利润46分成。</font></p>
<p><img src="/archives/34986ae2/3.png" alt=" "></p>
<p>浙江省这么有钱吗？一个人42万呢，中国今年毕业了接近1000万大学生，要是都跑过来，那浙江岂不是要准备每年4.2万亿人民币的开销？</p>
<p>这政策应该是深思熟虑过的吧，不至于这么离谱吧。</p>
<p>果不其然，事情闹大后浙江省就出来解释了，说确实是每人42万，但不是白送，而是代偿。</p>
<p>所谓代偿，就是当你创业失败欠银行钱的时候，砸锅卖铁都还不起了，所有合法财物都被卖光之后还是还不起的时候，那么政府先替你还给银行，这个就叫代偿。</p>
<font color="red">代偿之后，不代表你这笔债务就消失了，而是永久的记在你的头上，等你有钱再还给浙江省政府。</font>

<font color="red">本质上来说，这更类似于浙江省给你提供了一种信用担保，让你可以从银行借到款，本来不可能被批准的贷款现在可以批准了。</font>

<p>有人说，那也行啊，我先把钱套出来，记在我头上就记在我头上呗，不是听说这年头老赖都活的挺不错的嘛。</p>
<p>事实上，浙江省的这个政策并不是刚推出来的，而是早在2015年就开始实施了，至今已经发执行7年之久，不知道被哪路媒体又翻出来当新闻炒了一番。</p>
<p>整整7年时间，浙江省并没有因为这个政策填进去多少钱，申请代偿的人寥寥无几。</p>
<p><img src="/archives/34986ae2/4.png" alt=" "></p>
<font color="red">浙江省大出血，为每个大学生准备了42万创业基金，为什么足足7年都没有几个人要？</font>

<p>因为代偿记录终身背负，不把这个钱还了你一辈子都是老赖。</p>
<p>别以为老赖那么好当，你要是一口气欠了几百万几千万，那当老赖还有点价值。</p>
<p>但为了区区十万几十万当老赖，完全划不来。</p>
<p>上了征信黑名单后，你会活的好好的，没人强迫你什么。</p>
<font color="red">但你只是活着，再也没有了生活。</font>

<p>你名下不可能有任何房和车，不可能有超过最低生活限度的工资，不可能有什么社保存款。</p>
<p>但凡有点追求的人，都不愿意这样过一辈子。</p>
<p>一个大学生的一辈子，难道连几十万都不值吗？</p>
<p>现在农民工结个婚的彩礼都要几十万呢。</p>
<font color="red">简单的来说，浙江省的这个大学生创业基金，表面上是无条件代偿，但实际上是有抵押物的，这个抵押物就是大学生本人的一辈子。</font>

<p>而且所有的代偿，都需要严格审批才会放款。</p>
<p>并不是你拿个PPT浙江省政府就给你拨款，而是要你先自己拿钱出来正儿八经的创业，还要走银行贷款。</p>
<p>等真创业失败了，亏的一塌糊涂，银行催款你还不上，然后再找浙江省政府救命，他们经过严格审批后才有可能放款，先给你代偿，再保留对你的债权，但并不保证一定会给你代偿，只能是说反复审查材料后没问题才会代偿。</p>
<font color="red">钻政策漏洞去套钱，风险太大，不可控因素太多。</font>

<font color="red">而正儿八经的大学生创业，又不愿意为了这区区十万几十万搭上一辈子。</font>

<font color="red">因此，浙江省政府根本就没有大出血，足足7年都没有在这上面赔付多少钱。</font>

<p><img src="/archives/34986ae2/5.png" alt=" "></p>
<p>虽然浙江省的这个政策是认真的，虽然你要真的去创业，浙江省真的会给你代偿42万，但我劝你不要头脑发热去搞这个事。</p>
<p>因为这只是代偿，所有的钱还是要你来还，亏的钱永远是你自己的钱，除非你心甘情愿一辈子做无任何合法财产可言的社会最底层。</p>
<p>而大学生创业失败的概率，不是一般的大。</p>
<font color="red">我说99%的亏钱率，一点都不夸张，大学生创业失败后的悲惨案例实在是太多，我就不一一赘述了。</font>

<p>什么样的人才适合创业？</p>
<p>这个问题其实等价于，什么人才能创业成功，因为那些失败亏钱的创业无任何价值。</p>
<p>首先，这个社会的生态位是稳定的，有一个人能创业成功就基本代表有一个人被淘汰了下来。</p>
<p>当然，随着经济发展，每年总位置数量会有一个微弱的增长，但多出来的椅子绝对比创业的人要少的多。</p>
<font color="red">你能创业成功，背后的潜台词就是你淘汰了一个人，而且是淘汰了一个曾经的上位者。</font>

<font color="red">这就意味着你的工作效率比他高，你在同等工作时间内创造的价值比他大，你的存在能导致社会总财富出现更快的增长。</font>

<font color="red">这样的人，才能创业成功。</font>

<p>国家当然欢迎这样的人出现，而且是多多益善。</p>
<p>但是，人家在残酷的市场上摸爬滚打20年，见识过无数惊涛骇浪，积累了无数人脉和渠道。</p>
<p>你一个刚出校门，啥工作都没干过的大学生，凭什么直接把他淘汰掉？</p>
<font color="red">凭你那因为足够无知才诞生出来的无畏？</font>

<p>你要是能力真的比这些老江湖要强，那你自然可以创业成功，但这样的人不需要你去鼓励，自己就创业了。</p>
<p>一个可以真正创业成功的人，会具备一个明显的特征，就是个人能力会全面碾压自己的员工。</p>
<p>全维度，大比例的碾压。</p>
<p>正常情况下，一个能雇佣5~10名员工的小老板，虽然能力可能比马云马化腾他们差不少，但相比他雇佣的员工，双方的能力差距堪称一个是导师一个是学生，鸿沟般的巨大差距。</p>
<p>如果没有这么大的差距，如果你的员工在能力上碾压了你。</p>
<font color="red">那凭什么你来当老板，就凭你能拿出10万块钱？</font>

<p>别逗了好吗。</p>
<p>达不到这种能力差距的人，没资格雇佣别人。</p>
<font color="red">创业公司老板本人的能力，一定是公司的能力天花板，而且必须远远超过普通员工。</font>

<p>大学生创业，雇佣的也是大学生。</p>
<p>那请问什么样的大学生应该创业，什么样的大学生应该被雇佣？</p>
<p>难道只用胆子大来区分么，胆子大就能创业成功？</p>
<p>那创业是不是也太简单了点。</p>
<p>创业极难，一个创业者所需要的个人能力极高。</p>
<font color="red">几乎所有的创业者都是从打工仔做起的，而且都曾经是非常优秀的打工仔。</font>

<font color="red">你要是连几个普通员工都拼不过，凭什么开公司反过来雇佣他们呢？</font>

<p>在一些大学生特别容易创业成功的领域，比如说设计领域，拼脑力，轻资产。</p>
<p>凡是开设计公司和设计工作室成功的人都有一个特点，就是当初干普通设计师的时候能力碾压同事。</p>
<p>无论是专业能力，沟通能力，人脉管理能力等全部碾压同事，经常一个人干出全公司50~80%的业绩。</p>
<p>这种人，水到渠成的就会去创业了，而且创业成功率极高。</p>
<p>创业之前，他们的年薪通常是50万，80万，100万，乃至于更高。</p>
<p>但他们最终还是选择了创业，因为他们觉得自己和老板的能力差距没有那么大了，老板能干的自己都能干，而开公司需要的区区几十万原始资本自己也已经积累起来了。</p>
<font color="red">当他个人能力足够强大，强大到可以可以比肩老板后，老板分给这些人的钱再多，只要没分100%给他，他都会辞职创业。</font>

<p>但现在是什么人喊着要创业？</p>
<font color="red">因为打工打不好，始终无法升职加薪的人，想通过创业“改变命运”。</font>

<font color="red">甚至，还有因为毕业后连工作都找不到，想通过“创业”来解决自己的工作问题。</font>

<p><img src="/archives/34986ae2/6.png" alt=" "></p>
<p>这样的人，你要是开公司不把自己家的房子赔掉，那简直就是天理难容。</p>
<font color="red">你一个连最底层同事都干不过的人，还想创业和那些商海的老妖怪们干架，你是哪来的勇气敢这么送死啊。</font>

<p>你至少先通过努力当个基层小主管再考虑创业的事情吧。</p>
<p>在我看来，大学生创业就是个伪命题。</p>
<font color="red">真正应该创业的人，是那些企业高管们，他们才有足够的能力去创业。</font>

<p>这群人能力足够强，也积累了很多经验，创业成功率一点都不低，只是很多人惧怕风险，只能接受成功不能接受失败，失去了压上自己人生所有筹码的勇气。</p>
<font color="red">但无论如何，他们才是真正应该创业的人，是个人晋升的最后一步，从高管跃升为老板。</font>

<p>大学生创业并不是完全不可能成功，但那是基层员工直接跃升为老板，跳了无数职级。</p>
<font color="red">假定每跳一级成功率是1/10，每10个同事才能有一个进阶。</font>

<font color="red">请问你一口气跳那么多级的成功率是多少？</font>

<font color="red">钱真的不是当老板的前提条件，现在当老板需要的本金远远低于在城市买一套房，个人能力才是当老板的关键。</font>

<p>当然，我指的是真正创业成功的老板，那种开公司几个月就破产的大学生我从不认为他们是老板。</p>
<p>国家需要有人来创业，只有创业才能带来活力，才能带来经济的增长，才能带来科技的发展。</p>
<p>大学生的创业意愿是最强的，因为这批人都怀揣着梦想，大多数也都会高估自己的能力，会轻易的选择创业这条路。</p>
<p>鼓励大学生创业，比鼓励企业高管创业要容易的多。</p>
<p>但毫无工作经验的大学生，真的适合创业吗？</p>
<p>有几十万本金就可以当老板，这老板的门槛是不是也太低了点。</p>
<font color="red">打工都打不赢同事的人，绝无可能创业成功，因为你同事就能干掉你，更别提去对决老板了。</font>

<p>大学生真想创业成功，只有两条路可以走。</p>
<p>第一条路，就是不招人，自己雇佣自己，做那种只要一个人的工作，比如说卖热干面啊，做烧烤啊，做个小蛋糕店小奶茶店什么的。</p>
<p>不好做，但勉强能做，毕竟已经符合了老板能力是创业公司天花板这一条，不至于说能力连员工都不如了，因为全公司就自己一个人。</p>
<p>当然，即便如此，也是有很多人创业死在这上面了，开奶茶店倒闭破产的大学生不计其数。</p>
<p>而且我从不认为卖个热干面，开个奶茶店，这能叫创业，这能对中国创新起到什么贡献。</p>
<font color="red">我觉得吧，这更类似于解决大学生就业问题的一种方式，仅此而已。</font>

<p>第二条路是真正的创业，正儿八经的当老板。</p>
<p>大学生想在传统行业创业，那不是九死一生，是百死无生，道理我上面已经说过了，<font color="red">大学生不可能打的赢那群商海老妖怪，即便天赋一样甚至超过老妖怪一个档次都不可能打的赢。</font></p>
<p>大学生创业想有一线生机，唯一的可能性就是在新兴行业，新到那群商海老妖怪觉得你干的事简直就是神经病，拒绝参与那种。</p>
<p>1998年的时候，马化腾的QQ连50万都卖不掉，而且是一群人拒绝买入，那个时候大家看软件创业者就和看神经病差不多，没人觉得这里面会有钱赚。</p>
<p>然后，腾讯成功了，甚至成为了超级巨无霸。</p>
<p>2012年之后的那波大学生创业浪潮，凡是能活下来的，基本都是新兴行业，如APP创业，如机器人创业等等，商海老妖怪完全不能理解，或者几年内无法理解的领域。</p>
<font color="red">这样就没有老妖怪出来和你拼了，愿意进入这个领域和你同台竞技的基本都是一群无知者无畏，而且啥都没有的年轻人，即便不是大学生也基本上都是二十多岁。</font>

<p>大学生对决大学生，几十万本金就算“资金雄厚”的那种创业，大学生自然有胜算，比百死无生强多了。</p>
<p>当然，胜率还是很低，能九死一生就算烧高香了。</p>
<p>另外这还是说那些已经被验证为正确的创业方向，如果你选择错了方向，投入到那些错误的行业，那结果和被人骗了也没区别。</p>
<p>但是一个创业方向是真是假，有没有前途，那还必须得有人走上一趟，走完了才知道。</p>
<p>这是极其巨大的风险。</p>
<p>中国创业成功率不足3%，但这里有很大成功案例都是被高管和优秀员工创业给占据了，懵懂无知的大学生直接创业，成功率我看能有个0.1%就不错了，<font color="red">别一被平均就觉得自己有3%的可能性成功。</font></p>
<p>一旦失败，就是对家庭条件的重创，婚房什么的基本和你无缘。</p>
<p>所以，我对那些看到大学生创业基金就心动的人，诚恳的说一句，<font color="red">请先去打工试一试，积累点个人能力，测一下自己的能力上限。</font></p>
<font color="red">如果你连打工都打不好，连普通员工都卷不赢，那你拿什么和卷了几十年还没死的老妖怪们斗。</font>

<p>这样的人创业，那自然只是炮灰的命。</p>
<font color="red">爹妈辛苦一辈子，供你上了大学，又给你攒了点买房的本钱，别这么轻易的就给糟蹋了。</font>

<p>[阅读原文]<a href="https://mp.weixin.qq.com/s/LAApwN2FcnVO6rJg6xRrtg">https://mp.weixin.qq.com/s/LAApwN2FcnVO6rJg6xRrtg</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>你从来都不知道的成交量！【1】</title>
    <url>/archives/a1e6fdbd/</url>
    <content><![CDATA[<p><img src="/archives/a1e6fdbd/1.png" alt=" "></p>
<p>原创 牛哥 川中寻牛</p>
<p>写此文之前，我们要注意的是，技术分析没有100%的准确，我们做投资只需要去做大概率事件，本文写的关于成交量的看法，则是我对市场的总结归纳。</p>
<p>说到成交量 ，基本上我刚学炒股的时候，就听到老韭菜说：“放量大涨是利好，放量大跌则是利空。”</p>
<p>一直到现在，十几年了，好像人们对成交量的影响，还是停留在这一句话。</p>
<p>就好像说买基金的方法就一定离不开定投，说成交量就一定离不开这句话。</p>
<p>这个时候，我就要提出疑问，难道所有基金都适合定投吗？难道放量大涨，一定是利好吗？难道缩量大跌，一定是利空吗？</p>
<p>为什么就没有人怀疑这句话？他就一定是对的吗？</p>
<p>我们的投资学中，有太多太多这样的至理名言，如果不去弄懂为什么，不分当时当下，单纯的相信一句话，我认为是一件很韭菜的事情。</p>
<p>所以我们如果要正确学会交易，要学会成交量第一步。就是学会用思辨的思维，来正确的看待市场的一些“至理名言”</p>
<p>如果我们要思辨 “放量大涨是不是利好”</p>
<p>我们先要做几个简单的科普，<font color="red">到底什么是放量。</font></p>
<p>放量，放的是成交量，成交量比前一段时间明显放大，就叫放量。</p>
<p>举一个简单的例子，昨天的成交量是100万，今天的成交量300万就可以说 今天是放量了。</p>
<p>反过来，昨天如果是300w成交量，今天是100w，则是缩量。</p>
<p><img src="/archives/a1e6fdbd/2.png" alt=" "></p>
<p>我们用1作为参照物，2就是对1的缩量。</p>
<p>我们用3做参照物，4则是对3的放量。</p>
<p>放量缩量都是相对于之前的量能做左侧对比。</p>
<p>第二个我们一定要明白<font color="red">量能的本质。</font></p>
<p>量能的本质说白了，就是<font color="red">人们对这只股票的看法的具象化。</font></p>
<p>我非常看好这支股票，我就会买入，当我不看好这支股票我就会卖出。</p>
<p>我们都喜欢苹果，买入苹果的人多，苹果价格就会上涨。</p>
<p>相反，我们都不喜欢苹果，卖出苹果的人多，苹果价格就会下跌。</p>
<p>股价无非就三种情况， 下跌，震荡，上涨。</p>
<p>当我们知道，量能本质是什么，什么是放量以后。</p>
<p>我们在分情况来理解一下，放量大涨到底是不是利好？</p>
<p>当股价在下跌的的时候，股价却突然放量大涨。【如下图】</p>
<p><img src="/archives/a1e6fdbd/3.png" alt=" "></p>
<p>不知道大家心里有没有疑惑，<font color="red">为什么有人敢在股价大跌的时候 去买入股票？</font></p>
<p>当一只股票股价不断创新低的时候，就等于是一辆向下的列车，不断的冲击着我们的心里防线，你每跌一个百分点，都会引起一部分人割肉止损。</p>
<p>你敢在股价下跌的时候去抄底吗？我肯定不敢。</p>
<p>我们当然不知道他的买入理由是什么。</p>
<p>但是我们可以知道的是，<font color="red">别人是在用真金白银来捍卫自己的观点，他看好这支股票。</font></p>
<p>下跌过程中股价放量反弹。</p>
<p>我们可以代入自己，当我的股票不断的下跌，不断的创新低的时候，我有一千个，一万个理由把他卖掉。</p>
<p>但是当这支股票放量大涨以后，这些卖掉的理由好像消失了。</p>
<p>此时此刻你该怎么办？</p>
<p>少数人会选择卖出，及时止损。</p>
<p>但是我相信大多数人会选择等一等，等一个更高的价格。</p>
<p>所以下跌过程中，<font color="red">股价放量反弹其实是给准备割肉的同学一点希望。</font></p>
<p>如果不是着急用钱的人，或者没有对这支股票绝望的人。看到股价放量反弹，80%会停止卖票的脚步。</p>
<p>当卖盘减少，如果我们还有钱，我们就可以用比原来少很多的钱，把股价给拉升起来。</p>
<p>例如下图，1号点到3号点，股价上涨了10%，但是3号点的成交量却比1号点少这么多，就是这个原因了。</p>
<p><img src="/archives/a1e6fdbd/4.png" alt=" "></p>
<p>所以大家心里就要清楚，<font color="red">股价在下跌的时候，放量大涨是利好！</font></p>
<p>但并不是因为放量大涨有多重要，关键是给了要割肉的同学信心。</p>
<p>当减少了抛压，则只需要一点钱就可以拉升股价。</p>
<p>第二个场景，股价在震荡中，股价突然放量大涨。</p>
<p>我们经历过，<font color="red">下跌过程中放量是利好以后，</font>再来理解，震荡过程中放量大涨是不是利好，就很轻松了。</p>
<p>股价处于震荡过程中，意味多空双方都很平均。</p>
<p>当然如果不平均，股价要么上涨，要么下跌了。就不会震荡了。</p>
<p>当手里震荡的股票突然出现一根放量大涨的K线，其实正常的思维就两种， </p>
<p>第一种：这次是不是要突破了?</p>
<p>第二种：冲高到了箱体上沿，估计要下跌。</p>
<p>仍然很均衡。</p>
<p>所以，在震荡市场突然出现一根放量大涨的K线，并没有特别的意义。</p>
<p>真正有意义的K线是突破箱体的那一根K线。</p>
<p>换句话说，只有放量大涨<font color="red">突破箱体的K线，</font>才具有代表性意义。</p>
<p>有意义的是突破箱体，也不是放量大涨。</p>
<p><img src="/archives/a1e6fdbd/5.png" alt=" "></p>
<p>但是<font color="red">箱体里面放量大涨可以有很多次，但是放量突破箱体只有一次。</font></p>
<p>如果股票在箱体震荡的时候，你看到放量大涨去追。从概率学的角度来说，10次里面9次会失败，意味着见顶，只有最有一次才意味着突破。 </p>
<p>所以要我们清楚，股票处于箱体震荡的时候，放量大涨。<font color="red">利空的概率大于利多。</font></p>
<p>最后一个场景，股票在上涨过程中放量大涨，是否是利好， 这个问题则相对复杂。</p>
<p>因为股票在震荡，下跌过程中，我们面对的是里面的存量资金，外来资金很少。</p>
<p>但是股票一旦上涨之后，可能会有各种利好消息，或者会吸引很多投机的人来，也会因为利好消息的缘故，让市场很多人注意到股票。</p>
<p>所以在上涨过程中，放量上涨之后，可以连续放量上涨，也可以缩量也上涨，并没有明显的区别。</p>
<p>我认为上涨过程中，<font color="red">日线级别的放量大涨，并没有太明显的意义。</font>不代表什么。</p>
<p>但是如果我们把眼光放大一点，我们就知道，板块还是个股都是有容量。</p>
<p>一旦资金到了某个限额，就是我们常说的，价格就变得太贵了，让人无法下手。</p>
<p>股价在2元的时候，我拉升涨停只需要20块，但是当你股价到20元的时候，我拉升你一个涨停就要200元，谁还会去买？不如找个平民替代了。</p>
<p>所以上涨过程中，放量大涨虽然没有实质性意义，但是有一个小技巧。 </p>
<p>当一只股票上涨过程中，周线高位放巨量，80%下一根周线收阴。</p>
<p>当一个板块上涨过程中，月线高位放巨量，80%下一根月线收阴。</p>
<p>例如强势入宁德时代，在股票上涨过程中 周线高位放巨量，下一根K线也是收阴线</p>
<p><img src="/archives/a1e6fdbd/6.png" alt=" "></p>
<p>今年强势如煤炭， 月线高位放巨量以后，下一根月线也是收阴。</p>
<p><img src="/archives/a1e6fdbd/7.png" alt=" "></p>
<p>我们把放量大涨，放在股票的三种状态里面里面。</p>
<p><font color="red">能够得出放量大涨是利好的次数，屈指可数，</font>绝大多数的时候都是利空.</p>
<p>而且股票里面三种状态转换的比较频繁。</p>
<p>这种规律放在不怎么频繁，一年80%都在震荡的大盘上面则更明显。</p>
<p>例如2020年的这段行情，如果你的观点是，“放量大涨是利好”则6次放量大涨追涨， 你会被套5次！成功一次。</p>
<p><img src="/archives/a1e6fdbd/8.png" alt=" "></p>
<p>相反，我们如果能早点清楚，高位放巨量，次日收阴线，则每一次都可以卖在阶段性高点。</p>
<p><img src="/archives/a1e6fdbd/9.png" alt=" "></p>
<p>我们动用思辨的思维，其实就可以知道“放量大涨是利好” 这一句话是有他的特定条件。</p>
<p>同一个条件，放在不同的环境，效果则完全不一样。</p>
<p>当然今天我们因为篇幅的缘故，只能给大家说一下 “放量上涨” 。</p>
<p>“放量大跌”则留在下一篇。还有一些其他的运用我们就留在下下篇~</p>
<p>————</p>
<p>最后我们留下一个作业：“股价在下跌过程中，放量大涨” 一定是利好吗？</p>
<p>[阅读原文]<a href="https://mp.weixin.qq.com/s/JU4NnyhIYoV0Ua5jXthRIw">https://mp.weixin.qq.com/s/JU4NnyhIYoV0Ua5jXthRIw</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>人脑缓存太低，所以你家孩子绝不能死记硬背，因为肯定记不住</title>
    <url>/archives/1f084e1/</url>
    <content><![CDATA[<p><img src="/archives/1f084e1/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木</p>
<p>今天就给大家闲聊点孩子教育方面的硬知识吧，希望能在教育孩子学习方面帮到大家。</p>
<p>怎么样去学习才能记住大量知识，我有经验，也有办法。</p>
<p>但只是和你说这些办法是没用的，因为你无法理解这些办法为什么有效。</p>
<p>哪怕你信我，你孩子也不信我。</p>
<font color="red">即便信，因为不知道原理，用起来效果也很差。</font>

<font color="red">所以，我需要首先给你们讲解下人体大脑的构成。</font>

<p>人类所有知识和智慧的硬件基础都是大脑，只有了解大脑运行的特点，你才有可能理解为什么有些办法可以让你轻易记住大量知识。</p>
<font color="red">人类大脑的特点非常明显，用电脑专业名词类比的话，就是硬盘极大，缓存极小。</font>

<p>大脑的神经元极多，理论上存储空间惊人，而实际上人类确实可以记住十几二十年来发生的很多很多事情。</p>
<p>这种存储能力是很多尖端电脑都达不到的，让很多科学家大为震惊，因此经常有什么人类还没有开发大脑潜力1%的理论出现。</p>
<font color="red">否则，存储能力这么强大的你，为什么啥知识都记不住？</font>

<p>但实际上人脑并不是只开发了1%，而是开发了100%。</p>
<font color="red">之所以庞大的存储能力和你那可怜的知识储备不相匹配，是因为人脑的缓存低的惊人。</font>

<p>什么叫缓存？</p>
<p>CPU可以瞬间读取的数据叫缓存，缓存里找不到数据就去内存找，还没有就去硬盘找，所以缓存极大的影响CPU的运算速度。</p>
<p>人类的缓存低到什么程度？</p>
<p>虽然你学会了算术，几千位的算术都不是难题，但人类的大脑却只能凭空计算二位数以内的乘除法。</p>
<p>除非掌握各种速算技巧，用投机取巧的办法得出计算结果，<font color="red">否则12乘以34等于几，这就是你可怜的大脑能算出的极限。</font></p>
<p>你在大脑中模拟一张草稿纸，只能进行这个等级的运算。</p>
<font color="red">至于三位数的乘法，比如说123乘以456等于几，你可怜的大脑绝对算不出来，算着后面的就忘记前面的，因为运算的数据量超过了你大脑的缓存极限。</font>

<p>运算结果是56088，你的脑子算出来了吗？</p>
<font color="red">别试了，你可怜的大脑直接死机也算不出来的。</font>

<p>但只要给你一张草稿纸和一支笔，让你在草稿纸上进行数学运算，成绩再差的学生都能轻易算出这个结果。</p>
<p>就算是1234乘以5678这种四位数乘法，乃至于更高等级的运算，凭借草稿纸，你也可以轻易算出结果，而且毫无难度可言。</p>
<p>这种草稿纸，就等于电脑的内存，极大的提升了你大脑的缓存上限，所以你才可以运算出三位数以上的乘法结果。</p>
<p>人脑是不是很奇妙？</p>
<font color="red">你明明知道123乘以456怎么算，也可以凭借草稿纸轻易的算出结果，但不给你草稿纸，你就是算不出来。</font>

<font color="red">你的大脑，就这么点硬件条件，而且各学科的顶级专家也不会比你强哪去。</font>

<p>数学如此，语文也是如此。</p>
<p>《滕王阁序》，是中国语文的必背课文，无数中国孩子考试时的梦魇。</p>
<p>此文极长，且需要全篇背诵，还是晦涩的文言文，很多孩子们做梦时都在背这篇课文，结果考试的时候还是记不住。</p>
<font color="red">想全篇背诵《滕王阁序》，不掌握技巧是绝对不可能的事情，因为《滕王阁序》全篇的信息容量，已经超过了人脑缓存极限。</font>

<p>没有任何人类可以强行背诵《滕王阁序》全篇，我说的是任何人类，因为你大脑的硬件条件不允许你这么做。</p>
<font color="red">所有能背诵《滕王阁序》全篇的人，都掌握了记忆技巧，只不过有些是主动领悟的，有些是在漫长而痛苦的背诵中被动领悟的。</font>

<p>还有一些人，至死都无法领悟，那考试的时候碰到《滕王阁序》就要丢分。</p>
<p>丢分就丢分了，不会就是不会，没办法。</p>
<p>觉得自己记忆好的人，我考一下你们。</p>
<p>《滕王阁序》里最出名的一句话，是“落霞与孤鹜齐飞，秋水共长天一色。”。</p>
<p>这句话的后面一句是什么？</p>
<p>绝大多数人都记不住了，有些人甚至考试结束后几天就记不住了。</p>
<p>但我只要和你说<font color="red">“落霞与孤鹜齐飞”</font>，你基本上都能回忆起<font color="red">“秋水共长天一色”</font>。</p>
<p>甚至只要说一个落霞，你马上就能接出整句话。</p>
<font color="red">因为人脑的缓存极限，其实就只有一句话多一点，最多不超过2句话。</font>

<font color="red">所以你记忆这么一句话是可以的，记两句话就够呛。</font>

<font color="red">整篇滕王阁序，在你的大脑中，实际上是被割裂为几十句话后零散的记住。</font>

<p>所以你记住全篇的每一句话都很简单，哪怕忘了，点个开头就能立刻想起全句，但背诵全篇就超级困难，困难的无以复加。</p>
<font color="red">把被割裂为几十处的零散知识点串起来，你就能背诵滕王阁序全篇。</font>

<font color="red">如果串不起来，你就绝对无法背诵全篇。</font>

<font color="red">死记硬背能记住滕王阁序全篇是绝对不可能的，没有任何人类能做到。</font>

<font color="red">不是说你不行，而是说所有人类都不行。</font>

<p>“落霞与孤鹜齐飞，秋水共长天一色”的下一句是“渔舟唱晚，响穷彭蠡之滨”。</p>
<p>点你“渔舟”两个字，你就可以立刻背出下一句。</p>
<p>因此，想同时背出这两句话，你就需要在第一句的后面自己加一根锁链，把长天一色和渔舟进行捆绑记忆。</p>
<p>背到长天一色，直接想起渔舟，然后前面的东西直接遗忘，移出大脑缓存，开始回忆渔舟后面的东西。</p>
<p>同理，在你背到“彭蠡之滨”的时候，立刻联想到大雁，然后就可以背出下一句“雁阵惊寒，声断衡阳之浦”。</p>
<font color="red">几十个这样的小锁链组合在一起，配合你记住的几十个零散语句，就可以支撑你背诵滕王阁序全篇。</font>

<font color="red">这个锁链阵，没有学术名称，是我个人定义的，我将其称之为文章脉络。</font>

<font color="red">不背下脉络，单纯去硬背，能背下滕王阁序纯属做梦。</font>

<p>而脉络也需要背诵，如果比较长，那就需要一个更小的锁链去记住这个大锁链，因此背下文章脉络也需要脉络。</p>
<p>如此反复，直到最小的脉络大概只需要花费你3~5秒不到的时间记忆为止。</p>
<p>所以，人类可背诵的文章长度，是有极限的。</p>
<font color="red">当最小的脉络等于你大脑天生的缓存极限时，就达到了你可背诵的理论极限文章长度，再多你肯定记不住。</font>

<p>你天生缓存越大，极限记忆长度就越强。</p>
<p>当然，如果你不懂的记忆办法，只知道死记硬背，那你缓存再大也不如别人的记忆能力强。</p>
<font color="red">至今，没有任何人类的数学运算能力能超过一张草稿纸，你天赋再强也就这个极限。</font>

<font color="red">只能说，在同样掌握草稿纸的前提下，缓存能力越强的人，运算速度越快，运算极限越高。</font>

<p>在文学领域，关于文章脉络的记忆，也有<font color="red">低级、中级和高级之分</font>。</p>
<p>作为学生，你只需要低级的文章脉络就足够了，因为只需要背诵，不需要其他。</p>
<font color="red">在学生阶段，低级脉络反而是最有用的，能最快速度提升成绩，其他等级的脉络没有用，学生也不需要好高骛远去想这些。</font>

<font color="red">但当你步入社会之后，低级的脉络记忆是没有用的，没有任何人会对你是否能背诵滕王阁序感兴趣，能背这个也不会让你的月薪增加一毛钱。</font>

<font color="red">这个时候，你就需要中级的脉络记忆，以及高级的脉络记忆。</font>

<p>这东西没有任何人去教，只能靠你自己去领悟，对学生没用，但对成年人有用。</p>
<font color="red">我领悟的，是我自己的东西，你能不能直接用我不知道，因为每个人的大脑都是独一无二的，有相通性但肯定不完全一样，越高级的大脑运转办法越讲究自己领悟。</font>

<font color="red">今天我讲给你听，你能借鉴多少算多少。</font>

<p>以《滕王阁序》为例，所谓中级脉络记忆，就不是简单的记住长天一色后面有个渔舟，彭蠡之滨后面有个大雁了，<font color="red">而是你要记住王勃当年写《滕王阁序》时的感情，行文理由，文章逻辑推进过程</font>。</p>
<p>王勃为什么要这么写？写“邺水朱华，光照临川之笔”时后面为什么非要写“四美具，二难并”？</p>
<p>理解这些，记住这些，你对《滕王阁序》的理解和记忆就达到了第二档次，也就是中级脉络记忆。</p>
<p>这么记有什么好处？</p>
<p>好处那可就太多了。</p>
<p>首先，在低级脉络的记忆办法里，你除了记住脉络之外，还必须要记住几十处零散句子，没有那几十处零散句子的背诵，你光有低级脉络是没用的。</p>
<p>但是在中级脉络里，零散句子是记忆量是可以大幅压缩的，只记住一点点句子就可以了。</p>
<font color="red">中级脉络领悟到极限，《滕王阁序》你甚至可以一句话都不背。</font>

<font color="red">因为低级脉络讲究的是记忆《滕王阁序》的形。</font>

<font color="red">而中级脉络讲究的是记忆《滕王阁序》的魂。</font>

<p>掌握中级脉络后，你是可以复刻《滕王阁序》的。</p>
<p>虽然我背不下来《滕王阁序》全篇，但我可以自己写一个差不多的。</p>
<p>能背下的零散句子就填充进去，背不下来的就自己脑补一句放进去。</p>
<font color="red">你对《滕王阁序》的理解越深，脑补出来的假句子读起来就越像真的。</font>

<p>这么做在学校考试阶段是肯定要扣分的，因为老师要求一字不差，但踏入社会后是大大加分的。</p>
<font color="red">中级脉络发展到最后，你的脑补能力会提升到极致，然后你就可以从头到尾脑补出一个和《滕王阁序》极其类似，但并不完全相同的文章。</font>

<font color="red">此时，你就从一个学生，步入了文学创作的最低级门槛。</font>

<p>著名的《沁园春·雪》，以及所有的沁园春开头的诗词，都是以唐朝的沁园春词牌为基础进行创作的。</p>
<font color="red">韵律一样，脉络一致，你脑补出不同的填词，就是不同的沁园春。</font>

<font color="red">脑补出再烂的填词，你也算一个诗人，不算那种只会背诵的学生了。</font>

<p>填词越优秀，写出的沁园春越伟大。</p>
<font color="red">所有文学家，都是从分析、提取、学习、吸收中级脉络开始锻炼的。</font>

<font color="red">无一例外。</font>

<p>最多，就是大家对各自领悟办法的命名不一样而已。</p>
<p>至于文学的高级脉络，这个听起来好像就更虚了。</p>
<font color="red">简单的说，这时候你可以抛弃所有基础知识点的背诵，专门记忆行文套路、世界运转规律、各领域疑难问题的推理和分析过程，并不断打磨、优化和记忆那玄之又玄的所谓“写作感觉”。</font>

<font color="red">这些东西全部提取自中级脉络，每一个中级脉络里面都蕴含高级脉络的所有零件。</font>

<font color="red">拥有大量文章、文体的中级脉络后，打碎它们，提取零件，并重新凝聚成一个新的整体，你就形成了自己高级脉络的雏形。</font>

<p>此时，你就是一个真正的作者，段位高那种只会背诵的学生不知道多少级。</p>
<p>高级脉络一旦形成，只需要记住这个脉络，你就可以源源不断的写文章，感觉文学相当简单，而且文章信手拈来，文体也绝不局限于沁园春词牌或者某个爆款刷屏文的固定格式。</p>
<font color="red">形成自己高级脉络的人，没有固定格式，更绝不会拘泥于中级脉络，想怎么写就怎么写，写啥东西都是文章。</font>

<font color="red">你的高级脉络形成时是什么样子，你的文风就是什么样子。</font>

<p>平时随便找素材，找到什么素材往你脉络里一填，那就是一篇文章，堪称流水化批量生产，根本不用苦思冥想拼命拽头发。</p>
<p>在这类作者眼里，一篇文章除非有独特的观点或者新奇的视角，否则都不算得意文章。</p>
<p>在高级脉络里单纯填素材的文章，普通人已经觉得很优秀了，普通作者更是觉得全文流畅不已，相当精彩。</p>
<p>但在这种等级作者眼里，这叫水文，一般拿来凑数用，毕竟独特观点不太可能天天悟出来，但很多时候需要天天更新。</p>
<p>我也经常水文，所以对这个很清楚。</p>
<p>也因此，顶级作者的文章是无法伪造的，基本上一眼就能看出是不是他写的。</p>
<p>因为没有他脉络的人，永远写不出他的文风，强行按中级脉络去拆解模仿，仿出来的文章质量极低，差别极大，简直就是天地之差那种。</p>
<p>就算是顶级作者的水文，其精彩程度都不是中段位作者能模仿出来的。</p>
<font color="red">这就是所谓的学我者生，似我者死。</font>

<p>别说别人揣摩中级脉络后模仿文风，就算这个顶级作者切换一个领域去写文章，如果他本人没有形成这个领域的高级脉络的话，那文章质量也会刷刷地掉。</p>
<p>当然，有些作者实力极强，形成了多个领域的高级脉络，所以可以跨领域写作，但不同领域的高级脉络领悟程度肯定有所差别，所以在不同领域发挥的实力也不尽相同。</p>
<p>比如说我自己，一个人纯粹的凭文章写成了全国排前几的自媒体大号，就天生排斥情感文，虽然也硬生生的通过拆解学习，最终形成了一套情感鸡汤文领域的高级脉络，但运用起来相当难受，只能说比中级脉络强一点，所以我平时基本从不碰情感鸡汤文领域的题材。</p>
<p>但如果是时政、经济、历史、文学、军事、杂谈等领域的文章，我就写的相当舒服，质量也强的不是一星半点。</p>
<p>到了这地步，讲是就是天赋问题了，人的天赋是有极限的，覆盖全领域的万能选手是不存在的，我自己形成的高级脉络覆盖如此之广已经算独一份的，绝大多数作者其实只能在一个领域悟出高级脉络。</p>
<p>能精通一脉，已经算远超普通人的文学强者了，其实多了也没啥用，除了选题容易的多，平时文章产量高之外没啥优点。</p>
<p>我纯粹是因为平时喜欢读杂书才最终变成这样，不代表这个具备普适性，请自行注意。</p>
<font color="red">另外还有一点要说，想形成高级脉络必须首先具备中级脉络，但并不代表有高级脉络的人能掌握所有中级脉络。</font>

<p>比如说我，肯定是掌握高级脉络的人，而且是个中高手，但是在《滕王阁序》领域，我目前依然处于低级脉络之中，也就是背诵阶段，远没有形成中级脉络。</p>
<p>因为现在不是文言文的时代，市场不需要这个，我就没有研究这个。</p>
<p>因为没有分析提取文言文中级脉络的需求，所以我没有花费时间在这上面。</p>
<font color="red">天赋再强，不花时间，那也是零。</font>

<font color="red">就算是我，只要没有领悟掌握《滕王阁序》中级脉络，那就无法仿写、改写《滕王阁序》，更不可能凭借《滕王阁序》中级脉络为根基进化成高级脉络，从而自由自在的写出各种精美古诗词。</font>

<p>如果生活在古代，我肯定已经领悟到这一阶段了，但如今是现代，花费大量时间研究这个意义不大。</p>
<p>所以我对《滕王阁序》的理解和普通学生区别不大。</p>
<p>但对于很多现代文章，我花费大量时间进行了学习、拆解、提纯和吸收，对应形成的中级脉络绝不是一个二个，而是几百上千个。</p>
<p>每一篇自媒体爆款文出来，我都会花时间进行拆解，看看有没有什么我能吸收优化的零件。</p>
<p>有，则改之。</p>
<p>无，则欣赏。</p>
<p>为什么有人弄出一个中级脉络都难，百般摸索都没有头绪，而我可以弄出几百上千个？</p>
<p>因为文章具备通用性，绝大多数文章都大差不差。</p>
<font color="red">形成第一个中级脉络很难，但后面会越来越简单。</font>

<p>当我形成高级脉络之后，我甚至并不需要对一篇文章进行完全拆解，细细揣摩，而是一目十行，一扫而过。</p>
<p>绝大多数内容我是不需要去看的，也不需要去分析，更谈不上去记忆吸收，因为这些东西早就已经包含在我自身脉络里了。</p>
<p>到了我这个阶段，一个超级好文章的10成脉络，里面能有1%对我有用，能让我领悟一二，我就谢天谢地了。</p>
<font color="red">自身高级脉络越完善，优化就越难，碰到一篇能让自己有稍许进步的好文章恨不能打印出来放床头拼命吸收，直到所有东西都没有参考价值为止。</font>

<p>通常情况下，看100篇好文章，会发现这100篇好文章的最大利用价值就是拆碎了当素材填充用，对自身脉络的优化一丝一毫的价值都没有，等级越高的作者对这一点感触越深。</p>
<font color="red">朝闻道，夕死可以。</font>

<p>所有领域的顶级专家对真理的追求接近自身极限时，都会有这种感悟，物理学和文学在这方面没有差别。</p>
<p>因为绝大多数文章没有可吸收的地方，所以同样一篇好文章，我对其进行消化吸收的速度，看起来好像会百倍于普通人。</p>
<font color="red">其实我的消化速度能1倍于普通人已经算天才到极致了，能达到看起来好像是百倍，好像是一目十行的效果，那完全是因为98~99%的内容我根本就不用看，也不用思考。

你还没思考完第一段，我全文都拆解完了。</font>

<p>真正原因，是我拆解时根本就不用思考，直接按自己已经形成的高级脉络进行套路化工作。</p>
<p>这个在古代也有记载，叫书越读越薄。</p>
<p>读书读到一定多的地步，很多书哪怕第一次读，都是哗哗哗的翻。</p>
<font color="red">看起来好像是一目十行，其实不是，这个人压根就是在跳读，很多内容一扫而过，没有记，甚至都没有看，但并不妨碍这个人吸取了全书所有精华。</font>

<font color="red">我那么清楚，是因为我自己天天跳读，看起来我读了10万字，实际上里面有1万字是我细细读的就不错了，说不定我只读了五六千字。</font>

<p>聊完了文科，再回去聊聊理科。</p>
<font color="red">数学、物理、化学这方面如何去提升考试成绩？</font>

<font color="red">说出来你可能不信，我从小是理科学霸，数学成绩甚至比语文还要好。</font>

<p>因为小孩子根本谈不上对世界有什么感悟，所谓的中小学作文压根就是八股文，根本不算文章。</p>
<p>所有的中小学作文训练都是给你硬塞一个基本行文基础，因为考虑到人智商的多样性。</p>
<p>有这方面天赋的，长大了自然会感受到中小学作文训练的益处，没这方面天赋的，就随便训练他们写写八股文呗。</p>
<p>反正中学语文老师是不可能教出文学作者的，因为他自己都不是，国家也不可能找到那么多作者去中小学教书。</p>
<font color="red">所以，我长大了文科强，不代表我小时候文科强，反而我小时候是理科最强。</font>

<font color="red">而理科想拿高分，和背诵《滕王阁序》全篇的方法是一致的。</font>

<font color="red">人脑永远不可能背诵《滕王阁序》全篇，更无法背诵那茫茫多的理科解题套路。</font>

<p>你的大脑连三位数乘法都无法复现，想凭空记忆哪怕一道大题的解题步骤都是做梦。</p>
<font color="red">如果你所有理科题目的解题办法都是靠背诵每个步骤，那难度等于你背诵无数的简化版《滕王阁序》。</font>

<p>难度不是一般的大，是超级大。</p>
<font color="red">只会死记硬背的人，你语文英语或许还能拿点分，理科一定直接崩溃，因为你根本就背不下来，也不可能背下来。</font>

<p>实际上，整个地球都没人能背下来，更别说你了。</p>
<font color="red">理科一样有脉络，而且更需要脉络。</font>

<p>所有的理科题目，都基于本学期几个公式的繁衍和推导。</p>
<font color="red">你需要背诵的是推理过程，这个就是理科低级脉络中的锁链。</font>

<p>我记的非常清楚，高中一二三年级的考试，期末考试前的数学，<font color="red">需要我考前背诵，绝不能忘的东西只有那么几个数学公式，总长度绝不超过一张巴掌大的纸，</font>这个是本学期数学考试的万物之基，考前必须反复背诵，强行记忆，绝不能错一丝一毫。</p>
<p>其他所有的考试题目，全部都基于这几个公式的推导和逻辑演变，记忆了低级脉络之后可以轻易解出一道又一道的题目。</p>
<p>所以在数学考试前，我除了要反复背诵那巴掌大纸张上的几条数学公式外，还要反复看错题集。</p>
<font color="red">理科学习，所有错题都是至宝。</font>

<font color="red">这道题你错了，说明你对这道题低级脉络的掌握出现了问题。</font>

<p>考前把这些错题拿出来反复看，反复感悟并记忆正确的低级脉络，然后你就可以去参加考试了。</p>
<font color="red">中国的应试考试是必须要背诵的，但可能顶级学生和普通学生的背诵方式，天差地别。</font>

<font color="red">同样记忆天赋和同样记忆时间，能记住的知识量，也是天差地别。</font>

<p>至于物理考试，一个学期需要强行背诵达到绝对记忆标准的东西，绝不会超过一页纸，里面是各种重要物理定理和几个公式。</p>
<p>其他的，全靠物理题目的低级脉络去推演，以那一页纸上的知识点为基础进行推演。</p>
<p>这些东西搭配物理错题集，复习复习，就可以去考试了。</p>
<p>化学一样，期末考试要背的东西也绝不超过一页纸，这些东西当基础加上错题集，就够了。</p>
<p>最讨厌的东西就是英语，这一科目必须要记忆大量的英语单词。</p>
<p>没有任何办法，纯粹的死记硬背。</p>
<font color="red">英语几乎不存在逻辑推导过程，需要记忆的低级脉络也很少，甚至可以说没有。</font>

<p>我不客气的说，如果把英语试卷上的所有英语单词全部给我翻译成汉语，哪怕没有语法，直接把每个英语单词换成汉语。除了听力和作文，其他直接无脑满分，顶多稍微听英语老师讲点套路就可以了。</p>
<font color="red">所以英语考试实际上就是英语单词考试，考你大脑对中英单词的记忆程度。</font>

<p>每一个英语单词都不难，每一个英语单词都没超过大脑缓存极限。</p>
<p>但需要背诵的零散英语单词实在是太特么多了。</p>
<font color="red">数理化考试，我考前最多背一页纸，里面只有一点点东西需要达到绝对记忆，其他靠脉络记忆。</font>

<font color="red">英语考试，我考前至少要背几十页纸，所有的英语单词我都必须要背，考虑到写作还要背一些语法。</font>

<font color="red">没有啥技巧，就是背。</font>

<p>这些极其零散，毫无技巧可言的知识点，如果你长期接触，日日使用，那它们会化为你的潜意识，可以毫不费力的记住并调用。</p>
<p>但如果你平时不用，而且潜意识里认为这些英语单词你以后用不着，纯粹为了完成考试去记忆，那你背英语就会极其痛苦。</p>
<font color="red">英语无脉络，就是拼一个熟练度，这导致英语耗费的记忆量是极其恐怖的，需要你投入大量的时间。</font>

<font color="red">英美一个傻子都会说英语，但在中国你必须是顶级精英且经常练习才能掌握英语技能，就是这个原因。</font>

<p>英语之路是建立在单词基础上的，不背诵且日日熟悉大量的单词，你英语不可能好起来。</p>
<font color="red">对大多数智商正常的人来说，英语成绩和你投入的时间量，以及背诵的坚持度成直接正比，无技巧可言。</font>

<p>以上，就是我对理科所有学科的理解。</p>
<p>当然，我工作后并没有踏入理科顶级学者之路，反而阴差阳错的去搞了文科，所以我对理科的理解还停留在低级脉络阶段。</p>
<font color="red">万道相通，理科一定存在类似的中级脉络和高级脉络，只不过我目前没有领悟出来而已，所以更加说不清楚是什么东西，但这东西肯定存在。</font>

<p>理科顶级学者肯定领悟出来了这东西，但他们文笔不好，写不出来。</p>
<p>我能写出来，但我没有长期参加理工科工作，没有机会领悟。</p>
<p>不过对大家而言，理科低级脉络足够用了。</p>
<p>你达到我这理科低级脉络的程度，就能考上理工科985大学硕士，至少我用这一套在武汉华科读了研，要不是当初觉得我这专业读博意义不大，我也能博士毕业。</p>
<p>更多的，你自己在踏入社会后的理工科工作中慢慢悟就是。</p>
<p>我高中没学过文科，所以对政治历史之类的课程，连低级脉络都没有形成，也不知道怎么去指导文科学生。</p>
<p>但学习的脉络应该是相通的，而且我写了不少政治历史的文章，基本也等同于给读者上课了。</p>
<p>我随便找了一个历史老师上课的PPT，给大家讲一讲里面的道理。</p>
<p><img src="/archives/1f084e1/2.png" alt=" "></p>
<p>如果要记忆学习上图中的明朝历史，就这么一张PPT让孩子们直接去强行背诵，那肯定是记不住的。</p>
<p>要是整本历史书所有知识点都要这么零散的强行背诵，这记忆量恐怕比英语还要恐怖。</p>
<font color="red">别说你记不住，我也记不住。</font>

<p>如果是我去讲解这东西，那我肯定要把明朝历史背后的故事讲一下，让孩子们知道明太祖为什么要创立内阁，发展的过程中有什么好玩典故，明太祖在乎什么，不在乎什么，为什么这么想。</p>
<p>这么上课，孩子们肯定好记忆，提到明太祖就立刻能联想到这一系列的东西。</p>
<font color="red">甚至不止内阁，可以把书上整个明朝所有需要背诵的知识点串起来说，找一个有趣的点作为核心链接起来，选一个好玩的视角，然后拼成长篇故事
。</font>
<font color="red">你能说到让孩子们如痴如醉，听到下课铃就烦，拉着你不让你下课的地步，那你这节课的知识孩子们不费吹灰之力就能深刻记忆，举一反三，记一个点可以贯通全局。</font>

<p>但如果你只是这么放PPT上讲一下，然后一切都让孩子们自己背，那孩子们必然要耗费数倍的精力才能把这东西勉强背下来，而且相当痛苦。</p>
<font color="red">在孩子同样智商，同样努力的情况下，不同的授课方式会导致孩子们对这个知识点产生不同的印象，而不同的印象会带来不同的记忆难度，最终在复现知识的时候产生巨大的容量差别。</font>

<p>这就是名师讲课和普通老师讲课的差别。</p>
<p>不能说同一个老师教课，怎么有的孩子行，你就不行，这是完全把责任甩在孩子身上了。</p>
<p>孩子本身固然有天赋差别，但老师确实也有差别，只不过找好老师太难，绝大多数老师都是普通人，按规定完成教学任务就完事了，能大幅降低学习难度的办法过难，<font color="red">知识点打碎重新组织，这种行为几乎等同于重构书本，甚至凌驾于书本，他们没动力做，也没那能力去做。</font></p>
<p>简单的在PPT里把要背的考点列举个1234，让孩子们去死记硬背，这多简单，多容易操作，也有利于地方教育部门批量培训大量老师按这个办法展开工作。</p>
<p>达到我说的这种好老师地步，是绝对的凤毛麟角，比清北学生的比例还要低得多，找真正的好老师远不是一般家庭可以承受的代价，于是就只能要求孩子好好学习，不要考虑老师的差别问题。</p>
<p>绝大多数家庭都找不到好老师，眼下的老师即便换了，大概率也是个照本宣科的普通老师。</p>
<font color="red">老师的任务就是把考点和知识点给你复述一遍，做到这一步他们就已经算完成了本职工作，能讲到学生如痴如醉的地步，那都是传说级老师，全国都没几个。</font>

<font color="red">所以，当老师给你讲知识点、考点的时候，你不能直接按上课笔记硬背，你必须自己找到政治历史这类课知识点背后的共同点或者说连接点。</font>

<p>也就是，所谓的历史课和政治课的低级脉络。</p>
<font color="red">我没参加过文科考试，高中阶段的低级脉络我也没有感悟过，只是高屋建瓴的从高处去反推，所以我只能大概说说其中的原理，具体描述说不清楚，但这东西肯定有。</font>

<p>人类大脑的缓存太低，只能记忆极少量的东西，所以会自动抛弃大脑认为不重要的部分。</p>
<p>比方说，你的眼睛明明看到你出门的时候是不是关门了。</p>
<p>但出门的1分钟后，你也许就把这件事给忘了，死活无法确认自己是否关了门，脑海中空白一片，毫无记忆。</p>
<p>因为你的大脑认为这个细节不重要，为了避免这东西占缓存，直接就把这段记忆给删除了，去记那些大脑认为更重要的东西。</p>
<font color="red">缓存大小，直接决定了一个人的反应能力和大脑响应速度，也就是俗称的脑子转得快。</font>

<p>目前绝大多数人类的缓存其实是够用的，在几十亿年的进化里，<font color="red">人类目前的大脑缓存，足够你逃跑用，足够捕猎用，足够你搏杀用，也足够你寻找异性繁衍后代用。</font></p>
<p>既然完全够用，那干嘛要进化出更强的缓存？</p>
<p>但基因万万没想到的是，人类文明的进化速度远远超过了基因的进化速度。</p>
<p>基因不需要大脑去解三位数乘法，也不需要大脑去背诵滕王阁序。</p>
<font color="red">整个自然界没有任何动物需要去背滕王阁序这玩意，也不需要学三位数算术，但人类需要。</font>

<p>所以，缓存不够用了。</p>
<p>不借助草稿纸，人类大脑连三位数乘法都搞不定。</p>
<p>不借助计算机，目前的大多数顶级数学问题人类已经彻底无能为力了，因为这些数学问题远超草稿纸可以运算的范畴。</p>
<p>简单说，人类大脑等于是80年代的垃圾CPU，就算运行90年代的小游戏都够呛，更别说去运行2022年的新款大型游戏了。</p>
<font color="red">因此，目前人类所有的所谓学习办法，记忆办法，本质上都是用那可怜的缓存，去尽可能的链接最多的知识点。</font>

<p>每一个知识点的大小最多等于缓存，而链接办法的大小最多等于缓存，双方的化学反应之和等于你记忆的天赋极限长度。</p>
<p>有人大脑天生缓存是10KB的，有人大脑天生缓存是15KB的，双方的能力会有巨大差别，但这并不是不可弥补的。</p>
<p>如果你没有领悟并记忆相应脉络链接办法，那天生缓存高一点实际上根本发挥不出优势。</p>
<p>利用脉络，有人可以用10KB的缓存发挥出100KB乃至于1000KB的记忆力，而没有任何脉络的强行死记硬背，撑死就是15KB的记忆量，这差距简直太大了。</p>
<p>但如果那个拥有15KB内存的人类同时拥有坚韧的意志和对一件事情充满兴趣要研究到底的精神，深钻某个领域数年，数十年，掌握了低级，中级，乃至于高级脉络办法。</p>
<p>那在这个领域，双方的差距就远不止50%，可以达到100倍乃至于500倍的差距，你看对方好像是在看神，觉得对方的一切成果都不可思议。</p>
<font color="red">这个领域的诸神之战，发生在那些缓存15和16KB，并且双方都投入一切精力，深耕此行业十几二十年的超级专家身上。</font>

<p>爱因斯坦也只是在物理学上厉害，在生物学上并不比普通专家强，在菜市场还价方面甚至还不配给大妈提鞋。</p>
<p>没有任何专家是万能的，他们能强在一个领域就不错了，撑死就几个领域，其他领域甚至不如普通人，因为投入的时间没普通人多。</p>
<p>不同领域的顶级专家，也会对彼此的思考方式毫不理解，如观天书，<font color="red">因为他们只有在自己掌握高级脉络的领域才算专家，其他领域可能连低级脉络都没搞清楚。</font></p>
<p>其实，因为人脑缓存有限，所以所有知识密集型行业都有各自的脉络，甚至连码农应该都有。</p>
<p>我不清楚码农的脉络是什么，但我知道掌握低级脉络的差不多可以当码农组长/主管；掌握中级脉络的差不多可以当架构师了，制定公司软件代码工作的整体布局；掌握高级脉络的基本就是公司创始人了，引领互联网业态前进方向。</p>
<p>大概，应该是这个样子，我不是这行人，随便估一下。</p>
<font color="red">当然，对于自家孩子的教育而言，低级脉络已经足够用了，这东西是可以横扫学校的大杀器，其他中高级脉络都是踏入社会后才有可能领悟并掌握的。</font>

<p>不是说学生阶段完全不可能领悟，天纵奇才是可能提前领悟的，但在学生阶段领悟这些不会给你的考试分数带来丝毫助益，会让你领悟的时间全部白白浪费，甚至可能会出现你花费时间反而丢分的情况。</p>
<font color="red">但是学生早晚会长大的，而踏入社会后就完全反过来了，低级脉络弄的再好也只能让你考试加分，对你的工资增长毫无助益，而中级脉络一旦顿悟你就可以升职加薪，能领悟高级脉络的少数人，则可以实现你期望的一切自由，成为真正的人才。</font>

<font color="red">因为任何知识密集型行业，高级脉络都极难领悟，且一定建立在至少一个中级脉络的基础上。</font>

<p>所以本文写到最后，好像已经不止是孩子教育领域的了，感觉写成了全年龄段文章。</p>
<p>先这样吧，今天本来想写2000字水一篇的，一时兴起，不小心写了一万多字。</p>
<p>有点长，见谅。</p>
<font color="red">希望本文蕴含的知识，能对你有所帮助。</font>

<p>[阅读原文]<a href="https://mp.weixin.qq.com/s/AuOusYZmJP1DhdSuz7lU2Q">https://mp.weixin.qq.com/s/AuOusYZmJP1DhdSuz7lU2Q</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>人物</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>鸡父母时代，正式来临</title>
    <url>/archives/aa6a4c4a/</url>
    <content><![CDATA[<p><img src="/archives/aa6a4c4a/1.png" alt=" "></p>
<p>以下文章来源于每日怡见 ，作者每日怡见</p>
<center><font color="orange" size="4">①单纯的勤劳≠成功重要因素</font></center>

<p>（注：本文说的鸡娃，是一个网络词汇，意思就是逼孩子996式的努力读书。）</p>
<p>社会结构大致是这样的，不完全正确，只是简化方便理解。</p>
<p>掌握生产资料的叫做统治阶级。</p>
<p>不掌握生产资料的叫做打工人。</p>
<p>国际分工上也是如此，流水线看起来轰轰烈烈，实际上赚不了几个钱。核心的技术、知识产权，那些最重要的东西，才是利润最大的核心。</p>
<p>全球大约一半的苹果手机都来自郑州的富士康工厂，富士康的中国人都很勤劳啊，但是为什么勤劳却无法致富？因为你这玩意不稀缺，全世界都不缺搞流水线的，之所以在你这里，不过是因为你的成本最低而已。</p>
<p>最简单，你去看大街上这么多连锁的便利店，这店员上班都勤勤恳恳的，绝对比老板要努力，为什么老板不勤劳，却可以躺赢？</p>
<p>苹果的核心技术，是掌握在美国人自己手里，你确实做了更多流水线生产，但是分不到什么利润，如果你这边成本过高，人家还不如搬到东南亚去。但是目前之所以大部分制造业产业链还在中国，是因为我们的规模效益，上下游完善的产业链，形成了一个生态，在这个生态里面，成本是最低的、速度也是最优的。</p>
<p>以上只是想说明一个简单的道理，就是努力和赚钱有关系，但并不是决定性的关系，如果只靠努力就可以成功，那驴子才是世界首富。</p>
<p>所以我看见很多家长说什么不要让孩子输在起跑线。</p>
<p>我就觉得你能这么想，就充分说明了你的孩子已经输在了起跑线，而且很可能会和你的阶层一样，不会有什么变化。</p>
<p>苹果打败诺基亚，难不成是因为苹果赢在起跑线？能说出不要输在起跑线，就充分暴露了自己在经济学认知的短缺。</p>
<p>英国在鸦片战争用大炮轰开了中国国门，然后中国开始沦为半封建、半殖民地的状态，难不成是因为英国赢在了起跑线？</p>
<p>不是的，是因为人家抓住了时代的机遇。</p>
<p>苹果之前，所有的手机都是诺基亚这样的老人机，苹果手机可以说彻底颠覆了手机，真正意义上让手机变成了移动的电脑，这完全就是降维打击。</p>
<p>就是说你在传统手机确实优势很大，但是我并不会在传统手机和你竞争，我直接玩全新的手机模式，一切从零开始，我就是第一。</p>
<p>同理当年的英国也一样，英国文明底蕴毫无疑问是没有中国发达的，但是人家把握住了工业革命，至于英国工业革命为什么成功，原因很复杂，这里不展开了。</p>
<p>我的意思就是说，人生是很长的，前期输了不重要，关键是“有些时候”得把握住，这里说的“有些时候”，就是时代变革的红利期。</p>
<p>就好像当年学程序员的80后，平均收入都不会太低，比传统行业强多了，因为互联网时代来了，你选择做了程序员，就是把握住了时代大趋势。</p>
<p>总结一下：</p>
<p>1、勤奋虽然重要，但是只勤奋没有用的。不以掌握生产资料为“目的”的勤奋，就是一辈子打工。</p>
<p>2、从社会结构上来说，掌握生产资料才能躺赢。（比如你早期入股了现在的互联网巨头企业，有不少股份，那你肯定能躺赢）</p>
<p>3、致富的关键不是努力，而是学会选择。选择符合时代大趋势的方向，再以掌握生产资料为“目的”去勤奋，才有意义。</p>
<center><font color="orange" size="4">②“知本”比“资本”重要</font></center>

<p>我看见一堆人在双减以后非常激动，说凭什么不让补课啊，我孩子不能考上名牌大学，不能靠补课+BUFF赢在起跑线，以后孩子怎么走上人生巅峰啊。</p>
<p>我看了，实在是绷不住了，差不多得了。</p>
<p>今天我说句得罪人的话，但是并不是空穴来风，你可以回味一下，是有道理的。那就是，咱中国人有一个习惯，总觉得：<font color="red">“只要我们化身拼命三郎一样努力，我就可以成功。”</font></p>
<p>这是什么牛顿第三定律给证明了的宇宙真理吗？我前面已经说的很清楚了，成功和单纯的努力没关系，你再努力也总不能比富士康的工人更努力吧？</p>
<p>得学会动脑子啊！</p>
<p>不愿意“动脑子”，“活该”内卷。（当然我这句话也是气话）</p>
<p>很多家长，就搞一堆补习班给小孩死磕，小孩是苦不堪言，从小就开始996，慢慢的时间长了，长大以后就躺平了，就不想结婚了。因为他们从父母被得到的认知就是，人生结婚以后，就要花费巨额费用去鸡娃，然后开始卷，一代代人这样重复。</p>
<p>如果你从小得到的教育就是人生只有一种成功方式，那就是补课死磕做题，然后卷成卷王后金榜题名，再开始生娃，生娃以后重复内卷，而因为军备竞赛原理，内卷只会越来越严重。</p>
<p>请问你会不会想放弃生娃？如果人生只有痛苦，只有一条路，那还活着干什么？</p>
<p>说一个假设类比场景：</p>
<p>一个流水线工厂的工人，在他狭隘的认知中，人生成功路线就是卷成“流水线生产的第一名”，然后升级成为管流水线的管理层，然后再熬资历成为一个领导。</p>
<p>这是一条艰难的路，但是他认为，没事，我能吃苦，慢慢卷，慢慢熬。</p>
<p>然后他老了以后，告诉自己的孩子，你要想成为下一代成功人士，你多努力，也要卷成“流水线生产的第一名”，然后升级成为管流水线的管理层，然后再熬资历成为一个领导。</p>
<p>但是问题，不仅仅你在努力啊，其他工友也在努力的“福报模式”中啊，一代代人下来，这个就好像死亡竞赛一样，最后内卷的速度就失控了，让人活的非常累，除了抑郁，什么都没有了。</p>
<p>最后，终于有一代人爆发了，既然人生活着就是内卷，还不如做一个躺平的废物算了，甚至觉得活着没什么意思，请问是不是很有道理？</p>
<p>你觉得这个困局的关键是什么？</p>
<p>关键就是我第一段说的，这些人，无论是补课鸡娃的，还是流水线工人这个例子，他们自身对社会的认知都很低，所以他们理解中的“社会上升方法”就这一种方法，而这种上升空间方法，是所有人都知道的。</p>
<p>比如考试成绩好。</p>
<p>比如流水线生产更快。</p>
<p>然后这些对社会整体缺乏认知的普通人，就开始往这些大众熟知的道路上疯狂的堆资源，比如你孩子补一门课，我就补五门课。你做工996努力，他就开启007模式。</p>
<p>这可不就内卷了吗？</p>
<p>是不是非常清晰了？</p>
<p>只要你知道的上升发展路线是大众化的，那么竞争对手肯定就多，你要想脱颖而出就只能更加努力，这是自然规律罢了。</p>
<center><font color="orange" size="4">③赛道丰富很重要</font></center>

<p>那你说怎么解决呢？</p>
<p>其实第一段也写了，就是降维打击。什么意思？我具体分析你看。</p>
<p>如果苹果当年还是做传统手机赛道，最后最好的结局，就是和诺基亚这样的手机，在传统手机赛道里面内卷，最后是越来越辛苦，但是利润越来越薄。</p>
<p>苹果是怎么胜利的？我也说了，就是抓住了移动互联网技术的发展，成功搞出了智能手机，开启了手机变成电脑的时代，彻底粉碎了传统手机赛道。</p>
<p>简单来举例，就是很多年轻人，2008年还在读书的时候，有一个天才少年张炘炀（他13岁就考上了大学，16岁成为了北工大的硕士研究生），经过自己的宏观经济分析后，认定房价会涨，开始撺掇父母去北京买房。</p>
<p>这是不是典型类似苹果的降维打击模式？</p>
<p>你诺基亚不是在传统手机牛吗？我直接不做传统手机，不就好了？</p>
<p>你普通人不是还在升学中内卷吗？出来还得去找工作，张炘炀直接降维打击，让父母在2008年去北京囤房子，是不是切换赛道，马上化作人生赢家？</p>
<p>到时候你工作多年还就这么点钱，人家身家则以肉眼速度暴涨。</p>
<p>是不是感觉张炘炀不愧是天才少年，居然这么早就意识到一个国家经济腾飞，核心城市区域的房价一定会利好。</p>
<p>很可惜，现实很残酷。</p>
<p>张炘炀2008年给父母提出要马上、立刻去北京买房以后，和父母爆发了激烈的争吵，爹妈觉得，你想这些没用的宏观经济学有什么用！我只知道大家都说，好好读书才是正道。</p>
<p>随后这个事越闹越大，引起了舆论关注，张炘炀被媒体和网友怒斥三观不正…最终他计划逼迫父母在北京买房的计划破产。</p>
<p>多年以后，张炘炀父母泪流满面…算了，不说了。</p>
<p>这倒不是说要你现在去买房，现在房产税都来了，时代早变了。我只是说，在当时的那种特定环境下，张炘炀经过自己的宏观经济学研究以后，他的看法确实是对的。</p>
<p>而他家如果当年真的北京买房了，是不是就实现了成功路径上的火箭式飞跃？</p>
<p>就是你还在努力跑路的时候，人家已经上了和谐号动车开始狂飙了。</p>
<p>你以为我这是要给你灌输投机的人生思想吗？大错特错。</p>
<p>我的观点恰恰有一点类似张炘炀父母，要好好读书啊。但是我和张炘炀父母的想法也有完全不一样的地方，就是我不认为好好读书=考大学。</p>
<p>张炘炀为什么能在2008年就意识到北京房价有戏， 你或者你父母却意识不到，你有没有想过这个问题？</p>
<p>这就是知识的差距。</p>
<p>这也是为什么我前面说，郑州富士康的工人都很努力啊，可苹果大部分利润都被美国股东拿走了。</p>
<p>不过脑子的努力，就是典型的流水线行为。</p>
<p>资本的积累是很重要的，因为只有你有大量的现金流，你才可以去购买生产资料，简单来说就是有钱才能投资，投资成功以后，就可以靠股份躺赢了。</p>
<p>这个是很多人天天讲的，没什么意思，耳朵都起茧了。</p>
<p>但是有一个事情，往往被人忽略了，那就是知识资本的积累。</p>
<p>什么叫知识资本？就是你这一辈子对社会全面经验的总结，你是可以传授给你的下一代的，这样你的下一代，社会基础就不是零了，而是正在你的肩膀上努力。</p>
<p>这种几代人的社会认知经验叠加以后，就会形成知识的资本，也就是家学。</p>
<p>说的最简单的例子，你不是经济学家，但是你平时很爱看经济内容，对经济是颇有心得的，很多知识点，你是完全搞懂了的。你总结了这么多年以后，就可以传授给你的下一代，这样你的下一代就不会对很多经济学知识是空白了。</p>
<p>还是说一个可视化的例子吧，假设你现在穿越了：</p>
<p>你穿越到了2008年的中国，你说你会不会去省城中心区域买房？那肯定啊，因为买了就是赚到了。</p>
<p>这背后其实就是一个最基础的经济学经验，经济腾飞的国家，房价往往是利好，所已如果一个发展中国家经济有腾飞的趋势，你去他首都买房，一般来说几年后都是稳赚不赔的。</p>
<p>你之所以现在穿越2008年的中国，知道做什么可以最快致富，就是因为你有了2021年的知识，你把“2021年的知识”带到“2008年的中国”，就产生了知识资本的积累。</p>
<p>你有了知本在去努力以后，致富就非常容易了，一点都不会感觉内卷。</p>
<p>所以我说，我的观点有点类似张炘炀父母，但是不完全一样。</p>
<p>因为大学对人的提升是有限的，如果你要不断的知识资本积累，最终还是要以社会实践为重的。</p>
<p>而积累以后的关键是什么？就是你得整理成为系统的家学传授给你的孩子，不然你这辈子的积累，就是废的，没有用的，因为你孩子下一代还是从零开始。</p>
<p>懂不懂？</p>
<p>一句话说得好，我不嫁豪门，我就是豪门。</p>
<p>很多家长在指望报个补习班就能提升自己孩子之前，能不能思考一下？你对这个社会有什么认知？</p>
<p>你是否可以通过自己的思考，得出一些有价值的意见给孩子参考？</p>
<p>犹太人之所以全世界致富快，不是因为犹太人聪明，而是因为他们的家学传承做的比较好，说句不好听的，就是老子是怎么忽悠客户的，方法全部传授给了儿子，儿子自然年纪轻轻也就很懂了。</p>
<p>为什么一定要建立家学？</p>
<p>因为只有建立了家学，才能给自己的孩子提供更多、更好的人生选择，选择多了，自然不会内卷。</p>
<p>自己家里通过几代人积累的家学，提供的人生上升空间渠道，就好像私立医院一样，费用贵，但是效果很好。建立这一套系统不容易，但是让人受益无穷。</p>
<p>通过内卷，通过补习死磕，考一个好的大学，就相当于是公立医院，费用低，但是往往要排队，效果可能也没有昂贵的私立医院那么快和好。</p>
<p>对一个青年人来说，实际上家长才是最重要的起跑线，很多家长一说培养孩子，就只知道补课，为什么？</p>
<p>不就是因为很多家长自己的父母，什么知识资本也没有留给自己吗？等于自己这辈子还是从零开始的异世界生活，要重新开始认知社会。</p>
<p>等你孩子长大以后，问你：<font color="red">“爹/妈，我未来咋办啊？”</font></p>
<p>你也不知道，因为你对社会经济、技术周期和全球政治经济局势，完全没有任何认知，所以你就只能照搬社会主流的趋势说：<font color="red">“那咱就多努力，我咬咬牙，给你多报几门课，咱多努力卷一下，争取搞的名牌大学就稳了…”</font></p>
<p>最后，等你孩子工作以后，你很焦急啊，为什么孩子不结婚，也不愿意恋爱啊。</p>
<p>结果你孩子来了句，结什么婚？让我像你当年一样勒紧裤腰带堆教育资源供子女吗？让下一代像我当年一样从小就开始996/007吗？</p>
<p>这样活着有什么意思？</p>
<p>为什么会觉得没意思？因为内卷到极致，人生就是没意思了。</p>
<p>内卷的本质——成功路径太少——根本原因就是对社会认知不够，不知道有哪些路可以走——根源：缺乏知识的原始积累。</p>
<p>如果普通人家里有知识积累的话，你父母根本不会对社会发展手足无措，只知道让你去一味的补习，而是会告诉你：</p>
<font color="red">“根据我强大的知识储备判断，未来的某一个点上，会有一波新的技术红利在这个领域爆发，建议准备入行这个领域。至于如何学习新领域的知识，如何进行跨学科学习？”</font>

<font color="red">“这个问题你爷爷当年已经经历过了，去咱家后院的排水管附近，你爷爷已经把“如何进行跨学科学习的笔记”用油纸裹好了，埋在了那里。”</font>

<p>这就是为什么国家最新要颁布“家庭教育促进法”。</p>
<p><img src="/archives/aa6a4c4a/2.png" alt=" "></p>
<p>你去看“家庭教育促进法”原文，你读完会发现，家庭教育促进法就是我说的意思。国家的意思就是说，你这代人就别偷懒了，我说的是思想、思考层面的偷懒，你这代还不建立属于自己的家学，积累自己家庭的社会认知模型，那如果你有下一代的话，大概率会因为你的偷懒，继续内卷。</p>
<p>一切的碾压，都是源于信息量的差距，你要想打开差距，社会公益教育的能力是有限的，关键是你自己要有这个意识，开始建立这个算法模型，然后通过你和后代的人生经验，不断的迭代。</p>
<p>所谓传承，就是这么回事。</p>
<p>在没有现代理科知识之前，石油并不是财富，而是一堆黑臭的恶心液体。</p>
<p>知识积累以后，石油就不是一堆黑臭的恶心液体了，而是财富。</p>
<p>知识多了，路就多了。</p>
<p>父母的社会认知知识多了，子女的选择就丰富了。</p>
<p>这一切的基础和破局之路，就是要恢复中华民族的家学传统。</p>
<p>所以才在大催生和双减背景下，会突然出台一个“家庭教育促进法”。</p>
<p><img src="/archives/aa6a4c4a/3.png" alt=" "></p>
<p>甚至要开始进行国家和社会资源的辅助倾斜，帮助大家建立家学。</p>
<p><img src="/archives/aa6a4c4a/4.png" alt=" "></p>
<p><img src="/archives/aa6a4c4a/5.png" alt=" "></p>
<p>做一个有心的父母，才是孩子最好的起跑线。</p>
<p>选择是大于努力的。</p>
<p>而能选一个有前途、不内卷的细分红利行业，就非常考验父母的认知功底了，你不努力，谁努力…</p>
<p>双减之后，又来了家庭教育促进法，现在的小学生真的是和以前不一样了。</p>
<p>“2021，攻守易势~”</p>
<p>鸡父母时代，正式来临~</p>
<p>[阅读原文]<a href="https://mp.weixin.qq.com/s/tzb2lAoqvrND0Xe7GUWNvA##">https://mp.weixin.qq.com/s/tzb2lAoqvrND0Xe7GUWNvA##</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>政治</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>不敢侵略他国，哪有资格叫资本主义</title>
    <url>/archives/7637a764/</url>
    <content><![CDATA[<p><img src="/archives/7637a764/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木</p>
<p>什么是资本主义，什么是资本家？</p>
<p>1972年的时候，有人问毛主席，如果中国的资本主义复辟，那无产阶级会吃二遍苦受二遍罪吗？</p>
<p>毛主席说:</p>
<blockquote>
<p>“你太高看他们了，他们懂什么是资本主义？最多倒退回半封建半殖民地社会。<br>资本主义是靠侵略和掠夺别的国家而积累资产的，他们敢侵略谁呀？不被侵略就阿弥陀佛喽。<br>他们只能是联合帝国主义国家，剥削和压迫本民族广大的人民百姓，或者贱卖自己国家的资源以满足自己那贪得无厌的私利。”</p>
</blockquote>
<p>很多人认为有钱就是资本主义，钱多的人就是资本家，这其实是非常错误的。</p>
<font color="red">资本家确实很有钱，但并不代表你有钱就能当资本家。</font>

<p>民国时期的买办，也很赚钱。</p>
<font color="red">衡量你到底是买办还是资本家的唯一标准，就是你敢不敢把刀口向外。</font>

<p>列强的资本家把触角伸到全世界，到处抢资源抢市场来发展自己，全球吸血来满足母国的需求。</p>
<p>你要是老老实实的和他合作，那他不吝啬于分你点碎肉，让你当一个很有钱的买办。</p>
<p>如果你不愿意被他收割，那资本家会动用一切手段来确保自己的经济收益，从策划政变到直接的军事入侵，就没有资本家不敢做的。</p>
<p>资本很冷血，但也很强大。</p>
<p>如果只是有点钱就能成为资本家，那实现共产主义是不是有点太容易了？</p>
<p>很多人总说中国的资本家怎么怎么样，但实际上中国够格当资本家的并不多。</p>
<font color="red">在我看来，敢跨出中国的大门，去外国的市场上攻城略地的人，才够格叫资本家。</font>

<font color="red">只盯着中国老百姓手里那三瓜两枣，利用资金优势和市场地位反复收割小微企业乃至于老百姓的，不配叫资本家，再有钱也最多只能称之为买办。</font>

<p>今天说这段历史，主要是因为看到了美团被处罚的通知，有感而发。</p>
<p>10月8日，中国市场监管总局宣布认定美团存在实施“二选一”的行为，触犯了中国反垄断法，因此对美团处以34.42亿元的罚款，并要求其全额退还从商家处收取的独家合作保证金12.89亿元。</p>
<p><img src="/archives/7637a764/2.png" alt=" "></p>
<p>2018到2020年，中国外卖领域的市场集中度指数分别为99.16、99.92、99.98，属于绝对的高度垄断，几家头部平台通吃一切。</p>
<p>在这种情况下，美团居然还在搞二选一，要求商家只要选择上美团就不能上饿了么，只要你敢上饿了么，美团立即就给你下架。</p>
<p>这种二选一会导致美团和饿了么之间迅速地决出一个最终优胜者，赢家会越来越强，滚雪球一样地干掉另外一方。</p>
<p>美团的市场份额大概在70%左右，体量超过第二名饿了么几乎一倍以上。</p>
<font color="red">饿了么反抗，也搞二选一，死的肯定是饿了么。</font>

<font color="red">饿了么不反抗，不搞二选一，死的还是饿了么。</font>

<p>当美团祭出二选一法宝的时候，饿了么的死亡就已经进入倒计时了。</p>
<p>因为美团这样的企业真的不够格叫资本家，也不完全算买办，勉强给个称呼叫资本吧。</p>
<p>中国这些资本，说胆大是真胆大，说蠢也是真的蠢。</p>
<p>美团占了70%的市场份额，居然还想着搞死饿了么，独霸全市场，以获取超高额利润。</p>
<p>这是要钱不要命啊。</p>
<p>老二死了，你是能垄断了，但没有老二的存在，你觉得你还能安稳的活着？</p>
<p>到时候老大老二得一起死。</p>
<p>反垄断法直接提前锤下来，不止是在保护老二，还是在保护老大。</p>
<p>长期以来，我国对这些互联网企业都是非常保护的。</p>
<p>中国的企业太弱小，太稚嫩，在欧美资本家的入侵下苦苦支撑，因此呵护这些企业是政府的主流态度。</p>
<p>但是这些企业在积累了一定的原始资本后，并没有选择踏出国门当资本家，而是缩在政府搭建的温柔窝里继续赚容易钱，舒服钱。</p>
<p>什么钱最容易赚？</p>
<p>垄断一个市场，形成一个规模化的唯一平台，这个钱最容易赚。</p>
<p>反垄断法在前几年也经常提及，但罚款经常都是几十万之类，不疼不痒。</p>
<p>真正要重罚企业，是从2020年开始的。</p>
<p>2020年疫情后，中国的这些互联网平台发展到了巅峰极致。</p>
<p>不知道他们怎么想的，在疫情后统一盯上了小区的菜贩子业务，一股脑的认定社区生鲜团购是下一个潜在的平台经济。</p>
<p>几乎是一夜之间，上百家所谓的社区团购平台涌现，展开了激烈的厮杀。</p>
<p><img src="/archives/7637a764/3.png" alt=" "></p>
<p>这么玩也没问题，你要是真提升了社会效率也行。</p>
<p>但这些资本一上手，就直接玩阴的。</p>
<p>怎么干掉竞争对手？</p>
<p>拼效率？拼创意？拼技术？拼研发？</p>
<p>都不需要，只要砸钱就可以了。</p>
<p><img src="/archives/7637a764/4.png" alt=" "></p>
<p>别人6.99元/斤的鸡蛋，我们只要1块钱。</p>
<p>划算吧，划算就赶紧来买啊。</p>
<p>20元一件的牛奶，0.99元一斤的西红柿，0.1元一袋的盐，0.09元一颗的白菜，资本们把居民基本生活物资的价格打到了不可思议的地步。</p>
<p>老百姓生活负担降低了，这不是好事么？</p>
<p>如果这些所谓的团购平台能永久性的维持这种价格，那何止是好事啊。</p>
<p>别说中国首富应该给你，我看共和国勋章都可以给。</p>
<p>这么低的价格你还能赚钱，那只能说明你是真的牛逼，是人类的希望之星。</p>
<p>但问题的关键是，这种价格是不可能持续的。</p>
<p>售价比进价还低，而且要低很多，这怎么可能长期持续。</p>
<p>类似的事情我们不是没见过，当初的滴滴能让你免费打车，后来的美团能让你免费吃外卖。</p>
<p>等到了最后，吃了多少，全部给我翻几倍吐出来。</p>
<font color="red">亏本卖东西的目的只有一个，干死所有竞争者，让自己形成垄断，然后疯狂提价，想怎么提价就怎么提价。</font>

<p>但零售生活物资的大头，并不是这些刚入场的社区团购平台，而是无数的小商贩。</p>
<p><img src="/archives/7637a764/5.png" alt=" "></p>
<p>这些小商贩又多又散，不仅解决了大量的就业问题，而且牢牢的压制了生活物资的价格。</p>
<p>在以小散户为主体的市场中，物资会在激烈博弈的厮杀中被压制到一个最低的价格。</p>
<p>再低，就有人不愿意起早贪黑卖菜了，以这种临界状态下的市场定价为最终价格。</p>
<p>很显然，这一定是最低价格。</p>
<p>而资本做的，无非就是搭建一个平台，互通一下信息而已，这早就不是什么高科技了，也不是什么新创意，随便拉几个互联网的小经理都会搞，模式早已高度成熟。</p>
<p>资本既不能凌晨三点去蔬菜批发市场进货，也不能改良土壤增大蔬菜产量。</p>
<p>除了在目前的利润结构里凭空多了一个中间商，几乎一无是处，因为生鲜蔬菜本来就是散对散的交易，很难标准化流程化。</p>
<p>早上3点新鲜无比的菜叶子，到了下午5点就是废品，除了当面交易，你怎么去评判这个菜叶子的质量？</p>
<p>这玩意可不是库存半个月质量都丝毫不变的工业品。</p>
<p>所以平台的价值和作用几乎完全体现不出来，没有丝毫的竞争优势。</p>
<p>但这并不代表平台不能赢，也不代表平台不能赚钱。</p>
<p>只要不断的亏钱卖东西，所有的小商贩都会被干死，而且死亡的速度会比干死那些同行平台更轻松。</p>
<p>你不烧钱烧个年把，其他的平台公司是不会服软的，但街头小商贩只要一两个月就扛不住了，因为他们还要吃饭，还要付房租，还要给孩子交学费。 </p>
<p><img src="/archives/7637a764/6.png" alt=" "></p>
<p>然后，事情就开始发生质变了。</p>
<p>原价6.99元的鸡蛋，你今天可以1元买到，等所有的小商贩都被干死后，你16.99元都买不到。</p>
<p>外卖越吃越贵，餐厅越赚越少，这种事又不是没发生过。</p>
<p>而居民基本生活物资的情况会更加恶劣，商品的定价可以直接用大数据测算，这片地区的人我最高能收多少，那我就定价多少。</p>
<font color="red">你可以不买外卖，但不能不买菜。</font>

<p>当只剩一家供应商的时候，他提价一倍，你得忍着，提价两倍，你也得忍着。</p>
<p>方圆五十公里所有的菜都是我的，有本事你就别买。</p>
<p>市场经济是好事，但中国这些资本搞的事情，可不是市场经济。</p>
<p>因为市场经济模型有个前提条件，那就是<font color="red">假设企业都是追求利润的，不会做任何没有利润的事情，当售价低于成本价的时候，企业就会退出市场。</font></p>
<font color="red">同时，市场经济如果想要正常运转，需要大量的主体参与其中并进行激烈博弈，且主体之间的地位都是平等的。</font>

<p>最近几年的资本之所以纵横捭阖，大杀四方，就是因为他们破坏了这个规则，破坏了市场经济，导致真正有效率，有技术的企业无法崛起，而那些敢于烧钱，敢于垄断市场的资本吸走了所有的血液。</p>
<p>低价倾销这个词汇，早在100年前就被资本主义国家发明了，人家那边的资本家早就玩烂了这一套。</p>
<p>反垄断法，反倾销条例，那也是资本主义国家发明的，严禁资本家在本国使用。</p>
<p>你在国外怎么搞都行，但不准在本国搞。</p>
<font color="red">资本家应该干什么，资本需要做什么事才能成为称职的资本家，资本主义国家心里门清。</font>

<p>美国的马斯克，那才够格叫资本家。</p>
<p><img src="/archives/7637a764/7.png" alt=" "></p>
<p>中国那些只知道盯着小摊贩手里几捆白菜的所谓资本，要打赢小摊贩还只敢用阴招，低价倾销玩垄断才有可能赚到钱，实在是没有资格称之为资本家。</p>
<p>罚美团34个亿，是教这些资本一点规矩，让他们知道什么事可以干，什么事不可以干。</p>
<font color="red">社会主义已经发展到了一定的程度，也已经慢慢富裕到了一定的程度，防御阶段已经过去了。</font>

<font color="red">还不敢走出国门，不敢去外界攻城略地的资本，我们已经慢慢的不需要了。</font>

<p><a href="https://mp.weixin.qq.com/s/JlqGoqQPrX9XtUsNhQyT9A">阅读原文</a>  文章已于2021/10/10修改</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>中国的经济政策，有着不变的底层确定性</title>
    <url>/archives/42f5141b/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木</p>
<p><img src="/archives/42f5141b/1.png" alt=" "></p>
<p>这几个月，中国监管打出了一系列的组合拳。</p>
<p>滴滴、教育培训行业、互联网巨头监管之后，很多外资，甚至很多中国人自己都对政策导向产生了迷茫。</p>
<p><font color="red">未来的新政策会是怎样的呢？下一个被监管的行业会是谁呢？<font></font></font></p>
<p><font color="red">我该怎样去预测政策，规避风险。<font></font></font></p>
<p>近日，桥水基金的创始人达利欧说了一句话，我认为很对。</p>
<p>他说，<font color="red">中国的政策，有着不变的底层确定性。<font></font></font></p>
<p><font color="red">如果你认为市场充满不确定性，那是因为你还不够了解中国。<font></font></font></p>
<p>这个原理我以前也讲过，那就是中国所有的执政目标，<font color="red">都是为了人民更好，为了中国更好，这个政策原则是永远不变的。<font></font></font></p>
<p>为什么要治理滴滴？</p>
<p>在滴滴去美国上市前，政府曾经告诉过滴滴，继续上市可能不是最好的选择，希望滴滴能妥善处理好数据隐私问题。</p>
<p>但是，滴滴为了满足投资人的变现需求，完全无视这番告诫，在完全没有处理好中国人数据隐私问题的前提下，偷偷强行上市，完全不和政府打招呼。</p>
<p>这要是还不收拾，以后还会有任何资本把中国消费者的安全当回事？</p>
<p>滴滴的行为越过了绝对红线，收拾滴滴严格意义上来说甚至不算政策，而是理所应当，天经地义的事情。</p>
<p>为什么要治理教育培训行业？</p>
<p>搞教育是好事，我们鼓励任何人搞教育，资本愿意来搞教育我们更是举手欢迎。</p>
<p>十年树木，百年树人，所有的强国都是建立在对国民广泛教育这个基础之上的。</p>
<p>但中国的教育培训机构，已经彻底变味了，成为了一个利用焦虑收割百姓财富的工具，对提升人民素质，提升中国国力没有任何助力，副作用远远大于正面作用。</p>
<p>一节课三四百块，不到一个小时就消耗没了。</p>
<p>家长自己努力工作，一天才赚多少钱？</p>
<p>才小学上到高三，仅仅补课费就得交上百万，这孩子毕业了又能赚多少钱？ </p>
<p><img src="/archives/42f5141b/2.png" alt=" "></p>
<p>公立小学和初中，一学期的花费才几百块到一千多，而去补习班，一天就要花一千多。这些培训班教了什么吗？能让中国的国力突飞猛进么？</p>
<p>没有教什么，他们存在的唯一价值就是把初三的知识灌给初二的孩子，高一的知识灌给初三的孩子。</p>
<p>所有的教培行业全部消失，中国的科学家数量、科研实力不会有丝毫改变，国力也不会有丝毫衰减。</p>
<p>而教培市场一年收取家长的学费高达1.43万亿，比中国一年1.27万亿的军费还要高。</p>
<p>这个庞大的行业到底有什么存在价值，把这些钱发给军人，多买点航母导弹，不是一样可以拉动经济么？</p>
<p>这不是三座大山是什么。</p>
<p>收拾这样的行业，当然也是天经地义，明显有利于中国人的根本利益。</p>
<p>至于阿里，这个就更过分了。</p>
<p>中国政府曾经是非常呵护阿里的。</p>
<p>2015年的时候，工商总局发布了白皮书，说淘宝假货横行，需要整改。</p>
<p>也没说要怎么罚阿里，只是陈述了这么个事实，说这不行，得改。</p>
<p>说的没毛病啊，因为说的就是事实啊，工商局不就是干这个的么，要是对淘宝那么多假货都视而不见那岂不是渎职？</p>
<p>但是阿里立刻炸毛了，直接以店小二的名义贴了大字报，大意就是我为了减少假货付出了那么多努力你怎么就看不见，非盯着目前市面上的那些假货，你是不是存心不给商家（淘宝）活路等等，直接说工商局吹黑哨。</p>
<p><img src="/archives/42f5141b/3.png" alt=" "></p>
<p>在以前，淘宝的存在是对中国经济有很大好处的，确实降低了交易成本，确实增强了经济活力，确实对中国人民有好处。</p>
<p>因此，最后工商总部选择了低调处理，强调白皮书没有法律效益，这事就这么算了，偃旗息鼓。</p>
<p>但这么受到呵护的淘宝，慢慢的变了，不再代表中小商户的利益了，疯狂在商户里搞内卷，利用流量分配的权利，把中小商户的利润几乎是吃干抹净。</p>
<p>至于强迫二选一，蚂蚁金服放出去的贷款只有2%本金，杠杆率高达50倍这种事更是不一而足。</p>
<p>因为之前对工商总局的司长贴大字报取得了完胜，后面马云才敢在外滩峰会上对着金融监管政策大放厥词。</p>
<p>别说不怕中小商户了，阿里已经连监管都不怎么怕了。</p>
<p>总而言之，利润最大化的阿里，已经慢慢越过了那个临界点，对社会带来的好处开始慢慢小于其负面作用。</p>
<p>因此，遭到监管部门的重拳出击，自然也非常正常。</p>
<p><img src="/archives/42f5141b/4.png" alt=" "></p>
<p>以上种种，如果从这些企业的实际所作所为来说，这都不算是政策，而是正常的监管行为。</p>
<p><font color="red">成立监管部门不就是干这个的么，要是连这个都不管那还要监管部门干嘛，解散算了。<font></font></font></p>
<p>至于娱乐圈，用词就更重了，直接说是挖疮割痈。。。</p>
<p><img src="/archives/42f5141b/5.png" alt=" "></p>
<p>但你看看那帮明星，拿着那么高的收入，干的那叫什么事啊，自己把事情闹那么大，搞的一地鸡毛，按早已公开颁布不知道多少年的法律收拾一下，难道不正常么。</p>
<p><img src="/archives/42f5141b/6.png" alt=" "></p>
<p>所以，以上种种，都不算政策，只是正常监管行为，也都是可以预期的事情。</p>
<p><font color="red">这么做是理所当然的，不这么做反而是不正常的。<font></font></font></p>
<p>唯一的与众不同之处，是这样的监管行为出现的太密集了，几个月干完了几年的事。</p>
<p>一样的监管行为，分在几年里慢慢释放，和几个月内短期释放，带来的效果也是不一样的。</p>
<p>这样的行为有什么深意么？</p>
<p>其实也有，这样做的目的就是为了震慑资本，让资本主动改正，避免监管层被迫释放更多的的监管行为。</p>
<p>这其实也是符合中国政策不变的底层确定性的。</p>
<p>因为在2021年，中国在执行层的政策导向，<font color="red">从效率优先，转变为了以共同富裕为导向。<font></font></font></p>
<p><img src="/archives/42f5141b/7.png" alt=" "></p>
<p><font color="red">允许一部分人先富，然后让先富带动后富，从而实现共同富裕。<font></font></font></p>
<p>这句话，是30多年前邓爷爷说的。</p>
<p>现在的中国确实一部分人先富起来了，但他们好像不愿意带着后面的人富。</p>
<p>没关系，我们当初制定这个政策的时候，也没指望他们主动带着后面的人富，共同富裕肯定是以政府为主导力量完成的行为，先富的人是不是主动这并不重要。</p>
<p>当然，如果他们主动，那更好，毕竟体面很多。</p>
<p>所以，先震慑一下资本，会让后面的事情顺利很多。</p>
<p>提出共同富裕概念的背景，是中国的贫富分化差距已经达到了一个临界点。</p>
<p>大企业，尤其是互联网巨头平台企业，对社会整体收益的侵占力之强，让人目瞪口呆。</p>
<p>举个例子，在过去的十几年里，程序员的工资远远大于其他专业的工资，一毕业就有巨大差距，多年之后差距更大。</p>
<p>同样的成绩，同样的大学，选错专业的代价，不是一般的大。</p>
<p>而在程序员这个行业里，大厂程序员的工资和小厂程序员的工资也是天差地别，堪称是两个世界。</p>
<p>并不是单纯的绝对值高，而是增速也很高。</p>
<p>整个社会的工资增长非常缓慢，但大厂程序员却可以年年加薪，年年分股，总收入每年都蹦一个台阶，增速远远超过社会平均值。</p>
<p>大厂程序员的收入高，增速快，那是因为大厂的收益确实好，确实在连年增长。</p>
<p>整体程序员行业的收入高，增速快，那是因为整个互联网行业的收益确实好，确实在连年增长。</p>
<p>在以前，互联网创造的效益蛋糕很大的时候，哪怕互联网自己切走了大头，人民也是满意的。</p>
<p>但当所有的中国人都上网之后，互联网创造的效益蛋糕没那么多的时候，还要保持自己那么高的利润收益增长，这就必然要利用手中的规模优势，反过来侵占普通人民群众的利益。。</p>
<p>不仅要把蛋糕吃干抹净，还要反过来抢别人的。</p>
<p>尤其是互联网中的大厂，已经事实上形成了无脑收租躺赢模式，成为了贫富差距过大的典型代表。</p>
<p>其他的还有房价，这也肯定要被收拾，房企遭到的监管力度远远大于互联网平台，因为房产带来的贫富差距更为离谱。</p>
<p>打压贫富差距，是社会主义国家的必然选择，我们肯定会这么做。</p>
<p><font color="red">这是100%会出现的底层确定性，因为就算是资本主义国家也会这么做。<font></font></font></p>
<p>1896年，美国刚刚成为世界制造业第一大国，但军事实力和国际地位还远远不如英法德列强时，本国的贫富差距就已经爆棚了。</p>
<p>这一年，美国最富有的1%人口拥有全国50%以上的财富，而44%的底层人口只拥有全国财富的7.2%。</p>
<p>按照资本主义国家强者恒强，大鱼吃小鱼的原则，有钱的人一定会越来越有钱，财富会越来越集中在最有钱的那批人手里。</p>
<p>要不了多少年，最富有的那1%的人所拥有的全国财富，就应该是60%，70%，80%，乃至于99%，这是资本主义国家理论上的终极形态。</p>
<p>但美国却没有进化到这个形态。</p>
<p><font color="red">因为在1%的人口拥有50%的财富之后，美国的社会矛盾就激增到了一个完全控制不住的局面。<font></font></font></p>
<p>到处是失业，到处是罢工，到处是动荡，社会矛盾异常尖锐，就连资本家之间的矛盾也很尖锐。</p>
<p>甚至连加菲尔德和威廉·麦金利这两任美国总统，也相继被刺杀。</p>
<p>可以说，巨大的社会矛盾撕裂了美国，虽然国力蒸蒸日上，但整个国家却在走向崩溃。</p>
<p>因此美国开始改革、反腐、反垄断、向富豪征税，推动共同富裕。</p>
<p>美国是怎么平均财富的，是怎么遏制财富继续向富人手中集中的，我不清楚，也搜不到这一百多年的美国政策资料。</p>
<p>但最终结果却是美国打赢了一战，打赢了二战，弄垮了苏联，成为了地球上最强大的国家。</p>
<p>而在100多年后的今天，美国最富裕的那1%，居然只拥有全社会38.6%的财富，贫富差距远远小于100年前，强者恒强的资本定律在这100年里失效了，变成了强者缓慢弱。</p>
<p>我们是社会主义国家，我们才是共产党，难道在修复贫富差距，缓和社会矛盾方面，我们会比资本主义国家差么？</p>
<p>所以，当社会贫富差距达到一定程度的时候，在引发社会矛盾爆发之前，中国就必然出手。</p>
<p>当然，中国式的均贫富，也绝不像有些幻想不劳而获的人想象的那样，打土豪分田地，大家重新把社会财富均分一下，这种事也是绝对不可能出现的。</p>
<p>共产，共的是国家命脉行业的国有资产，而不是共所有人的私产。</p>
<p><font color="red">共产主义不是共同贫穷，而是共同富裕。<font></font></font></p>
<p>在这方面，我们是吃过亏的，绝不会犯同样的错误。</p>
<p>40年前，蛇口工业区发生过4分钱奖金的故事。</p>
<p>1979年8月，蛇口工业区要建造一个码头，工期紧张，我们要特区速度。</p>
<p>那时候我们是完全的均贫富，所有人收入一个样，所有工人无论优劣，每天发的工资都一样多。</p>
<p>于是所有的工人看起来都在努力干活，但效率就是十分低下。</p>
<p>肚子疼上厕所你得让我去吧，车抛锚了我修一下不离谱吧，家里孩子生病了我迟到一会不过分吧。</p>
<p>管理层拼了老命的去督促，一辆车一天也就是只能拉20多车土石，怎么说都提升不了效率，码头工程100%要延期。</p>
<p>1979年10月，施工单位破天荒的宣布了一个政策，每个工人每天拉的土石数量，只要超过了40车，那每多一车，给4分钱奖金。</p>
<p>这一下子效率就爆炸了，有人甚至一天拉了130多车土石出去，管理层让他回家休息他都不愿意。</p>
<p>家里穷，想多赚点钱给孩子改善点生活，买点新衣服，希望您高抬贵手，让我再多运两车。</p>
<p>而同一个工人，几天之前，每天只能拉20车，还喊着自己好累好累，流血流汗。</p>
<p>工人赚的钱比以前多了3倍，施工进度也比以前快了三倍，但预算不变，最后居然还给国家节省了130万资金，这在当时可是一笔巨款。</p>
<p>什么叫共同富裕，这就叫共同富裕。</p>
<p>1980年4月，蛇口码头进行二期施工，再度推行这个4分钱奖励政策，被很多之前就不满意的人盯上了，直接举报，强行叫停。</p>
<p>我每天也很辛苦，这工人的工资凭什么比我多三倍啊，这不公平！</p>
<p>改为固定工资制度后，蛇口码头的施工进度立刻就慢了下来，工人们像被点了魔法一样，累死累活每天也只能拉20多车。</p>
<p>工程延期，国家多花钱，工人也受穷，唯一的好处就是没人红眼病了。</p>
<p>眼瞅着二期工程就要逾期了，一份内参被送到了中南海，中央定调，奖金制度恢复，允许工人的工资上升。</p>
<p>很快，蛇口码头的工人收入就暴增了3倍，码头的施工进度也快了3倍。</p>
<p>什么都没改变，就改了一个政策而已。</p>
<p>所以80年代那会，都说中央送政策就是这个原因，一份政策带来的生产力跃升，比什么技术和资金都要大。</p>
<p>二期工程竣工后，工地从香港运来了一批电视机和录像机，给每个工人发了一份，当特殊奖金。</p>
<p>在那个年代，这东西可是非常稀罕的珍贵物资，不是一般家庭可以拥有的，所有的建设工人都乐开了花。</p>
<p>蛇口码头工人先懒惰，后勤奋，再懒惰，再勤奋的历史过程，非常好的证明了多劳多得制度的必要性。</p>
<p>这样的人先富起来，天经地义，理所当然。</p>
<p>我们既然已经踩过这样的坑，就永远不会踩第二次，无视贡献彻底均贫富这种事永远不可能再在中国出现。</p>
<p><font color="red">但这样的富裕，是多劳多得的富裕，并非是不劳多得的富裕。<font></font></font></p>
<p>多劳动，贡献大的人，允许富裕，允许发财，甚至适当传承后代我们都是允许的。</p>
<p>但有些人不劳动，或贡献值很低，但利用特殊地位凭空发财的人，我们要坚决抵制，否则当初还革命干嘛呢。</p>
<p>那些躺平成收租模式的互联网巨头，不被打压才叫天理不容。</p>
<p>公平和效率之间的平衡度，很难把握，但也不难把握。</p>
<p>因为连美国这种资本主义国家都能处理好这种事情，为了公平宁可放弃一部分效率，中国自然也能做到，而且会比美国简单无数倍的去完成，因为我们的体制从出生开始就是自带公平基因的。</p>
<p>中国完成公平这一步不奇怪，美国完成了那才叫奇怪，但美国就是完成了。</p>
<p>当然，美国的经验我们不能照搬，否则会水土不服。</p>
<p>如何实现共同富裕，我们现在还没有具体的办法出来。</p>
<p>改革嘛，就是要摸着石头过河，都是第一遭碰到这种事，谁也不知道应该怎么做。</p>
<p>虽然不知道具体怎么做最适合中国，但我们知道这个大方向是一定正确的。</p>
<p>以人民为中心，促进共同富裕，正确处理效率和公平的关系，构建三次分配的基础性制度，这都是中央会议里的原话，直接指明了大方向。</p>
<p>我们从增速优先，改为了兼顾公平，这其实是所有富裕国家发展的必经之路。</p>
<p>无论你姓资姓社，都要兼顾公平，否则你国家稳定不了，有钱人如果想长久保护自己的财富，需要，也必须做出一定的让步。</p>
<p><font color="red">2021，将是中国共同富裕的元年。<font></font></font></p>
<p><a href="https://mp.weixin.qq.com/s/sZEKVQY5K1ZdkbsPlcvp7w##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>使用prometheus监控交换机设备</title>
    <url>/archives/31bd6bb1/</url>
    <content><![CDATA[<p><img src="/archives/31bd6bb1/1.png" alt=" "></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>交换机：huawei S5735<br>prometheus: 使用docker镜像，监听 9090 端口<br>granfana: 使用docker镜像，监听 3000 端口<br>snmp-exporter: <a href="https://github.com/prometheus/snmp_exporter">https://github.com/prometheus/snmp_exporter</a>下载最新版，监听 9116 端口<br>alertmanager: <a href="https://github.com/prometheus/alertmanager">https://github.com/prometheus/alertmanager</a>下载最新版，监听 9093, 9094 端口<br>下载华为交换机的mib信息：华为官方网站的软件下载可以找到</p>
<h2 id="配置交换机"><a href="#配置交换机" class="headerlink" title="配置交换机"></a>配置交换机</h2><p>详细配置说明可参考官网：<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000178160/40dfdfef">https://support.huawei.com/enterprise/zh/doc/EDOC1000178160/40dfdfef</a><br>进入system-view模式<br><code>system-view</code><br>开启snmp-agent：<br><code>snmp-agent</code><br>设置团体名称（有复杂性要求）：<br><code>snmp-agent community read cipher Tbkswitch</code><br>开启snmp所有版本：<br><code>snmp-agent sys-info version all</code><br>设置接受snmp trap信息的服务器：<br><code>snmp-agent target-host trap address udp-domain 192.168.1.200 params securityname cipher Tbkswitch</code><br>开启snmp trap：<br><code>snmp-agent trap enable</code><br>打开snmp接口访问：<br><code>snmp-agent protocol source-status all-interface</code></p>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><h3 id="安装环境和软件"><a href="#安装环境和软件" class="headerlink" title="安装环境和软件"></a>安装环境和软件</h3><p>安装依赖：<br><code>yum install gcc make net-snmp net-snmp-utils net-snmp-libs net-snmp-devel</code><br>测试能否获取交换机snmp信息：<br><code>snmpwalk -v 2c -c Tbkswitch 192.168.101.1</code><br>安装go语言环境：<br><code>yum install go</code><br>修改go环境变量国内代理地址：<br><code>go env -w GO111MODULE=on</code><br><code>go env -w GOPROXY=https://goproxy.cn,direct</code><br>获取snmp-exporter源码包，包括generator源码包。<br><code>go get github.com/prometheus/snmp_exporter/generator</code><br>默认go安装到当前用户目录下，如当前用户为root，则下载的的源码包则会放到<code>/root/go/pkg/mod/github.com/prometheus/snmp_exporter@v0.20.0</code>下<br>进入下载的generator目录<br><code>cd /root/go/pkg/mod/github.com/prometheus/snmp_exporter@v0.20.0/generator</code><br>通过rzsz工具拷贝mib文件到当前目录，解压得到MIBS目录，把目录重命名为mibs<br>编译generator：<br><code>go build</code><br>设置环境变量：<br><code>export MIBDIRS=mib</code><br>备份原generator.yml文件：<br><code>mv generator.yml generator.yml.bak</code><br>重新建立一个新的generator.yml：<br>配置模板参考/root/go/src/github.com/prometheus/snmp_exporter/generator目录下的README.md文档</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">modules:</span></span><br><span class="line">  <span class="attr">huawei_mib:</span></span><br><span class="line">    <span class="attr">walk:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sysUpTime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">interfaces</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ifXTable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sysDescr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sysName</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.31</span><span class="number">.1</span><span class="number">.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">community:</span> <span class="string">Tbkswitch</span></span><br><span class="line">    <span class="attr">lookups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_indexes:</span> [<span class="string">ifIndex</span>]</span><br><span class="line">        <span class="attr">lookup:</span> <span class="string">ifAlias</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_indexes:</span> [<span class="string">ifIndex</span>]</span><br><span class="line">        <span class="attr">lookup:</span> <span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.2</span><span class="number">.2</span><span class="number">.1</span><span class="number">.2</span> <span class="comment"># ifDescr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_indexes:</span> [<span class="string">ifIndex</span>]</span><br><span class="line">        <span class="attr">lookup:</span> <span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.31</span><span class="number">.1</span><span class="number">.1</span><span class="number">.1</span><span class="number">.1</span> <span class="comment"># ifName</span></span><br><span class="line">    <span class="attr">overrides:</span></span><br><span class="line">      <span class="attr">ifAlias:</span></span><br><span class="line">        <span class="attr">ignore:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">ifDescr:</span></span><br><span class="line">        <span class="attr">ignore:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">ifName:</span></span><br><span class="line">        <span class="attr">ignore:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">ifType:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">EnumAsInfo</span></span><br></pre></td></tr></table></figure>
<p>使用./generator生成snmp.yml:<br><code>./generator generate</code><br>进入snmp_exporter目录并替换snmp.yml文件（本例放到/app/snmp_exporter下）<br><code>cd /app/snmp_exporter</code><br><code>mv snmp.yml snmp.yml.bak</code><br><code>cp /root/go/src/github.com/prometheus/snmp_exporter/generator/snmp.yml ./</code><br>添加snmp_exporter到服务:<br><code>vim /etc/systemd/system/snmp_exporter.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=snmp_exporter</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/app/snmp_exporter/snmp_exporter --config.file=/app/snmp_exporter/snmp.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动snmp_exporter:<br><code>systemctl start snmp_exporter</code><br>查看状态和端口：<br><code>systemctl status snmp_exporter</code><br><code>ss -tunlp | grep snmp_exporter</code></p>
<blockquote>
<p>tcp    LISTEN     0      20480  [::]:9116               [::]:*                   users:((“snmp_exporter”,pid=214993,fd=3))</p>
</blockquote>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>访问<a href="http://192.168.1.200:9116">http://192.168.1.200:9116</a> 打开snmp exporter的测试页面：</p>
<p><img src="/archives/31bd6bb1/2.png" alt=" "></p>
<p>显示下图就正常<br><img src="/archives/31bd6bb1/3.png" alt=" "></p>
<p>在Prometheus配置文件中添加数据节点：（本例使用docker）<br><code>vim /srv/docker_data/prometheus/conf/prometheus.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;TBK-S5375-CK4F&#x27;</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.101.1&#x27;</span>]</span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/snmp</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">module:</span> [<span class="string">huawei_mib</span>]</span><br><span class="line">  <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__address__</span>]</span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> [<span class="string">__param_target</span>]</span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span><span class="string">:9116</span></span><br></pre></td></tr></table></figure>
<p>重启prometheus读取新配置：<br><code>docker restart 2fc6f0e49b7c</code><br>访问<a href="http://192.168.1.200:9090/targets">http://192.168.1.200:9090/targets</a><br>可以看到刚刚添加的job_name，绿色up表示正常</p>
<p><img src="/archives/31bd6bb1/4.png" alt=" "></p>
<p>ganfana添加dashboard：<br>登录ganfana:<a href="http://192.168.1.200:3000">http://192.168.1.200:3000</a><br>通过搜索import官网的dashboard，如这里添加11169：</p>
<p><img src="/archives/31bd6bb1/5.png" alt=" "></p>
<p>到此监控已配置完毕</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>Citrix XenApp使用</title>
    <url>/archives/26f5a537/</url>
    <content><![CDATA[<p><img src="/archives/26f5a537/1.png" alt=" "></p>
<p>最近工作遇到一个问题，有个业务软件已经停止更新了，只能在WIN7上运行，WIN10上运行有些模块会出错，无奈新电脑已经不支持WIN7了，只能想想办法。用虚拟机方式用户不太接受，太麻烦，最后选择了Citrix的XenApp。<br>去官网逛逛发现已经出道XenApp 7.21版本了，但只找到7.15版本及以下的文档，网上找到7.6版的安装包，发现7.6版本是可以运行在server2008上的，那就用这个吧。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h3><p>官网建议若所有核心组件都位于一台服务器上，仅供评估使用，不用于生产部署则需要5G内存，若所有核心组件位于一个服务器上，供测试部署或小型的生产环境则需要12G内存</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Delivery-Controller部署"><a href="#Delivery-Controller部署" class="headerlink" title="Delivery Controller部署"></a>Delivery Controller部署</h3><p>我们将把DDC、StoreFront、SQL、Studio及Director部署在同一服务器上。</p>
<p>安装Delivery Controller</p>
<p><img src="/archives/26f5a537/2.png" alt=" "></p>
<p><img src="/archives/26f5a537/3.png" alt=" "></p>
<p><img src="/archives/26f5a537/4.png" alt=" "></p>
<p>用它自带的数据库了</p>
<p><img src="/archives/26f5a537/5.png" alt=" "></p>
<p><img src="/archives/26f5a537/6.png" alt=" "></p>
<p>确认无误开始安装</p>
<p><img src="/archives/26f5a537/7.png" alt=" "></p>
<p><img src="/archives/26f5a537/8.png" alt=" "></p>
<p>安装完成后的界面</p>
<p><img src="/archives/26f5a537/9.png" alt=" "></p>
<h3 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h3><p><img src="/archives/26f5a537/10.png" alt=" "></p>
<p><img src="/archives/26f5a537/11.png" alt=" "></p>
<p>确定</p>
<p><img src="/archives/26f5a537/12.png" alt=" "></p>
<p><img src="/archives/26f5a537/13.png" alt=" "></p>
<p><img src="/archives/26f5a537/14.png" alt=" "></p>
<p><img src="/archives/26f5a537/15.png" alt=" "></p>
<p><img src="/archives/26f5a537/16.png" alt=" "></p>
<p><img src="/archives/26f5a537/17.png" alt=" "></p>
<p><img src="/archives/26f5a537/18.png" alt=" "></p>
<h3 id="安装Virtual-Delivery-Agent-For-Windows-Server-OS"><a href="#安装Virtual-Delivery-Agent-For-Windows-Server-OS" class="headerlink" title="安装Virtual Delivery Agent For Windows Server OS"></a>安装Virtual Delivery Agent For Windows Server OS</h3><p><img src="/archives/26f5a537/19.png" alt=" "></p>
<p><img src="/archives/26f5a537/20.png" alt=" "></p>
<p>这步需要注意不要创建主映像，不然添加上去的电脑全部都是未注册的</p>
<p><img src="/archives/26f5a537/21.png" alt=" "></p>
<p><img src="/archives/26f5a537/22.png" alt=" "></p>
<p>测试通过后添加</p>
<p><img src="/archives/26f5a537/23.png" alt=" "></p>
<p><img src="/archives/26f5a537/24.png" alt=" "></p>
<p><img src="/archives/26f5a537/25.png" alt=" "></p>
<p>后面全部默认下一步直到完成就行</p>
<h3 id="XenApp应用程序交付"><a href="#XenApp应用程序交付" class="headerlink" title="XenApp应用程序交付"></a>XenApp应用程序交付</h3><p>略</p>
<p>创建完计算机目录和交付组确保对应的计算机状态为已注册，然后重启计算机再次确保为已注册状态即可进行登录测试。<br>需要注意安装完可以试用30天，过期后客户端连接的时候会没反应，到服务器查看应用日志可以看到原因是license过期了，网上下载永久的license可以使用，不过需要单独部署license服务器，不能与controller同一台机，因为license需要固定主机名。重新配置后就可以正常使用。</p>
<p>参考文档<a href="https://www.azurew.com/citrix/652.html">https://www.azurew.com/citrix/652.html</a></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>你越以精英为核心，你们国家诞生的精英就越少</title>
    <url>/archives/42ad09e8/</url>
    <content><![CDATA[<p><img src="/archives/42ad09e8/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木 7月15日</p>
<p>臭名昭著的精英论又开始沉渣泛起了。</p>
<p>有一股论调说，<font color="red">社会发展是靠精英推动的，大部分财富都是由精英创造的，这个世界不需要那么多人，大部分人都是无用的。</font></p>
<p>个别人这么说也就算了，<font color="red">令我震惊的是，这种言论在相当多具备一定财富和地位的人群里非常有市场，就算是部分中产也认可这一观点。</font></p>
<p>类似的言论包括但不限于：</p>
<blockquote>
<p>不要抱怨某些人群的工资为什么那么低，而是要问问他们为什么不能做高等工作。<br>干多少活，拿多少钱，天经地义<br>可怜之人，必有可恨之处。<br>美团骑手挣扎在生存线上，那是他们活该。</p>
</blockquote>
<p>总之，类似的言论充满了对穷人的嘲讽和鄙视，和精英论的思想本质是完全一致的，都认为穷人是可有可无的，给他们活干，让他们有口饭吃是一种恩赐。</p>
<p>因为中国的特色社会主义制度，敢公开这么说的人，不多，但内心深处认可，只是嘴上不说的人，倒还真不少。</p>
<p>在各种小富阶层组成微信群里，类似的言论和支持者数量之多，让我目瞪口呆。</p>
<p>知乎还有个大热的帖子，叫<font color="red">“穷人需要为自身的贫困负多大责任”</font>，里面有部分言论和思想，让人震惊。</p>
<p><img src="/archives/42ad09e8/2.png" alt=" "></p>
<font color="red">先说一个和精英论截然相反的论点，人类社会是由人民群众推动的，而不是精英。</font>

<p>精英强还是人民群众强，这不用辩，打一场灭国之战就知道了。</p>
<p>这个世界是很残酷的，你这个国家花费大量的财富去照顾普通人，而普通人真的是无用之人，白白浪费了大量财富。而那个国家把财富全部集中在精英手里，快速推动国家的进步。</p>
<p>很快，你的国家就被灭了。</p>
<font color="red">制度的优劣不是辩出来的，从古至今都是打出来的。</font>

<p>真正有资格谈论精英论的，既不是社会主义国家，也不是资本主义国家，而是封建主义国家和奴隶制国家。</p>
<p>这些古代国家，才是真正推崇精英的国家，精英执掌一切，视穷人如猪羊。</p>
<p>魏晋时期，石崇令美人给客人劝酒，只要客人不喝，美人就会被立刻拉走斩首。</p>
<p>战国时期，荆轲夸赞弹琴的美女手好看，燕太子丹就立刻把这双手砍断了送给荆轲。</p>
<p>更久远的奴隶时代，连祭祀祖先都要活生生的砍死一批穷人，和猪牛羊摆在一起当祭品。</p>
<font color="red">要说贯彻穷人无用论，这些时代的精英那可比现代社会的精英有资格多了，他们不仅这么说，也是这么做的，是真真正正的把穷人视作无用的废物。</font>

<p>然后，这些国家和朝代，都被灭了。</p>
<p>到了现代，资本主义国家推崇精英么？</p>
<p>确实比中国这种社会主义国家多推崇了那么一点点，但对于穷人的尊重和保护，比古代国家要强的没谱了。</p>
<p>哪怕是美国首富和国家总统，都不敢公开对穷人有任何歧视，美国精英的财富，实际上也有相当部分是让渡给穷人的。</p>
<font color="red">如果人类文明和历史真的是由精英创造和推动的，那么奴隶制国家应该是干脆利落的消灭资本主义国家和社会主义国家，毕竟奴隶制国家是最尊重精英的，精英在奴隶制国家的权力是最大的。</font>

<font color="red">但实际结果，却是反过来，奴隶制国家被干脆利落的消灭了。</font>

<p>没有任何人愿意让渡自己手中的权力和财富，人民群众手里的权力，完完全全是自己打出来的。</p>
<font color="red">你真的有那么强，才配得到尊重，不然就只能当奴隶。</font>

<p>但我们见到的一个事实是，占少数人口的精英，能力和创造力明显强于普通人，普通人怎么都竞争不过他们。提升社会效率，创造社会财富和工作岗位的，也确实是这些精英。</p>
<p>那到底是精英推动了社会的进步，还是普通人？</p>
<p>这种事实迷惑了很多人，也曾导致了精英史观的诞生。</p>
<p>精英论和民众无用论，并不是一个新观点，最早提出这一观点的是十八世纪的英国民粹主义者托马斯•卡莱尔为代表的思想家们。</p>
<p>他们认为劳动群众是多余的，整个历史都是由精英们的个人意志创造的，这一观点被称之为精英史观。</p>
<p>既然劳动群众是多余的，那自然不用太多考虑他们的感受，凑合让他们活着就行，就是一群行走的人形机器。</p>
<p>这种精英史观的出现和普及，导致欧洲的社会矛盾急剧扩大，并最终引发了苏联的诞生。</p>
<p>然后，精英史观被苏联证伪。</p>
<p>如果人民群众真的是无用的，那么这些无用之人即便不满，也不可能造成什么风波，轻易就被镇压了。</p>
<p>我举个例子，你欺负蚂蚁，奴役牛羊，它们不满意有用吗？哪怕起来造反还不是被你给轻易镇压了。</p>
<p>所以牛羊不配谈权力，只配当奴隶，你是牛羊永恒的奴隶主。</p>
<font color="red">现代社会之所以给人民群众那么多的权力，那是因为人民群众的力量，是真的超过了精英。</font>

<p>什么军队的力量，创造财富的能力就不谈了。</p>
<p>说一个被认为完全属于精英的领域，通过发明创造推动整个人类文明层次的提升。</p>
<font color="red">其实，推动人类文明层次提升和时代进步的，基本都是普通人。</font>

<p>导致英国进入工业革命的逆天发明，改良型蒸汽机，其发明者詹姆斯·瓦特，是普通人。</p>
<p>导致英国生产力和财富出现跳跃式爆发的珍妮纺纱机，其发明者詹姆斯·哈格里夫斯，是普通人。</p>
<font color="red">在整个工业革命期间，绝大部分专利，都是由普通人发明并申请的。</font>

<p>单打独斗搞科研的风气，一直到进入二战后，由于科研成本远远超过了个人的承受能力，才被迫逐渐停止。</p>
<p>詹姆斯·瓦特，出生于1736年英国格拉斯哥城附近的格里诺克镇，因为父亲生意不景气，瓦特从小就辍学了。</p>
<p>18岁那年，瓦特被父亲送进格拉斯哥城当学徒工，想学一门手艺来糊口，因为没做满7年学徒工就跑了，瓦特上了当地行业协会的黑名单，被禁止独立开店营业。</p>
<p>后来几经辗转，瓦特到外地成了一名修理工。</p>
<p>1763年，瓦特负责修理一台由苏格兰铁匠纽卡门发明制造的蒸汽机。</p>
<p>在修理的过程中，瓦特发现这部蒸汽机有很多缺点，于是打算自己改进。</p>
<p>历经十几年的艰辛，瓦特终于研发出了新型的蒸汽机，效率比铁匠卡门发明的蒸汽机提高了5倍。</p>
<p>从此，英国进入了工业革命时代，大跨步的超越了中国。</p>
<p>詹姆斯·哈格里夫斯，一名纺织工和木工，多年的纺织经验和木匠经验为他成功发明珍妮纺纱机打下了基础。</p>
<p>1764年，詹姆斯回家，开门后不小心一脚踢翻了他妻子正在使用的纺纱机，当他赶快弯腰扶正纺纱机的时候却发现，倒下的纺纱机还在转动，只不过横着的纱锭变成了直立的。</p>
<p>他突然想到，如果把几个纱锭都竖着排列，用一个纺轮带动,那岂不是可以同时纺出几倍的棉纱。</p>
<p>越想越兴奋的詹姆斯当场就拿出了自己的木匠工具开始改造，第二天就造出了一个纺轮带动8个纱锭的新纺纱机，劳动效率凭空提高了8倍。</p>
<p>詹姆斯用自己女儿珍妮的名字，把这种新纺织机命名为珍妮纺纱机。</p>
<p>1784年，珍妮纺纱机已经进化到了同时拥有80个纱锭，劳动效率提高了80倍。</p>
<p>直接改变世界财富格局的珍妮纺纱机，就是这么被搞出来的。</p>
<p>瓦特和詹姆斯是不是社会精英？</p>
<p>发明蒸汽机和珍妮纺纱机之前，他们肯定不是精英，不管是从财富还是社会地位去考虑，他们都不是精英。</p>
<p>当然，在做出了如此逆天的发明后，他们财富暴涨，社会地位空前提高，成为了典型的社会精英。</p>
<font color="red">那么请问，改变历史的蒸汽机和珍妮纺纱机，是人民群众发明的，还是社会精英发明的？</font>

<p>被称之为大发明家的托马斯·爱迪生，是普通人出身，在火车上卖报糊口，因为过于劳累没时间回家，爱迪生在火车上自己做实验，不小心引发了车辆失火，被大怒的列车长直接打聋了一只耳朵并丢下火车。</p>
<p>随后，爱迪生前前后后换过十几个工作，颠沛流离，但始终坚持捣鼓自己的小实验室。</p>
<p>最后，他成功了，从一个穷屌丝，变成了社会精英。</p>
<p>爱因斯坦的出身比前几位穷光蛋好一点，但也最多算个中产家庭，其父母压根谈不上是大富大贵的精英，不过爱因斯坦却改变了整个人类的物理。</p>
<p>为什么整个工业革命期间几乎所有的发明都是由穷人和中产阶层创造出来的，由贵族研发的成果少的可怜？</p>
<p>不是因为贵族不强，而是因为人民群众的数量太多，绝大多数发明又需要长期在一线和脏兮兮的机器待在一起才有可能创造出来，所以是工人阶层推动了工业革命的进步。</p>
<font color="red">每一个推动人类进步的工人，都会立刻翻身成为精英，但人类永远不知道下一个精英会是哪个工人的孩子。</font>

<p>精英的生产力明显高于同时代的普通人，并不是因为他们是精英而导致生产力强，而是因为他们生产力强所以成为了精英。</p>
<p>同一个时代里，精英远远强于普通人，确实是精英带着普通人飞，普通人看起来确实是可有可无的。</p>
<p>那些基础性的活，谁都会干，你不干越南人干。</p>
<font color="red">但精英的尴尬之处在于，他只是这个时代的精英。</font>

<font color="red">换一个时代，他也许就不是精英了。</font>

<p>比方说，马云是互联网时代的精英，在整个互联网时代他如鱼得水。但如果没有互联网，马云也就是个优秀的英语教师而已。</p>
<p>比方说，王健林是线下商业地产时代的精英，在地产时代他如鱼得水，但王健林一辈子都没玩转互联网，万达多次试图向互联网转型都惨败，亏了很多钱，也就靠着超级地产大牛市才始终保持巨额的财富。</p>
<p>八九十年代靠先下海崛起的那批富人就不提了，早就影都没了。</p>
<p>换一个时代，就会淘汰一大批老的精英，同时诞生一批新的精英。</p>
<p>但是，你永远不知道谁会是下一个时代的精英。</p>
<p>今天那些身家数亿的超级大网红，放在十年前，你敢认为他们会有这个身家？</p>
<p>但他们就是适合这个时代，论唱歌跳舞搞怪，马云王健林一起上都打不过他们，完全被碾压。</p>
<p>而以上这些所有的精英，都是细胳膊细腿，连个100斤的哑铃都举不起来，放到三国时期的战乱年代那全都是无用之人。</p>
<font color="red">你是精英？</font>

<font color="red">我一刀砍下来就知道你是不是精英了。</font>

<p>这就是精英诞生的不可预测性。</p>
<p>精英，只是当前时代的精英，换个时代你就不是精英了。</p>
<font color="red">所以，精英是最讨厌社会进步的一个群体。</font>

<p>再好的时代，都没有当前这个时代好，因为在当前这个时代我肯定是精英，能力最强，可以纵横天地。</p>
<p>但你换个时代，我就不知道自己还能不能当精英了，也许只能回家当个富家翁，也许连富家翁都当不了。</p>
<font color="red">但凡有一丝可能，当前社会的精英们都不愿改变目前的任何现状。</font>

<font color="red">所以精英们倾向于时代封锁，而不是时代进步，这是他们的根本利益所决定的。</font>

<p>中国历史上的每一任皇族，都极其排斥任何形式的社会革新，厌恶任何形式的技术革命，拖着中国在2000年里不断的原地打转，就是这个原因。</p>
<p>因为他们是所处时代的最大受益人，自然不希望对自己的时代进行任何改变。</p>
<p>既然推动时代进步的是人民群众，创造历史的也是人民群众。</p>
<p>那为什么人类历经数千年才从奴隶社会进化到了现代社会？</p>
<p>因为，精英就是精英，在同一个时代里，精英完全碾压本时代的人民群众。</p>
<p>无论明的暗的，正的反的，精英都可以吊打穷人，甚至一打十都轻轻松松。</p>
<p>如果你能反过来吊打精英，那你的身份就会立刻从穷人变成精英，屠龙者变成龙。</p>
<p>因为打得过的不叫穷人，所以穷人永远打不过精英。</p>
<p>但穷人有一个特点，就是规模大，数量远远超过精英，是几十倍上百倍的差距。</p>
<p>一个不行就十个，十个不行就二十个，二十个不行就三十个，精英总有扛不住的那一刻。</p>
<p>所以人民群众的力量就在于组织性，组织程度越高，人民群众的力量越大，精英越收敛。</p>
<font color="red">从古至今，人民群众的待遇提高史，说穿了就是组织联络能力的进化史。</font>

<p>交通越发达，联络起来越容易，人民群众的力量就越大，和同时代精英博弈而来的权力待遇就越高。</p>
<p>现代社会主义思潮的觉醒，就是工人阶层在工厂大规模聚集之后诞生的。</p>
<p>互联网和和智能手机的普及，让稳健的资本主义国家直接陷入了管理混乱，而对中国却只有好处没有坏处，也是类似原因。</p>
<font color="red">任何能提升人民群众联络和组织便利性的技术革新，都会进一步的提升人民群众的力量，迫使精英阶层让渡更多的利益。</font>

<p>不受美国精英阶层待见的底层红脖子能串联起来闹事，最终把特朗普选上台，把美国精英们恶心的够呛，折磨的焦头烂额，最终国家混乱，你以为这是偶然的？</p>
<p>不，这是手机移动互联网时代的必然。</p>
<p>除非美国精英愿意向红脖子让利，否则这事没完。</p>
<p>赶走全部红脖子，甚至消灭所有红脖子行不行？</p>
<p>先别说能否做得到，即便能做到，美国精英敢这么干，那也是自掘坟墓。</p>
<p>就算假设人工机器人已经完全普及，所有的苦力活都可以由机器人来干，人类只负责科研创新，美国精英消灭红脖子那也是自掘坟墓。</p>
<font color="red">因为这个时代的财富，是由这个时代的精英创造的。</font>

<font color="red">但下个时代的财富，蕴含在这个时代人民群众的体内。</font>

<font color="red">精英的孩子不一定是精英，精英的孙子几乎一定不可能是精英。</font>

<p>空有祖辈遗留的财富，没有足够的武力和科技去守护，精英的孙子就是一群抱着金砖的傻子，只有被屠杀的份。</p>
<p>精英的孙子由谁去守护？</p>
<font color="red">由下个时代的精英去守护，力量永远掌握在精英手里。</font>

<p>那谁会是下个时代的精英？</p>
<p>95%以上的下个时代精英，都诞生于这个时代的中产家庭和穷困家庭，也就是人民群众。</p>
<p>如果美国精英敢消灭本国所有的底层红脖子，同时苦力活可以由外国苦工或者机器人来干，那么本时代美国的国力受损并不多，甚至内部纠纷还会少了很多。</p>
<p>但下个时代，美国会急速衰弱，最终沦为末流国家，所有的财富都被人击垮吞并。</p>
<p>因为新一代的精英只剩零头了，国家失去了力量。</p>
<p>在这种纯右的理论之外，中国还做过偏左的尝试。</p>
<p>在那个大锅饭时代，干多干少一个样，干和不干一个样，完全的平均财富，经济精英被彻底消灭。</p>
<p>因为保留了政治精英，消灭了经济精英，所以这叫偏左，而不是纯左。</p>
<p>尝试的结果，是中国保留了自己的组织力和动员力，但经济却失去了活性和力量。</p>
<p>因此，我们紧急纠错，改革开放，回到了正轨。</p>
<font color="red">纯粹的穷人论，完全消灭本时代的精英是不可取的，这会导致你本时代没有财富。</font>

<font color="red">纯粹的精英论，完全消灭本时代的穷人，那也是不可取的，这会导致你下个时代没有财富。</font>

<p>精英和人民群众互相对立又互相融合，非常的奇妙。</p>
<p>本时代，精英的个体力量远远强于人民群众，创造财富并引领社会进步，但人民群众如果联合起来，力量却会反超精英。</p>
<p>而下个时代，本时代的精英却会纷纷落幕，失去了那种呼风唤雨、纵横天下的力量，变成了一个有点钱但没有力量的人民群众。</p>
<p>如果精英们可以肆无忌惮的侵害普通人的利益和财富，那么在下个时代，这种有钱但没力量的过气富豪及其后代，就是新时代精英们最佳的鱼肉对象。</p>
<p>在这双重制约下，本时代精英们同意让渡一部分权力和财富，保护那些看似没什么用，力量远远弱于他们的人民群众，因为他们知道自己的后代也是人民群众。</p>
<p>这是双赢的结局，否则就是双输。</p>
<p>谁这么做，谁就是现代国家，综合国力吊打那些纯粹以精英为主的古代国家。</p>
<font color="red">你越以精英为核心，你们国家诞生的精英就越少。</font>

<font color="red">你越看不起普通群众，你们国家的普通群众就越多。</font>

<p>违背常识，但这就是事实。</p>
<p>中美都是现代国家，比起古代国家，精英的权力都小的多，人民群众的待遇也都好的多。</p>
<p>但依然是有区别的。</p>
<p>中国相对更偏向人民群众一点，美国相对更偏向于精英一点。</p>
<p>谁对谁错？</p>
<font color="red">从古至今的历史，就是一部精英权力不断缩小的历史，数千年来这一趋势从未停止过。</font>

<font color="red">所以在超大的趋势尺度上，一定是中国更正确。</font>

<p>科技越发达，精英的权力就越小，科技进步是精英的敌人，但科技进步却都是精英造成的。</p>
<p>为什么精英会干这种自掘坟墓的事情？</p>
<p>因为精英不是一个人，是一个群体。</p>
<p>老精英不断的坠落，新精英不断的从人民群众中诞生出来。</p>
<p>贫穷的人民群众，对财富有着无限的渴望，而只要能推动人类文明进步，哪怕只能推动一点点，你都可以立刻成为社会精英，获得大量的财富和社会地位。</p>
<p>在这种诱惑下，大量的人民群众拼命的想要成为精英，哪怕这么做会削弱精英的地位。</p>
<p>因此，人类文明在源源不断的进步。</p>
<font color="red">人民群众想要成为精英的动力越足，国家文明进步的就越快。</font>

<p>如果精英由一个人或一个世袭罔替的群体组成，那么这个群体会极力的反对任何形式的科技进步，最典型的例子我刚才已经举过了，就是古代皇权。</p>
<p>为什么改革开放恢复了经济精英的地位后，中国就出现了突飞猛进的发展速度，成就让世界震惊。</p>
<font color="red">因为中国可能恰好把握到了如今人类科技水平所对应的那个中间的度，精英和人民群众中间博弈出来的最佳权力平衡点。</font>

<p>中国承认精英的地位和财富，但不承认精英的特权，但凡精英们有一点利用手中力量侵害人民群众利益的征兆，就重拳出击。</p>
<p><img src="/archives/42ad09e8/3.png" alt=" "></p>
<p>如果最擅长线下商业地产的人掌握了权力，他会支持互联网时代么？显然不会。</p>
<p>如果最擅长电脑端互联网的人掌握了权力，他会支持手机移动互联网时代么？显然也不会。</p>
<p>如果这些经济精英掌握了国家权力，那后果如何大家是可以猜到的。</p>
<p>美国的国家权力掌握在经济精英的手中，而中国的国家权力，掌握在最擅长组织人民群众的人手中。</p>
<p>因为最擅长于组织群众，力量核心来源于群众的人执掌了国家权力，中国才不会反对任何新时代，因为下个时代的精英一定来源于今天的人民群众，而无论哪个人民群众成为了下个时代的精英他都无所谓。</p>
<p>因此你才会看到，中国的改革和进化速度远远超过美国，<font color="red">这其实才是中国创造经济奇迹的核心原因。</font></p>
<p>美国也有自己的改革体系，依靠诸多经济精英不断的博弈来进行缓慢改革，国家也在不断的进化，但其改革自身的速度肉眼可见的落后于中国，很多地方的规章制度在中国人看来都已经到了因循守旧的地步了，美国人就是不改。</p>
<p>因为美国的精英权力过大。</p>
<font color="red">任何人不管以前有多穷，一旦成为精英，那都会千方百计的固定目前的一切现状，如果有可能，现有的规章制度他连一个字都不想改。</font>

<p>美国精英过大的权力，导致他们改革自身异常的艰难，需要有足够强的外部压力才会迫使他们同意改革。</p>
<p>而中国的特色制度，只要给老精英们保持一定的财富地位，就足以吸引人民群众前赴后继的成为新的精英，从而轻易增大自己的国力，还不需要担心精英们固化时代，阻挠改革，这是一个巨大的制度优势。</p>
<p>中国需要什么样的精英？</p>
<p>我们需要的，是那些做出巨大贡献，刚刚从人民群众的身份突破成社会精英的人。</p>
<p>已经拥有社会精英身份很多年的人，只会固化时代，让国家落后，不会带来太多的好处。</p>
<font color="red">之所以还保留他们的精英身份，不是为了考虑老精英的感受，而是为了不寒人民群众的心，让潜伏在人民群众里的下个时代精英还能保持旺盛的拼搏意志。</font>

<p>那些拥有了十几二十年精英身份，就自以为无所不能，认为人民群众无用的所谓精英们。</p>
<font color="red">听清楚了，真正无用的是你们，有用的是20年前的你，而不是今天的你。</font>

<p><a href="https://mp.weixin.qq.com/s/I26zuNovfvMjKbaTRhWYeQ##">阅读原文</a>  文章已于2021/07/15修改</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>政治</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>宇宙中98%的质量，由核聚变燃料组成</title>
    <url>/archives/b36274f7/</url>
    <content><![CDATA[<p><img src="/archives/b36274f7/1.jpg" alt=" "></p>
<p>原创 一棵青木 远方青木 4月27日</p>
<p>今天谈宇宙。</p>
<p>人类的文明有多么的低级，未来的发展空间有多么的广阔，我举一个例子就能解释清楚了。</p>
<font color="red">在宇宙中，98%的质量由核聚变燃料组成，但人类却无法利用丝毫。</font>

<p>理论上，比铁轻的元素，都可以核聚变，但最容易核聚变的还是氢和氦。</p>
<p>越重的元素，聚变越难，释放的能量越低。</p>
<p>所以人类目前能掌握的，是氢弹，而不是氦弹或者氧弹。</p>
<p>因为氢聚变最简单最容易。</p>
<p>在地球中，氢的质量占比很低，仅占据地球质量的0.14%，而氦就更少了，直接被列为稀有元素。</p>
<p>但在整个宇宙中，氢和氦占据了总质量的98%，大概是氢3氦1的比例，其他所有元素加起来才只有2%。</p>
<p>是地球和宇宙不同，而不是宇宙和地球不同。</p>
<p>比方说在木星中，根据伽利略号探测器在1995年的探测结果，氢占比75%，氦占比25%，合计占比100%，整个就是一气态行星。</p>
<p>也许木星深处会混杂点其他重元素，但伽利略号探测不到，能看到的地方100%都是氢和氦。</p>
<p>为什么宇宙中有这么多的氢和氦？</p>
<p>其实不多，因为在宇宙大爆炸之初，夸克结合成原子时，形成的全部都是氢。</p>
<p>氢，乃元素之母，所有的重元素都是由氢聚变而来。</p>
<p>在大爆炸的一瞬间，就有一部分氢被聚变成了氦。</p>
<p>因此，大爆炸之初，整个宇宙是由75%的氢和25%的氦组成，其余的元素为零。</p>
<p>科学家是咋知道氢和氦在宇宙之初是3比1的，为什么不是4比1？</p>
<p>根据木星的探测结果猜出来的，仅此而已。</p>
<p>经历了一百多亿年的聚变燃烧，宇宙中已经有1%多一点的氢和氦没了。</p>
<p>所以98%的质量占比真不多。</p>
<p>所有的恒星，都是由99%以上的氢和氦组成的。</p>
<p>当成型之后，在巨大的质量引力下，恒星内部产生了高温高压的条件，让一部分氢和氦产生了聚变反应。</p>
<p>聚变产生的大量能量，让恒星内部对外界产生了巨大的辐射，这也是恒星能发光的原因。</p>
<p>恒星内部聚变产生的巨大对外辐射压，恰好对冲了质量引发的对内坍缩压力，这就是恒星能在巨大自身引力下，没有把所有的氢和氦都压缩成一个球的原因。</p>
<p>恒星在聚变过程中，轻的元素会不断聚变成重的元素。</p>
<p>锂是哪来的？氧是哪来的？碳是哪来的？铁是哪来的？</p>
<p>不是天上掉的，都是由氢元素合成的，或者说是聚变成的。</p>
<font color="red">人类目前发现了一百多种元素，追根寻底都是氢变的。</font>

<p>但是聚变是有限制的，越重的元素越难聚变。</p>
<p>你像太阳，由于质量不足，内部无法形成足够的温度和压强，所以氢原子最多只能聚变成碳，更重的钠镁铁等元素都无法聚变出来。</p>
<p>以太阳的质量，只能在核心形成1500万K的温度和3000亿个大气压强。</p>
<p>但碳聚变，需要10亿K温度，因此需要至少4个太阳以上的质量才可以进行碳聚变，把碳聚变成氧、氖、镁。</p>
<p>而想聚变成铁，需30亿K的温度，这需要8倍太阳质量以上。</p>
<p>既然太阳只能聚变出碳，那地球上为什么会有钠镁铁？</p>
<p>因为太阳不是太阳系的一代恒星，之前还有老一代恒星，成功聚变出铁之后爆炸了而已。</p>
<p>爆炸之后的尘埃里，新一代的恒星和行星慢慢形成了，也就是今天的太阳。</p>
<font color="red">地球含有铁元素，但太阳的质量不足以聚变出铁，这就是太阳系在太阳之前至少还有一个恒星的证据。</font>

<p>不过这里大家也不要误会，之前的老一代太阳，寿命和目前的太阳是不一样的。</p>
<p>越大的恒星，寿命越短，因为燃烧的速度越快，最短的恒星寿命甚至只有十几万年。</p>
<p>等恒星聚变出了自己的元素上限，那么这个元素就会慢慢沉淀到恒星的核心，形成一个重元素核。</p>
<p>比如太阳，未来会形成一个碳核，而之前的老一代太阳会形成一个铁核。</p>
<p>此时，由于星核的温度和压强没办法让其进一步聚变，所以星核会逐渐开始停止聚变反应。</p>
<p>这下出大事了。</p>
<p>因为恒星巨大的质量引力是无时无刻都存在的，平时完全靠内部对外的辐射压才保持平衡。</p>
<p>一旦内部的聚变反应开始停止，辐射压就无法抵抗万有引力，整个恒星就开始迅速向内坍塌。</p>
<p>坍塌成中子星或者白矮星后。</p>
<p>无穷无尽的引力，导致恒星内部的温度和压力无止尽上升。</p>
<p>最终，恒星爆炸，形成超新星，将大量物质抛射向宇宙，部分质量留在核心继续坍塌，最终形成黑洞。</p>
<p>整个银河系，每50年就会有一颗恒星爆炸，放一个超大的爆竹。</p>
<p>超新星的爆炸是非常有意义的，因为恒星聚变最多只能生成铁。</p>
<p>铁，是一个非常特殊的元素。</p>
<p>比铁小的原子，只能聚变不能裂变，但聚变的时候会放出能量。</p>
<p>比铁大的原子，只能裂变不能聚变，但裂变的时候会放出能量。</p>
<p>铁原子就厉害了，这玩意既可以向上聚变也可以向下裂变，但每一种都需要吸收大量的能量，坚决不放出一点能量。</p>
<p><img src="/archives/b36274f7/2.png" alt=" "></p>
<p>别问我为什么铁这么特殊，科学家都不知道，只知道这玩意就是这么特殊。</p>
<p>因为铁元素会吸收能量，因此所有的恒星聚变到铁这一步，都会让内部的聚变反应停止，辐射压和引力失衡，导致迅速的坍塌和爆炸。</p>
<p>但是在超新星爆炸的同时，会在一瞬间释放出前所未有的巨大能量，温度和压强增大到一个恐怖的地步。</p>
<p>在这一瞬间，无数铁原子被强行聚变成了很多重元素。</p>
<p>元素周期表里有118个元素，铁排第26位，第27位之后的所有天然重元素，都只能在超新星爆炸这样极端的环境里产生。</p>
<p>目前，非人造天然元素总共94个，最重的3个是铀、鎿、钚，再向上的都是人类利用核反应制造出来的人工元素。</p>
<p>越重的元素，越容易裂变。</p>
<p>所以美国的第一代原子弹，是以钚作为原材料的，因为钚裂变最简单。</p>
<p>但钚的毒性大，生产成本高，需要极其复杂的生产堆和后处理厂才能实现批量生产，而地球上鎿的数量太少，所以在技术进步后，人类开始使用铀作为原子弹的材料。</p>
<p><img src="/archives/b36274f7/3.png" alt=" "></p>
<p>实际上，只要比铁重的元素，都能裂变，都可以做原子弹，只不过人类目前还没有那个技术而已。</p>
<p>就好像聚变，人类也只能利用最轻的氢元素。</p>
<p>实际上，比铁轻的都能聚变。</p>
<p>流浪地球这部电影中，就采用了“烧石头”的办法来推动行星发动机。</p>
<p>所谓烧石头，就是把石头里面的硅和氧聚变成铁，在这个过程中释放出大量的能量，然后把铁变成等离子体后以极高的速度喷射出去来推动地球移动。</p>
<p>理论上，这是可行的，但其技术对于今天的人类而言也只是个理论而已，因为我们连可控氢聚变都没有掌握。</p>
<p>氢和氦，是宇宙中最常见的能量来源。</p>
<p>为何在地球，氢的含量只有0.14%，而氦的含量接近于百分之零，难道地球是一个能量贫乏之地？</p>
<p>话也不能这么说。</p>
<p>地球上没有氢的原因，是因为氢太轻了，地球引力很难捕获氢气，这玩意会缓慢的逸散到太空之中。</p>
<p>现在地球上之所以还有点氢，完全是因为氧是地球含量第一的元素，氧和氢气结合成了水，固定在了地球上，大气中是几乎不含氢的。</p>
<p>至于氦成为了地球稀有元素，这就更好理解了，氦是惰性元素，是人类目前已知最高冷最不活波的元素，几乎不和任何其他元素反应，只能以氦气的形式存在。</p>
<p>氦气虽然比氢气重一点，但还是很轻，一旦到了大气中，很快就全部逸散了，不会保存在地球上。</p>
<p>地球上现存的氦气，都是以前固定在地壳中，混在天然气矿里的，开采出来一点少一点，且不可再生。</p>
<p>在地球形成之初，氢气的含量肯定是接近75%，氦气的含量肯定是接近25%，其他重元素估计合起来不到1%，和今天的木星一样。</p>
<p>但如今，地球只剩这1%了，其他的99%都已经逸散掉了。</p>
<p>逸散掉的氢和氦哪去了？</p>
<p>都被太阳的引力给捕获了。</p>
<p>根据光谱分析，目前宇宙中的氢和氦占比达98%以上，其中绝大部分都在恒星那里。</p>
<p>地球上氢和氦的含量很少，但太阳系不是这样。</p>
<p>太阳系99%的质量，都在太阳这颗恒星身上，其他所有的行星加起来只占1%的质量。</p>
<p>而太阳，基本由氢和氦组成。</p>
<p>惊讶太阳的质量之大么？</p>
<p>别惊讶，因为整个银河系有4000亿颗恒星，而所有的恒星都围绕一个核心在转，理论上这个核心应该具备全银河系99%的质量。</p>
<p>科学家把银河系的核心，称之为<font color="red">巨引源。</font></p>
<p>理论上说，这应该是一颗巨大无比的星体。</p>
<p>但前面分析过了，恒星越大，死的越快，目前科学家观测到的最大恒星，十几万年就燃烧殆尽了。</p>
<p>所以巨引源不可能是恒星。</p>
<p>而且，那里也确实没有任何光，观测不到任何东西，看起来是好像一片虚空，但明显有巨大到恐怖的引力。</p>
<p>人类所有的黑洞学说、暗物质学说，都是用来解释这个巨引源的。</p>
<p>那里究竟是一个超大黑洞，还是暗物质，未来的人类会慢慢探索。</p>
<p>这和今天的人类没有关系，因为目前人类连星际旅行都做不到，一辈子都到不了银河系中心，连发射几个自杀飞船试探核心的能力都没有。</p>
<p>人类想要进行星际旅行，能够利用核聚变的能量，这是最基础的一步。</p>
<p>但人类目前的主能源，依然是化石能源，靠烧石油和煤炭来驱动人类文明，<font color="red">这种能量水平永远不可能进行星际旅行。</font></p>
<p>宇宙中的氢氦燃料，是无穷无尽的，只要人类掌握了核聚变技术，就永远不用担心能量问题。</p>
<p>宇宙燃烧了100多亿年，才燃烧了1%的氢和氦，人类不需要担心宇宙寿命的问题。</p>
<p>拥有聚变技术后的宇宙飞船，只需要在船头装一个漏斗状的捕获装置，就可以搜集宇宙尘埃作为核聚变燃料，从而实现无止尽的飞行，还能顺便避免宇宙尘埃撞击飞船。</p>
<p><img src="/archives/b36274f7/4.png" alt=" "></p>
<p>实际上，在真正的宇宙航行中，最不值钱的就是能量，因为核聚变的燃料真的全宇宙都是，全宇宙98%的质量都是可以拿来当核燃料的。</p>
<p>只不过，人类目前还没有技术利用而已。</p>
<font color="red">掌握可控核聚变，才算成为了宇宙里的婴儿文明。</font>

<p>因为整个宇宙都是靠核聚变来获取能源的，而目前的人类不是。</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247554128&amp;idx=1&amp;sn=d441e576dc57a6f3896ce05f5aaaef05&amp;chksm=fe0e7c46c979f55083e3acd1eabb0cc8db4d2c509cd7b18321da483742ec3f6964503887c4f4&amp;mpshare=1&amp;scene=1&amp;srcid=0504EJSx47dUnf3PeW3EiD4f&amp;sharer_sharetime=1620099203870&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=8670448a25b6794c30d1bc85d7c6b2654e2da456c1df334f13ee9069a688c5b3ac8b795bd3c00ef3a0c040554ca8f22d19317ce75cc07b23d49c292e18f89664aa32e6efcdfd0594dc9afe9fbba93d2ca863e238827af55dfc46152739aaab5772e984e64f03212a1a1de2f0a57a66f9d06d5f398c72c85f416bfe7bbed6299d&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A1eRMRaXd2pQvIIJvn3zoK8%3D&amp;pass_ticket=dBF5cHILXuPQINn8tMCpjhUtts44JTASqDZQmYvv0btLeDQc89oJrHQJXL9vPgns&amp;wx_header=0">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>地理</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章搞懂无线林林总总</title>
    <url>/archives/c7f897e8/</url>
    <content><![CDATA[<p><img src="/archives/c7f897e8/1.png" alt=" "></p>
<p>先回顾一下网络传输概念，其实就是IEEE 802国际规定定义出来的，其中802.3定义了有线以太网传输，提出1Mbit/s到10Gbit/s对应的传输标准：<br><img src="/archives/c7f897e8/18.jpg" alt=" "><br>也就是说，要上到万兆，需要用到4对六类或以上的线缆，每对2.5Gbit/s。一直认为在双绞线上不可能实现这么高的传输速率，原因就是运行在这么高工作频率（至少为500MHz）基础上的损耗太大。但标准制定者依靠4项技术构件使10GBase-T变为现实：损耗消除、模拟到数字转换、线缆增强和编码改进。<br>而802.11则定义无线传输，下面详细说下无线传输（特指WLAN）。</p>
<h2 id="世界各个地区WIFI-2-4G及5G信道划分表（附无线通信频率分配表）"><a href="#世界各个地区WIFI-2-4G及5G信道划分表（附无线通信频率分配表）" class="headerlink" title="世界各个地区WIFI 2.4G及5G信道划分表（附无线通信频率分配表）"></a>世界各个地区WIFI 2.4G及5G信道划分表（附无线通信频率分配表）</h2><p>目前主流的无线WIFI网络设备802.11a/b/g/n/ac：<br><img src="/archives/c7f897e8/2.jpg" alt=" "></p>
<h3 id="传统-802-11"><a href="#传统-802-11" class="headerlink" title="传统 802.11"></a>传统 802.11</h3><p>1997年发布<br>两个原始数据率：1Mbps 和 2Mbps<br>跳频展频 (FHSS)或直接序列展布频谱(DSSS)<br>三个不重叠的信道中，工业、科学、医学 (ISM) 频段频率为2.4GHz<br>最初定义的载波侦听多点接入/避免冲撞 (CSMA-CA)</p>
<h3 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a>802.11a</h3><p>1999年发布<br>提供多种调制类型的数据传输率：6、9、12、18、24、36、48 和54Mbps<br>带52个子载波频道的正交频分复用 (OFDM) 技术<br>使用不需要许可证的国家信息基础设施 (UNII) 频道内的 12 个 5GHz 互不重叠频带</p>
<h3 id="802-11b"><a href="#802-11b" class="headerlink" title="802.11b"></a>802.11b</h3><p>1999年发布<br>各种调制类型的数据传输率：1、2、5.5和11Mbps<br>高率直接序列展频 (HR-DSSS)<br>三个不重叠的信道中工业、科学、医学 (ISM) 频段频率为2.4GHz</p>
<h3 id="802-11g"><a href="#802-11g" class="headerlink" title="802.11g"></a>802.11g</h3><p>2003年发布<br>各种调制类型的数据传输率：6 、 9 、 12 、 18 、 24 、 36 、 48 和 54Mbps；可以降级到 1 、 2 、 5.5 和 11Mbps ，使用 DSSS 和 CCK<br>带52个子载波频道的正交频分复用(OFDM)；使用 DSSS 和 CCK 向下兼容 802.11b<br>三个不重叠的信道中，工业、科学、医学 (ISM) 频段频率为2.4GHz</p>
<h3 id="802-11n"><a href="#802-11n" class="headerlink" title="802.11n"></a>802.11n</h3><p>2009年发布<br>各种调制类型的数据传输率：1、2 、5.5、6、9 、11、12、18 、24、36、48、54Mbps(请查看下面的表1)<br>正交频分复用 (OFDM) 技术使用多输入 / 多输出 (MIMO) 和频道绑定 (CB)<br>三个不重叠的信道中工业、科学、医学 (ISM) 频段频率为 2.4GHz<br>无论有无 CB，均为不需要许可证的国家信息基础设施 (UNII) 频道内的 12个5GHz互不重叠频带<br><img src="/archives/c7f897e8/3.jpg" alt="表1"></p>
<h3 id="802-11ac"><a href="#802-11ac" class="headerlink" title="802.11ac"></a>802.11ac</h3><p>2014年1月发布<br>各种调制类型的数据率;200mbps、400mbps、433mbps、600mbps、867mbps、1.3Gbps(请查看下面的表2)<br>802.11n无线标准在2009年9月11日获得IEEE标准委员会正式批准后，电子电气工程师协会(IEEE)就已经全面转入了下一代802.11ac的制定工作，目标是在2012年带来千兆级别的无线局域网传输速度。而博通(Broadcom)是全球第一使用802.11ac技术的芯片厂商<br><img src="/archives/c7f897e8/4.jpg" alt="表2"></p>
<p>不管是802.11b/g还是802.11a/b/g/n/ac一般都支持13个信道。它们的中心频率虽然不同，但是因为都占据一定的频率范围，所以会有一些相互重叠的情况。了解这13个信道所处的频段，有助于我们理解人们经常说的三个不互相重叠的信道含义。<br>信道也称作通道(Channel)、频段，是以无线信号（电磁波）作为传输载体的数据信号传送通道。无线网络（路由器、AP热点、电脑无线网卡）可在多个信道上运行。在无线信号覆盖范围内的各种无线网络设备应该尽量使用不同的信道，以避免信号之间的干扰。<br>下表是常用的 2.4GHz频带的信道划分。实际一共有14个信道（下面的图中画出了第14信道），但第14信道一般不用。表中只列出信道的中心频率。每个信道的有效宽度是 20MHz，另外还有2MHz的强制隔离频带（类似于公路上的隔离带）。即，对于中心频率为 2412 MHz 的1信道，其频率范围为2401~2423MHz。<br><img src="/archives/c7f897e8/5.png" alt=" "></p>
<p>当然，实际的电磁波谱使用规定因国家不同而有所差异，以上只是举个例子。而且，20MHz的信道宽度也只是“有效带宽”，因为实际上一个信道在其中心频率两侧有很宽的延展，但是超过10MHz以外的部分强度很弱，基本无用。这个就属于比较专业的通信原理问题了。<br>从下图很容易看到其中 1、6、11 这三个信道之间是完全没有交叠的，也就是人们常说的三个不互相重叠的信道。每个信道 20MHz 带宽。图中也很容易看清楚其他各信道之间频谱重叠的情况。<br><img src="/archives/c7f897e8/6.jpg" alt=" "><br>另外，如果设备支持，除 1、6、11 三个一组互不干扰的信道外，还有 2、7、12；3、8、13；4、9、14 三组互不干扰的信道。</p>
<h3 id="802-11ax"><a href="#802-11ax" class="headerlink" title="802.11ax"></a>802.11ax</h3><p>2019年发布<br>802.11ax技术构成:<br><img src="/archives/c7f897e8/19.jpg" alt=" "><br>802.11ax标准在物理层导入了多项大幅变更。然而，它依旧可向下兼容于802.11a/b/g/n与ac设备。正因如此，802.11ax STA能与旧有STA进行数据传送和接收，旧有客户端也能解调和译码802.11ax封包表头(虽然不是整个802.11ax封包)，并于802.11ax STA传输期间进行轮询。下图显示此标准修正最重要的变更以及与现行802.11n和802.11ac的对照。<br><img src="/archives/c7f897e8/20.jpg" alt="802.11n、802.11ac和802.11ax的关键PHY比较"><br>以下是在802.11ax当中使用到的关键技术<br>·OFDMA<br>·MU-MIMO<br>·1024-QAM<br>·Spatial Reuse<br>·BBS Coloring<br>OFDMA(正交频分复用多址接入)<br>OFDMA是通过将子载波子集分配给不同用户在OFDM系统中添加多址的方法。迄今为止，它已被许多无线技术采用，例如3GPP LTE。802.11ax是第一个将OFDMA引入WLAN网络的WLAN标准。此外，802.11ax标准也仿效LTE专有名词，将最小的子信道称为“资源单位(RU)”，每个RU当中至少包含26个子载波。<br>OFDMA允许同时提供具有不同带宽需求的多个用户，从而有效利用可用频谱。子载波被分成若干组，每组表示为具有最小尺寸为26个子载波(2MHz宽)和最大尺寸为996个子载波(77.8MHz宽)的资源单元(RU)。在用于传统WLAN技术的OFDM中，总信道带宽(例如，20MHz，40MHz等……)用于任何一帧传输。但是在用于802.11ax的OFDMA中，使用的子载波可以分配为小到2 MHz的块或最大带宽的传输。因此，可以针对不同类型的流量(例如即时消息(IM)与视频流)来扩展资源。OFDM和OFDMA之间的区别如下图所示。<br><img src="/archives/c7f897e8/22.jpg" alt="OFDM与OFDMA对比"><br>有如下几种子载波类型：<br>·数据子载波，用于数据传输;<br>·导频子载波，用于相位信息和参数跟踪;<br>·未使用的子载波，不用于数据/导频传输，未使用的子载波是DC子载波;<br>·保护频带子载波，在频带边缘;<br>·空子载波。<br>形成RU的子载波是连续的，除了在带的中间，其中空值被放置在DC处。<br>OFDMA结构由26子载波RU，52子载波RU，106子载波RU，242子载波RU，484子载波RU和996子载波RU组成。下图中显示了最大RU数，RU位置取决于信道带宽。<br><img src="/archives/c7f897e8/26.jpg" alt="不同频宽的RU总数"><br>下图显示了用于80MHz信道带宽的26，52，106，242，484和996个子载波RU位置。用户只能分配给一个RU，RU大小≥106可以分配给多个用户。<br><img src="/archives/c7f897e8/27.jpg" alt="RU在80MHz中的位置示意图"><br>MU-MIMO(多用户多入多出)<br>802.11ac标准引入了4x4下行链路MU-MIMO，其中AP同时向多达四个STA发送独立数据流。802.11ax将下行链路MU-MIMO支持的最大用户数扩展到8个。它还增加了对8x8上行链路MU-MIMO的支持，允许多达8个STA通过相同的频率资源同时传输到单个AP。结果是，与802.11ac相比，下行链路容量增加了2倍，上行链路容量增加了8倍。<br><img src="/archives/c7f897e8/21.jpg" alt="802.11ax MU-MIMO的特性"><br>1024-QAM<br>QAM编码是用星座图(点阵图)来做数据的调制解调，实际应用中是2的N次方的关系。比如说16-QAM，16是2的4次方，一次就可以传输4个bit的数据;802.11n是64-QAM，是2的6次方，因此在64个点阵的一个星座集合里面，用任意一个点可以携带六个bit的数据信息。<br>到了802.11ac，就变成了256-QAM，是2的8次方，802.11ac相对于802.11n在编码上面的速率提升了33%。802.11ax之后引入了更高阶的编码，就是2的10次方，1024-QAM。<br>我们都知道从8到10的提升是25%，也就是相对于802.11ac来说，802.11ax的性能又提高了25%，变成了1024-QAM，一个符号可以携带10个bit的数据。<br><img src="/archives/c7f897e8/23.jpg" alt="256-QAM与1024-QAM的对比"><br>Spatial Reuse(空间复用)<br>为了在密集部署方案中提高系统级性能和频谱资源的有效使用，802.11ax标准实现了空间重用技术。STA可以识别来自重叠基本服务集(BSS)的信号，并基于该信息做出关于介质争用和干扰管理的决定。<br>当主动侦听介质的STA检测到802.11ax帧时，它会检查MAC头中的BSS颜色位或MAC地址。但是，利用现有的介质访问规则，来自一个BSS的设备将推迟到另一个同频道BSS，而不会增加网络容量。<br>BSS着色是802.11ah中引入的一种机制，用于为每个BSS分配不同的“颜色”，将其扩展到11ax，根据检测到的颜色分配新的频道访问行为。<br><img src="/archives/c7f897e8/24.jpg" alt="BSS着色机制"><br>当802.11ax STA使用基于颜色代码的CCA规则时，它们也可以与发射功率控制一起调整OBSS信号检测阈值。此调整可提高系统级性能和频谱资源的使用。此外，802.11ax STA可以调整CCA参数，例如能量检测级别和信号检测级别。<br><img src="/archives/c7f897e8/25.jpg" alt="动态调整BSS内部的CCA门限"><br>除了使用CCA来确定当前帧的介质是空闲还是繁忙之外，802.11标准还使用网络分配向量(NAV)，一种维持未来流量预测的定时器机制，以便STA指示所需紧接在当前帧之后的帧的时间。NAV充当虚拟载波侦听，确保对802.11协议操作关键帧的介质预留，例如控制帧，以及RTS/CTS交换后的数据和ACK。<br>·Intra-BSS NAV，如果所侦测的协议数据单元(PPDU)中的BSS色彩与所关联AP已公布的色彩相同，STA就会将该帧视为Intra-BSS帧;<br>·Inter-BSS NAV，如果所侦测帧的BSS色彩不同，STA就会将该帧视为来自重叠BSS的Inter-BSS帧。在这之后，只有在需要STA验证帧是否是Inter-BSS帧期间，STA才将介质当成忙碌中(BUSY)。<br>该标准仍然必须定义一些忽略来自重叠BSS的业务机制，但是该实现可以包括提高BSS间帧的空闲信道评估信号检测(SD)阈值，同时保持BSS内业务的较低阈值。这样，来自相邻BSS的流量不会产生不必要的信道接入争用。</p>
<h2 id="关于802-11ax较为普遍的认识误区"><a href="#关于802-11ax较为普遍的认识误区" class="headerlink" title="关于802.11ax较为普遍的认识误区"></a>关于802.11ax较为普遍的认识误区</h2><h3 id="误区一：包治百病"><a href="#误区一：包治百病" class="headerlink" title="误区一：包治百病"></a>误区一：包治百病</h3><p>真相：802.11ax不能解决错误规划设计造成的弊病<br>对于无线网络，规划设计是重中之重！坚持正确的规划设计，好的产品和系统特性才能发挥到极致，在规划设计和产品选型上的妥协将敞开走向失败的大门！<br>在实际设计和部署中，简单的提升速度不是万能药，只靠802.11技术标准本身的升级换代是无法解决我们在规划设计和部署阶段就犯的各种错误。<br>这是因为在当今的无线局域网实际部署环境中主要以高容量接入为目标，无线接入点之间的距离远远比从前以覆盖为目的的方式近，频谱资源的有限会造成信道复用的效率低下。而进行合理的规划设计的首要任务就是要减少介质的竞争和减少射频干扰，即高效信道复用以最小化无线接入点之间的空口共享，然后才是在单一信道的覆盖蜂窝内增加空口利用效率，即让客户端和无线接入点之间建立较高的数据连接速率，也是802.11标准持续提升之处。在前提无法实现的情况下，单纯改善后者没有任何意义！<br>专家Tips：如果您可以尽早将您的客户端升级到支持802.11ax，那么基于802.11.ax的无线网络基础架构可能、也许会为您的网络增加容量。我之所以说“可能”、“也许”，是因为作为一个有12年无线网络经验的工程师，我看到80％以上的Wi-Fi网络设计和部署都或多或少的存在设计规划和部署问题，以至于没有什么“神奇”的技术或者产品能够帮助他们改正这些问题。这并不是夸张，很多都是用户血的教训和切肤之痛。</p>
<h3 id="误区二：解决2-4GHz频谱面临的问题"><a href="#误区二：解决2-4GHz频谱面临的问题" class="headerlink" title="误区二：解决2.4GHz频谱面临的问题"></a>误区二：解决2.4GHz频谱面临的问题</h3><p>真相：802.11ax不能治愈2.4GHz频谱面临的问题<br>2.4GHz频谱已“死”！虽然802.11ac和802.11ax无线接入点仍然支持2.4GHz频谱，但是这并不意味着这些协议在2.4GHz频谱上还能有更多作为。除去众多的Wi-Fi和非Wi-Fi设备以及干扰源，2.4GHz频谱的核心问题是只有3个非重叠信道可供使用。由于传统客户端数量之庞大，802.11ax在2.4GHz上完全不会帮助到你。<br>当然，从另外一个角度思考，如果企业大量客户端均采用5GHz频谱连接，那么2.4GHz频谱的窘境必然会有所缓解，但是这和802.11ax协议本身并无关联，使用802.11ac一样可以达到同样的效果。</p>
<h3 id="误区三：帮助提升传统客户端性能、覆盖问题"><a href="#误区三：帮助提升传统客户端性能、覆盖问题" class="headerlink" title="误区三：帮助提升传统客户端性能、覆盖问题"></a>误区三：帮助提升传统客户端性能、覆盖问题</h3><p>真相：802.11ax很难有效提高传统客户端的性能<br>虽然不必担心802.11ax无线接入点和传统协议客户端的互操作性，但是802.11ax无线接入点很难以经济高效的方式帮助提升传统（11a/b/g/n/ac）客户端的性能或覆盖范围。<br>很多人会说，802.11ax无线接入点既然具备了更多的天线和MIMO处理能力（8×8：8），那是不是意味着无线接入点接收无线客户端的信号会更加敏感？恢复客户端信号的能力会更棒？确实是这样，但是芯片/网络厂商不会这么实现，为什么呢？因为过犹不及，任何超过4×4:4的商用无线接入点都是浪费，难于实现且成本高昂，而最终通过提高灵敏度从而实现额外的上行增益的努力对于灵敏度和可靠性方面的改善微乎其微。这也是为什么第二代802.11ac没有商用化8×8:8（802.11ac标准中也有规定）无线接入点产品的原因。<br>当然不排除芯片/网络厂商可能会推出相关产品。当然，代价也一定是高昂的，且这部分成本必然会被分摊到用户头上。</p>
<h3 id="误区四：只谈效果，不谈实现的前提条件"><a href="#误区四：只谈效果，不谈实现的前提条件" class="headerlink" title="误区四：只谈效果，不谈实现的前提条件"></a>误区四：只谈效果，不谈实现的前提条件</h3><p>真相：802.11ax需要无线网络基础设施和无线客户端协同才能实现既定目标<br>简单来讲，802.11ax无线客户端相对于802.11ax无线接入点的意义与802.11ac无线客户端相对于802.11ac无线接入点来讲是一样的。没有既定客户端的支持，无线网络基础设施很难有用武之地。<br>举个例子<br>如果用802.11n客户端连接802.11ac无线接入点，或者用第一代802.11ac无线客户端连接第二代802.11ac无线接入点，无线接入点必须降级来兼容这些无线客户端，用户实际得到的性能提升基本可以忽略不计。<br>在现实世界的部署中，由于无线客户端的生命周期问题，实际上很难保证无线接入点在理想纯粹的模式下工作。即使在无线网络终端爆炸性增长的今天，尽管第二代802.11ac标准的客户端还在不断涌现，我们目前也只做到了第一代802.11ac无线客户端的大量普及。<br>下面是802.11ax的两大类众多技术亮点，也是其提升无线网络效能的关键——<br>物理层增强与高效，主要包括：<br>上行和下行方向正交频分多址（OFDMA）<br>上行和下行方向多用户-多输入多输出（MU-MIMO）（下行MU-MIMO需要第二代802.11ac客户端配合；上行MU-MIMO需要802.11ax无线客户端配合）<br>上行链路资源调度<br>最多8个发送天线和8个接收天线，8个空间流<br>更高的调制方式，1024QAM<br>MAC层增强与高效，主要包括：<br>基本服务集着色（BSS Coloring）<br>双NAV机制<br>目标唤醒时间（Target Wakeup Time-TWT）<br>可以看到，缺少了客户端的配合，802.11ac无线客户端连接到802.11ax无线接入点所达到的效果和连接802.11ac无线接入点大致无异，即使在802.11ax和802.11ac无线客户端混合环境中，最终系统能效也由802.11ax无线客户端数量的多少来决定。</p>
<h3 id="误区五：802-11ax就是交换的无线网络"><a href="#误区五：802-11ax就是交换的无线网络" class="headerlink" title="误区五：802.11ax就是交换的无线网络"></a>误区五：802.11ax就是交换的无线网络</h3><p>真相：802.11ax并没有实现Wi-Fi交换能力<br>Wi-Fi（802.11）仍然依赖共享介质，或者说半双工空气介质来传输电磁波。占用介质的方式仍然是载波侦听多路访问/冲突避免（CSMA/CA）。我们以往经常用以太网集线器来做类比。<br>对于802.11ac引入的MU-MIMO机制（802.11ac为下行[DL]，802.11ax还引入了上行[UL]）并不是实现了基于共享空气介质的“交换”能力。只是当无线端点赢得占用介质的机会时，它能够同时在下行链路向多个客户端发送，或者使多个客户端同时利用上行链路发送。这种访问机制比一个接一个的发送更有效率。然而802.11ax上行链路的MU-MIMO要求客户端必须是802.11ax客户端，传统客户端不能参与。</p>
<h3 id="误区六：802-11ax可以一次性实现所有创新"><a href="#误区六：802-11ax可以一次性实现所有创新" class="headerlink" title="误区六：802.11ax可以一次性实现所有创新"></a>误区六：802.11ax可以一次性实现所有创新</h3><p>真相：802.11ax不会一次实现所有创新<br>就像802.11ac协议分为两个波次推出市场一样，802.11ax也将以同样的形式进入市场。第一代802.11ax芯片组将不具备下列特性：<br>MCS 10和11（1024QAM）调制方式<br>8空间流<br>BSS着色机制<br>上行多用户-多输入多输出</p>
<p>总体来讲，802.11ax从两个大方面实现了自己的既定目标，其中MU-MIMO和OFDMA是802.11ax成功的关键。<br>1.物理层的增强与高效，主要包括：<br>•上行和下行方向正交频分多址(OFDMA)OFDMA机制可以同时为多个使用者提供较小(但专属)的子信道，进而改善每位用户的平均传输率。<br>•上行和下行方向多用户-多输入多输出(MU-MIMO)上行链路最多可同时为8个用户提供服务，容量是802.11ac的8倍;下行链路最多可同时为8个用户提供服务，容量是802.11ac的2倍。<br>•上行链路资源调度在802.11ax中，MU-MIMO和OFDMA技术可以分别使用;OFDMA增加了空口效率;而MU-MIMO提升的是系统容量。<br>•最多8个发送天线、8个接收天线和8个空间流<br>•更高的调制方式，1024-QAM每符号可携带10bit，与256-QAM相比，容量提升了25%。<br>2.MAC层的增强与高效，主要包括：<br>•基本服务集着色(BSS Coloring)BSS着色机制使设备能够区分自己网络中的传输与邻近网络中的传输，在尽可能的情况下最大限度去减少同频干扰。<br>•双NAV机制同时拥有Intra-BSS NAV和Inter-BSS NAV可以帮助STA预测自身BSS内的流量，并且当它们在得知重叠流量状态时可以进行自由传输<br>•目标唤醒时间(Target Wake up Time-TWT)减少用户之间的争用和重叠，显著增加STA的休眠时间以降低功耗。<br>以上就是关于802.11ax技术构成、特点、误区的介绍，相比于之前的协议，802.11ax的目标是实现在高密度部署的环境下，每个用户平均速率的提升（能够达到802.11ac的4倍），网络延时的降低，公平性得到更好的保证。因此也称之为高效无线协议（High Efficiency Wireless）。</p>
<h2 id="解读天线数量与信号强弱的关系"><a href="#解读天线数量与信号强弱的关系" class="headerlink" title="解读天线数量与信号强弱的关系"></a>解读天线数量与信号强弱的关系</h2><p>天线越多路由就越好？<br>“天线越多覆盖越广，天线越多信号越强，总之天线越多路由就越好”——觉得很“常识”的朋友可以继续往下看正文了。为你解读天线数量与信号强弱的关系！<br>首先，大家也应该注意到了，老一代无线路由器的天线肯定不会超过一根，这里的“老一代”指的是802.11n协议以前的802.11a/b/g路由，老的54M产品就只有一根天线。这样的话，802.11n显然成了一条分水岭，也是从那时开始天线不再只有孤零零的一根(1t1r的150M是个例外)，那到底是怎么一回事?这里我们就要提到一项11n协议之后才得到具体应用的多天线技术，也是无线通信领域一项非常重要的技术——MIMO(Multiple-Input Multiple-Output，多入多出)<br><img src="/archives/c7f897e8/28.jpg" alt=" "><br>先来看个例子，有人说，为什么我买了一个最新款的3天线支持802.11ac协议的无线路由器，结果信号强度、覆盖范围甚至连速度都没上去呢?天线不够?告诉你，300根也没用，检查一下你用的接受终端支不支持AC协议吧。比如你用的iPhone 3，这手机可只支持11a/b/g连11n都谈不上，那么即便是你给这它拆了加几根天线也没用。怎么解决?加装AC网卡或者换终端，总之加天线是没有用的。<br>为什么这样说?首先，Wi-Fi应用的环境是室内，我们常用的802.11系列协议也是针对这种条件来建立的。由于发射端到接收端之间存在各种各样的障碍物，收发时几乎不存在直射信号的可能。那怎么办?这个办法叫做多径传输，也叫多径效应。多径，从字面上也很好理解，就是把增加传输途径。<br><img src="/archives/c7f897e8/29.jpg" alt=" "><br>那么问题来了，既然是多径，传输的路程就有长有短，有的可能是从桌子反射过来的，有的可能是穿墙的，这些携带相同信息但是拥有不同相位的信号辗转最终一起汇集到接收端上。现代通信用的是存储转发的分组交换，也叫包交换，传输的是码(Symbol)。由于障碍产生不同的传输时延，就造成了码间干扰ISI(InterSymbolInterference)。为了避免ISI，通信的带宽就必须小于可容忍时延的倒数。<br><img src="/archives/c7f897e8/30.jpg" alt=" "><br>对于802.11a/b/g 20MHz的带宽，最大时延为50ns，多径条件下无ISI的传输半径为15m。在IEEE802.11协议中我们可以看到，这个值最大范围是35m，这是协议中还有误码重传等各种手段保证通信，并不是说有一点ISI就完全不能工作。这样的话你会发现，对于802.11a/b/g协议，即使加装再多的天线也没有任何意义。假设这些天线可以同时工作，反而会使多径效应更加恶劣。<br>总之，无线路由器的发射范围是这个IEEE802.11协议决定的，而非单纯的看天线。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说了这么多，单天线路由、双天线路由、三线四线甚至更多究竟有没有区别?有，但对于实际使用过程中的影响并不大，这包括信号覆盖、信号强度，天线多速度快就更是无稽之谈了。抛开已经很少见的单天线，剩下的“多天线”都只是实现MIMO技术的“介质”或者说是“工具”，区别在于使用的架构不同而已：常见的双天线产品主要用1T2R或2T2R，三天线产品则用到的是2T3R或3T3R。<br>理论上，增加天线数量会减少信号覆盖盲点，但我们通过大量的评测证实，这种差异在普通家庭环境中完全可以忽略不计。而且，就像内置天线不输外置一样，三天线覆盖不如双天线的情况也绝非个例，说到底产品质量也是一个重要因素。至于信号强度和“穿墙”则取决于发射功率，这个东西工信部作过规定，不得高于20dBm(即100mW)，“天线越多信号越强”也就不攻自破了。最后的结论就是，只要路由采用了有效的MIMO技术，无须在意天线数量。<br>接下来一页我们会进一步深入了解MIMO技术的神奇。<br>MIMO技术<br>搜各种百科资料IEEE802.11词条，我们可以读到，从802.11n开始，数据传输速率或者说承载的数据量有了很大的提升。首先，802.11n有了40MHz模式，然而按照之前的理论，它的发射范围应该因此降低一半才对，但事实上数据反而提升了一倍(70m)，这又是怎么一回事?<br><img src="/archives/c7f897e8/31.jpg" alt=" "><br>这就要得益于MIMO技术了，刚才我们讨论的种种手段都是为了对抗恶劣的多径环境，但是多径有没有好的一面呢?事实上，MIMO也是基于多径的，我们称之为空间多样性。多天线的应用有很多种技术手段，这里简单介绍两种：波束成型(Beamforming)和时空分组码(主要介绍Alamouti’scode)。这两种技术的优点是不需要多个接收天线。尤其是Alamouti码，连信道信息都不用，只用数学运算就可以利用两根天线实现3dB的增益，很赞对吧。<br>而不需要多个接收天线的优点在于并不是所有设备都能装上多天线。为了避免旁瓣辐射(天线方向图上，最大辐射波束叫做主瓣，主瓣旁边的小波束叫做旁瓣)，满足空间上的采样定理，一般以发送信号之一半波长作为实体的天线间距。无论是GSM信号1.8GHz，1.9GHz还是Wi-Fi信号的2.4GHz，我们暂取2GHz便于计算，半波长为7.5cm。所以，我们看到的路由器上天线的距离大多如此，也正是因此，我们很难在手机上安装多个天线。<br>波束成型(Beamforming)：借由多根天线产生一个具有指向性的波束，将能量集中在想要传输的方向，增加信号传输品质，并减少与其他用户间的干扰。我们可以简单笼统地这样理解天线的指向性：假设全指向性天线功率为1，范围只有180度的指向性天线功率可以达到2。于是我们可以用4根90度的天线在理论上提高4倍的功率。波束成型的另外一种模式是通过信道估算接收端的方位，然后有指向性的针对该点发射，提高发射功率(类似于聚光的手电筒，范围越小，光越亮)。智能天线技术的前身就是波束成型。<br><img src="/archives/c7f897e8/32.jpg" alt=" "><br>空时分组码(Space-Time Block Code，即STBC)：在多天线上的不同时刻发送不同信息来提高数据可靠性。Alamouti码是空时分组码里最简单的一种。为了传输d1d2两个码，在两根天线1,2上分别发送d1,-d2<em>和d2,d1</em>。由于多径，我们假设两根天线的信道分别为h1h2，于是第一时刻接收端收到的信息r1=d1h1+d2h2，之后接收的信息r2=-d2<em>h1+d1</em>h2。接收到的这个2维方阵只要乘以信道，就可得到d1d2的信息了。看不懂没关系，总之呢就是Alamouti找到一组正交的码率为2×2矩阵，用这种方式在两根天线上发射可以互不影响;可以用一根天线接收，经过数学运算以后得到发射信息的方法。<br><img src="/archives/c7f897e8/33.jpg" alt=" "><br>其他的MIMO呢，在概念上可能比较好理解，比如2个发射天线t1t2分别对两个接收天线r1r2发射，那么相当于两拨人同时干活，速度提升2倍等等。但是实际实现起来一方面在硬件上需要多个接收天线，另一方面需要信道估计等通信算法，那都是非常复杂，并且耗时耗硬件的计算了。<br>讲上面两种技术实际上是MISO(Multiple-Input Single-Output)的方法，也是想从另外一个方面证明，天线多了不代表他们能一起干活。100年前人们就知道天线越多越好越大越好了，但是天才的Alamouti码1998年才被提出来多天线技术的802.11n协议2009年才开始应用。<br><img src="/archives/c7f897e8/34.jpg" alt=" "><br>20年前，人们用OFDM(Orthogonal Frequency Division Multiplexing，即正交频分复用，多载波调制的一种技术)对抗由于城市间或室内障碍太多造成的多径衰落，而如今我们已经开始利用多径来提高通信质量。这是技术上突飞猛进的发展，而不是简单的“想当然”就可以实现的。<br>写在最后<br>MIMO本身就是一个时变的、不平稳的多入多出系统。关于MIMO的研究，是一个世界性课题，留下的疑问还有很多，同样的问题学术上甚至也会出现不同的说法。不过，对于一般消费者大可不必深究，认清了开头我们讲的“误区”，知道路由天线是个“工具”，普通家庭双天线足以，选购时看清产品规格，不要被商家误导。</p>
<h3 id="世界各个地区WIFI-2-4G及5G信道一览表"><a href="#世界各个地区WIFI-2-4G及5G信道一览表" class="headerlink" title="世界各个地区WIFI 2.4G及5G信道一览表"></a>世界各个地区WIFI 2.4G及5G信道一览表</h3><p>2.4 GHz<br><img src="/archives/c7f897e8/7.jpg" alt=" "></p>
<p>5 GHz<br><img src="/archives/c7f897e8/8.jpg" alt=" "></p>
<h3 id="史上最全最详细无线通信频率分配表"><a href="#史上最全最详细无线通信频率分配表" class="headerlink" title="史上最全最详细无线通信频率分配表"></a>史上最全最详细无线通信频率分配表</h3><p><img src="/archives/c7f897e8/9.jpg" alt=" "></p>
<h2 id="WIFI-6"><a href="#WIFI-6" class="headerlink" title="WIFI 6"></a>WIFI 6</h2><p>越来越多的终端开始支持Wi-Fi 6，由企业级Wi-Fi 6 AP组成的无线网络也即将迎来大规模普及，企业在升级或新部署Wi-Fi网络时，已经不再犹豫是否选择Wi-Fi 6，但面对市场上各种模式的企业级Wi-Fi 6 AP如何选择？如何建网？成为企业IT管理人员应该关注的问题。</p>
<h3 id="决定WLAN网络吞吐量的两大因素"><a href="#决定WLAN网络吞吐量的两大因素" class="headerlink" title="决定WLAN网络吞吐量的两大因素"></a>决定WLAN网络吞吐量的两大因素</h3><p>在一个AP覆盖范围内影响吞吐性能、接入容量、并发容量、人均带宽的最重要因素有2个：（1）无线频谱资源（频宽）；（2）AP的空间流数量（MU-MIMO能力）。<br><img src="/archives/c7f897e8/10.jpg" alt=" 图1 更宽的道路                                                    图2 更多的高架层数"></p>
<p>频宽好比道路宽度，空间流数量好比高架层数，要么通过拓宽路面提升道路吞吐量，要么通过增加高架层数提升道路吞吐量。虽然两者都可以提升道路吞吐量，但前者会占用更多宝贵的土地资源，造价相对低一些；而后者能尽可能的复用土地资源，但造价相对高一些。</p>
<p>同样，在无线网络中，无线频谱类似于土地资源，也是一个宝贵的资源，在连续组网部署时基本都是不够用的，此时可通过增加空间流来增加吞吐量，企业级Wi-Fi 6 AP单射频最多支持8条空间流，吞吐量可达9.6Gbps。<br><img src="/archives/c7f897e8/11.jpg" alt="图3：5GHz射频，HE80MHz下不同空间流数量对应的吞吐量"></p>
<h3 id="4x4-MU-MIMO是企业Wi-Fi-6网络的基础需求"><a href="#4x4-MU-MIMO是企业Wi-Fi-6网络的基础需求" class="headerlink" title="4x4 MU-MIMO是企业Wi-Fi 6网络的基础需求"></a>4x4 MU-MIMO是企业Wi-Fi 6网络的基础需求</h3><p>空间流越多吞吐量越大，但同样带来的硬件成本也越大，因此，企业要基于业务实际需求来选择，实现最高性价比部署。</p>
<h3 id="业务模型驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP"><a href="#业务模型驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP" class="headerlink" title="业务模型驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP"></a>业务模型驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP</h3><p><img src="/archives/c7f897e8/12.png" alt="图4：不同应用对业务带宽的需求 "></p>
<p>过去的无线业务一般是以网页、邮件、云桌面、1080P视频等业务为主，每用户4~10Mbps的平均带宽即可满足这些业务需求。但随着流媒体广告、VR/AR、4K高清视频、智能办公系统等新技术新业务的兴起和普及，对无线网络的要求也越来越高，每用户的带宽需求从原先的8Mbps向50Mbps甚至100Mbps演进。根据Tolly实测数据显示，HE40MHz频宽下2x2 MU-MIMO的企业级Wi-Fi 6 AP，在20个终端并发时总吞吐量仅210Mbps，平均10Mbps/用户，当面对更大带宽需求的业务时，2x2 MU-MIMO的企业级Wi-Fi 6 AP带给每用户的平均带宽不足以支撑该业务。因此，在并发规模不变，人均带宽提升1倍，体验不下降的情况下至少需要选择4x4 MU-MIMO的企业级Wi-Fi 6 AP。</p>
<h3 id="终端接入规模驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP"><a href="#终端接入规模驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP" class="headerlink" title="终端接入规模驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP"></a>终端接入规模驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP</h3><p><img src="/archives/c7f897e8/13.jpg" alt="图5：越来越多的无线终端接入，每AP并发规模提升1倍"></p>
<p>无线替代有线的趋势导致随时随地都会有无线终端接入并使用无线网络，这将导致每AP下接入的用户规模大幅度增加，大部分企业在建网前会被建议按每AP下最低30~40个以上并发用户进行规划，以满足企业办公生产需求。根据Tolly实测数据显示，HE40MHz频宽下2x2 MU-MIMO的企业级Wi-Fi 6 AP在终端并发规模提升到20个时总吞吐量仅210Mbps，平均10Mbps/用户，仅能满足1080P视频业务，当用户并发规模增加时，2x2 MU-MIMO的企业级Wi-Fi 6 AP带给每用户的平均带宽会继续下降，不仅影响当前业务，更无法支撑更高带宽的业务。因此，在人均带宽不变，并发规模提升1倍，体验不下降的情况下至少需要选择4x4 MU-MIMO的企业级Wi-Fi 6 AP。</p>
<h3 id="终端类型驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP"><a href="#终端类型驱动企业部署Wi-Fi-6网络时需要选择更多空间流的AP" class="headerlink" title="终端类型驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP"></a>终端类型驱动企业部署Wi-Fi 6网络时需要选择更多空间流的AP</h3><p><img src="/archives/c7f897e8/14.jpg" alt="图6：2T2R MU-MIMO终端逐渐成为主流"></p>
<p>移动终端的Wi-Fi网卡从过去的1条流（1T1R：1x1 MIMO）为主向2条流（2T2R：2x2 MU-MIMO）转变，2019年之后上市的移动终端普遍支持2条流，比如华为、三星、苹果、小米等终端的Wi-Fi网卡都标配2条流，部分PC终端的Wi-Fi网卡支持3条流。因此，原来2x2 MU-MIMO的企业级Wi-Fi 6 AP每射频可同时满足2个1条流的终端同时并发，当接入的终端是2条流时，2x2 MU-MIMO的企业级Wi-Fi 6 AP每个射频同时仅能处理一个终端，无法发挥MU-MIMO并发接入技术带来的价值，这和单终端依次调度没有任何区别，用户带宽也无法提升。<br><img src="/archives/c7f897e8/15.jpg" alt="图7：HE80MHz频宽，2个终端并发时2x2 MU-MIMO AP与4x4 MU-MIMO AP下的用户带宽差异"><br>事实上，根据Tolly实测数据显示，HE80MHz频宽下，2x2 MU-MIMO的企业级Wi-Fi 6 AP单5GHz射频同时接入2个2条流的用户时，由于空口资源竞争关系，每用户平均吞吐量仅为327Mbps；而4x4 MU-MIMO的企业级Wi-Fi 6 AP在同等条件下2个2条流的用户可同时得到调度，每用户平均吞吐量高达604Mbps。因此，在2条流为主的终端场景下，要充分发挥MU-MIMO能力，最低要求选择4x4 MU-MIMO的企业级Wi-Fi 6 AP。</p>
<h3 id="关于频宽"><a href="#关于频宽" class="headerlink" title="关于频宽"></a>关于频宽</h3><p>关于80+80和160频宽，80+80是在不连续的信道上组成了160频宽，而160就是在连续的信道上组成。如下图：<br><img src="/archives/c7f897e8/16.png" alt=" "><br>要有160MHz频宽，就要设置在低信道上，例如36至64之间。因为中间有些频段是雷达专用的，所有WIFI6路由开机后会有个扫描的动作，5G信号会晚于2.4G出现，不要以为有质量问题。如果用149以上的信道，是不够160MHz使用的，除非以后开放6G频段。还有还有，5G信道一定一定一定不要设置165，你用5G慢，就要看看是否用了165，因为它的频宽只有20MHz，速度就如2.4G那么慢了。</p>
<h2 id="AP选择与测试效果"><a href="#AP选择与测试效果" class="headerlink" title="AP选择与测试效果"></a>AP选择与测试效果</h2><p>根据上面提供的资料，正好最近有无线的项目使用AirEngine 5961-11型号的AP，查看官方的产品描述：<br>支持双射频2.4GHz(2x2) + 5GHz(2x2)同时工作，其中2.4GHz频段最大速率575Mbps，5GHz频段最大速率1.2Gbps，整机速率可达1.77Gbps。<br>也就是这个产品是2x2 MU-MIMO的，那么单AP支持并发数是多少？<br><img src="/archives/c7f897e8/17.png" alt=" "><br>回答这个问题之前，我们再探讨下mu-mimo技术<br>首先，百度可知。<br>MU-MIMO 即Multi-User Multiple-Input Multiple-Output 的缩写，直译为“多用户 多输入 多输出”， 是最新Wi-Fi技术标准802.11ac Wave 2（即802.11ac 2.0标准）的最重要特性之一，能彻底改变Wi-Fi网络的运行方式，显著提高网络总吞吐量和总容量，将上网速度提升三倍。802.11ac Wave 2另外两个特性是数据传输通道最高可扩张至160MHz提供第四空间流，可真正实现网络资源的充分利用和性能提升。<br><img src="/archives/c7f897e8/35.jpg" alt=" "><br>SU-MIMO路由器信号一般是一个圆环，一般是以你的路由器为圆心，向外发射信号，根据远近等关系（不是绝对意义上的远近，更多的是信号质量等方面），依次单独与上网设备进行通讯。<br>这时当接入的设备过多时，就会出现设备等待通讯的情况，网络卡顿的情况就由此产生。<br>而使用MU-MIMO路由器就不一样了，MU-MIMO路由的信号在时域、频域、空域三个维度上分成多个部分，就像是同时发出多个不同的信号。支持MU-MIMO的路由器能够同时与多部设备协同工作；尤其值得一提的是，由于多个信号互不干扰，资源得到最大化的利用。<br>路由器在SU-MIMO模式下会给每个设备分带宽，上图说的就是如果路由器一共有100Mbps带宽，那每个设备就是33.3Mbps。但是我们现在的设备一般都可以握手协商出866Mbps的带宽，而且<br>我听说，网络中要所有设备都支持MU-MIMO才能启用MU-MIMO。只要有一个SU-MIMO整个网络都是SU-MIMO了。<br>不对不对，非也非也。<br>首先，如果路由器和终端没有协商成MU-MIMO，只是终端以SU的方式传输，而不是路由器就不能用MU-MIMO工作了，SU和MU是可以混合在一起的使用的。<br>所以，你的5G有各种终端都可以，只要某几个终端能和路由器协商出MU-MIMO，就会使用MU-MIMO工作。<br>但是路由器会在某一时刻切换状态。比如你有5个终端，3个不支持MU，2个支持MU(都连入5GWiFi)那么某种情况下，路由器正好要给2个支持MU的终端发送数据，那么这次传输就会使用MU。支持MU不代表会一直MU，需要一定场景来触发MU。理论上不存在一直占用这种情况。比如1个SU和2个MU的终端在同时下电影。那么路由器的发送过程就是SU-MU-SU-MU这要交替的变化。所以不会因为一个设备是su-mimo就导致整个网络都没办法MU-MIMO。<br>默默说一句：如果一个设备就导致整个网络不能MU，这个标准的制定也太傻了<br>唉小米10参数说支持 2x2 MIMO，8x8 Sounding for MU-MIMO。到底是2x2还是8x8<br>针对这个问题，我们举个简单的例子。假设路由器是最多支持到8<em>8的MU-MIMO。这8</em>8的天线同时在广播自己的信号。<br>这个时候有4台具备2<em>2的想要连接WIFI。这个时候手机端就要开始嗅探（sounding）数据流了。如果这4台手机都可以支持8</em>8的嗅探（sounding）。那他们就可以各自占用2<em>2的天线。<br>为了方便理解，画了一张图如下：<br><img src="/archives/c7f897e8/36.jpg" alt=" "><br>但是如果4台具备2</em>2的想要连接WIFI，但是不支持8<em>8的嗅探（sounding），他们只支持了4</em>4的嗅探。那他们就可能会出现两两分组的情况。在自己的分组下还是需要出现先后传输-等待的交替进行。<br>如下图：<br><img src="/archives/c7f897e8/37.jpg" alt=" "><br>但是实际情况远比我们举例的复杂，终端到底跟哪个天线连接是要看手机上的2<em>2天线去嗅探路由器的8</em>8天线的时候跟哪两根天线的信号质量最好。而不是按顺序连接。同时我们的网络环境也不会刚刚好4个终端的网卡性能一模一样，更多的时候是新老设备同时使用WIFI（甚至有的只支持WIFI4，有的支持WIFI6）。在这些情况下路由器的数据传输情况就会复杂许多。</p>
<p>这样，如果支持2x2的客户端最终达到8Mbit/s的速度，那么理想状态下2.4Ghz频段575/8=71个，而5Ghz下1200/8=150个，合计200多个客户端并发下载可以达到，可以满足企业需求。<br>最后，附上华为企业级AP的规格：<br><img src="/archives/c7f897e8/38.jpg" alt=" "></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>WLAN</tag>
      </tags>
  </entry>
  <entry>
    <title>代理服务之squid+sarg</title>
    <url>/archives/c624573e/</url>
    <content><![CDATA[<p><img src="/archives/c624573e/1.jpg" alt=" "></p>
<h2 id="代理服务器软件"><a href="#代理服务器软件" class="headerlink" title="代理服务器软件"></a>代理服务器软件</h2><p>最近有个需求要用到代理服务器，搜索了一番，用得比较多的是windows平台上的ccproxy，不过反应软件不太靠谱，软件经常会崩溃，比较靠谱的是linux平台下的squid。其实还有比较优秀的代理软件如轻量级的tinyproxy，privoxy，还有重量级的vanish和nginx。轻量级的软件不支持缓存，故选择squid。</p>
<p>Varnish与Nginx缓存服务器</p>
<p>1、高性能缓存服务器Varnish<br>Varnish是一款高性能的、开源的方向代理服务器和缓存器。挪威最大的在线报纸Verdens Gang使用了3台Varnish代替了原来的12台Squid，性能更好！</p>
<p>Varnish与Squid的对比如下：</p>
<p>（1）优点</p>
<p>Varnish具有更好的稳定性、更快的访问速度、更多的并发连接支持数，可以通过管理端口来管理缓存。</p>
<p>（2）缺点</p>
<p>1)在高并发状态下，Varnish消耗更多的CPU、I/O和内存资源。</p>
<p>2)Varnish进程一旦挂起、崩溃或者重启，缓存的数据会从内存中释放，此时所有的请求都会转发到后端服务器，给后端服务器造成很大压力。</p>
<p>2、轻量级缓存服务器Nginx</p>
<p>Nginx支持类似Squid的缓存功能，把URL以及相关信息当成key，用MD5编码Hash后把数据文件保存在硬盘上。</p>
<p>Nginx只能为只当的URL或者状态码设置过期时间，并不支持类似Squid的purge命令来手动清除指定的缓存页面。可以通过第三方的ngx_cache_purge来清除指定的URL缓存。</p>
<p>Nginx的缓存加速功能是由proxy_cache和fastcgi_cache两个功能模块完成的。</p>
<p>Nginx缓存加速的特点如下：<br>1)缓存功能十分稳点，运行速度不逊于Squid。<br>2)对多核CPU的利用率比其他的开源软件要好。<br>3)支持高并发请求数，能同时承受更多的访问请求。</p>
<h2 id="代理基本类型"><a href="#代理基本类型" class="headerlink" title="代理基本类型"></a>代理基本类型</h2><p>根据实现的方式不同，squid代理服务可分为传统代理和透明代理两个常见的代理服务。</p>
<p>1)传统代理<br>也就是普通的代理服务，首先必须在客户机的浏览器、QQ聊天工具、下载软件等程序中手动设置代理服务器的地址和端口，然后才能使用代理服务来访问网络。对于网页浏览器，访问网站时的域名解析请求也会发送给指定的代理服务器。</p>
<p>2)透明代理<br>提供与传统代理相同的功能和服务，其区别在于客户机不需要指定代理服务器的地址和端口，而是通过默认路由、防火墙策略将Web访问重定向，实际上仍然交给代理服务器来处理。重定向的过程对客户机来说时是“透明”的，用户甚至并不知道自己在使用代理服务，所以称为“透明代理”。使用透明代理时，网页浏览器访问网站时的域名解析请求将优先发给DNS服务器。</p>
<p>在实际应用中，传统代理多见于Internet环境，如为QQ程序使用代理可以隐藏本机真实IP地址，为下载工具使用多个代理可以规避服务器的并发连接限制。而透明带多见于局域网环境，如在Linux网关中启用透明代理后，局域网主机无需进行额外的设置就可以享受更好的上网速度。</p>
<h2 id="搭建Squid传统代理服务器"><a href="#搭建Squid传统代理服务器" class="headerlink" title="搭建Squid传统代理服务器"></a>搭建Squid传统代理服务器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>到官网下载最新的squid源码包<br>解压：<br><code>tar zxf squid-5.0.5.tar.gz</code></p>
<p>安装编译环境：<br><code>yum install gcc gcc-c++ make perl-devel -y</code></p>
<p>编译：<br><code>cd squid-5.0.5</code></p>
<p><code>./configure \</code></p>
<p># 把软件安装到指定位置<br><code>--prefix=/app/squid-5.0.5 \</code>  </p>
<p># 可以在规则中设置为直接通过客户端MAC进行管理，防止客户端使用IP欺骗<br><code>--enable-arp-acl \</code></p>
<p># 使用内核过滤<br><code>--enable-linux-netfilter \</code> </p>
<p># 支持透明模式<br><code>--enable-linux-tproxy \</code></p>
<p># 异步I/O，提升存储性能<br><code>--enable-async-io=100 \</code></p>
<p># 错误信息的显示语言<br><code>--enable-err-language=&quot;Simplify_Chinese&quot; \</code>  </p>
<p># 允许URL中有下划线<br><code>--enable-underscore \</code> </p>
<p># 使用poll()模式，提升性能<br><code>--enable-poll \</code>      </p>
<p># 使用GNU正则表达式<br><code>--enable-gnuregex</code>   </p>
<p>安装:<br><code>make &amp;&amp; make install</code></p>
<p>创建squid用户:<br><code>useradd -M -s /sbin/nologin squid</code></p>
<p>修改属主和属组:<br><code>chwon -R squid:squid /app/squid-5.0.5</code></p>
<p>创建软连接:<br><code>cd /app</code></p>
<p><code>ln -s squid-5.0.5 squid</code></p>
<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><p><code>vim /app/squid/etc/squid.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http_access allow all</span><br><span class="line">http_port 3128</span><br><span class="line">visible_hostname 192.168.1.200 # 指定可见主机名</span><br><span class="line">cache_mem 64 MB</span><br><span class="line">cache_swap_low 80</span><br><span class="line">cache_swap_high 97</span><br><span class="line">cache_dir ufs &#x2F;app&#x2F;squid&#x2F;var&#x2F;cache&#x2F;squid 512 16 256 # 配置硬盘缓存，打开缓存目录512M，其中一级目录16个，二级256个</span><br><span class="line">cache_effective_user squid</span><br><span class="line">cache_effective_group squid</span><br></pre></td></tr></table></figure>
<p>检查配置文件:<br><code>squid -k parse</code></p>
<p>重新加载配置文件:<br><code>squid -k rec</code></p>
<p>初始化缓存目录:<br><code>squid -zX</code></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>添加squid.service:<br><code>vim /usr/lib/systemd/system/squid.service</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;squid</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;app&#x2F;squid&#x2F;var&#x2F;run&#x2F;squid.pid</span><br><span class="line">ExecStart&#x3D;&#x2F;app&#x2F;squid&#x2F;sbin&#x2F;squid</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<p>重载systemctl:<br><code>systemctl daemon-reload</code></p>
<p>开启squid:<br><code>systemctl start squid</code></p>
<p>查看监听端口：<br><code>ss -tunlp | grep squid</code></p>
<h2 id="服务器多端口设置"><a href="#服务器多端口设置" class="headerlink" title="服务器多端口设置"></a>服务器多端口设置</h2><h3 id="使用docker实现多端口"><a href="#使用docker实现多端口" class="headerlink" title="使用docker实现多端口"></a>使用docker实现多端口</h3><p>从官方网站或者第三方docker镜像启动后获取默认squid配置，存放到/software目录下：<br><code>docker cp xxxx:/etc/squid/squid.conf /software</code></p>
<p>xxx为容器ID</p>
<p>导出排除注释的配置：<br><code>egrep -v &quot;^#|^$&quot; squid.conf &gt; squid.conf.1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acl localnet src 10.0.0.0&#x2F;8	# RFC1918 possible internal network</span><br><span class="line">acl localnet src 172.16.0.0&#x2F;12	# RFC1918 possible internal network</span><br><span class="line">acl localnet src 192.168.0.0&#x2F;16	# RFC1918 possible internal network</span><br><span class="line">acl localnet src fc00::&#x2F;7       # RFC 4193 local private network range</span><br><span class="line">acl localnet src fe80::&#x2F;10      # RFC 4291 link-local (directly plugged) machines</span><br><span class="line">acl SSL_ports port 443</span><br><span class="line">acl Safe_ports port 80		# http</span><br><span class="line">acl Safe_ports port 21		# ftp</span><br><span class="line">acl Safe_ports port 443		# https</span><br><span class="line">acl Safe_ports port 70		# gopher</span><br><span class="line">acl Safe_ports port 210		# wais</span><br><span class="line">acl Safe_ports port 1025-65535	# unregistered ports</span><br><span class="line">acl Safe_ports port 280		# http-mgmt</span><br><span class="line">acl Safe_ports port 488		# gss-http</span><br><span class="line">acl Safe_ports port 591		# filemaker</span><br><span class="line">acl Safe_ports port 777		# multiling http</span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line">#http_access deny !Safe_ports</span><br><span class="line">#http_access deny CONNECT !SSL_ports</span><br><span class="line">http_access allow localhost manager</span><br><span class="line">http_access deny manager</span><br><span class="line">http_access deny to_localhost</span><br><span class="line">http_access allow localnet</span><br><span class="line">http_access allow localhost</span><br><span class="line">http_access allow all</span><br><span class="line">http_port 3128</span><br><span class="line">cache_dir ufs &#x2F;var&#x2F;spool&#x2F;squid 100 16 256</span><br><span class="line">coredump_dir &#x2F;var&#x2F;spool&#x2F;squid</span><br><span class="line">refresh_pattern ^ftp:		1440	20%	10080</span><br><span class="line">refresh_pattern ^gopher:	1440	0%	1440</span><br><span class="line">refresh_pattern -i (&#x2F;cgi-bin&#x2F;|\?) 0	0%	0</span><br><span class="line">refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880</span><br><span class="line">refresh_pattern .		0	20%	4320</span><br></pre></td></tr></table></figure>
<p>注释掉http_access deny !Safe_ports和http_access deny CONNECT !SSL_ports，http_access allow all这样就相当于无限制访问</p>
<p>建立文件夹以存放docker的日志和缓存:<br><code>mkdir -p /app/docker-squid/&#123;logs,data,etc&#125;</code></p>
<p>把配置文件拷贝到etc目录下:<br><code>cp /software/squid.conf.1 /app/docker-squid/etc/squid.conf</code></p>
<p>新建docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">squid-all:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">squid-all</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">datadog/squid</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">3128</span><span class="string">:3128</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/docker-squid/logs:/var/log/squid</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/docker-squid/data:/var/spool/squid</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/docker-squid/etc/squid.conf:/etc/squid/squid.conf</span></span><br></pre></td></tr></table></figure>
<p>使用的是hub.docker.com上的第三方镜像</p>
<p>使用docker创建容器：<br><code>docker-compose -f docker-compose.yml -d up</code></p>
<p>测试OK</p>
<h3 id="使用dstdomain设置访问网页白名单"><a href="#使用dstdomain设置访问网页白名单" class="headerlink" title="使用dstdomain设置访问网页白名单"></a>使用dstdomain设置访问网页白名单</h3><p>配置如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acl localnet src 10.0.0.0&#x2F;8	# RFC1918 possible internal network</span><br><span class="line">acl localnet src 172.16.0.0&#x2F;12	# RFC1918 possible internal network</span><br><span class="line">acl localnet src 192.168.0.0&#x2F;16	# RFC1918 possible internal network</span><br><span class="line">acl localnet src fc00::&#x2F;7       # RFC 4193 local private network range</span><br><span class="line">acl localnet src fe80::&#x2F;10      # RFC 4291 link-local (directly plugged) machines</span><br><span class="line">acl SSL_ports port 443</span><br><span class="line">acl Safe_ports port 80		# http</span><br><span class="line">acl Safe_ports port 21		# ftp</span><br><span class="line">acl Safe_ports port 443		# https</span><br><span class="line">acl Safe_ports port 70		# gopher</span><br><span class="line">acl Safe_ports port 210		# wais</span><br><span class="line">acl Safe_ports port 1025-65535	# unregistered ports</span><br><span class="line">acl Safe_ports port 280		# http-mgmt</span><br><span class="line">acl Safe_ports port 488		# gss-http</span><br><span class="line">acl Safe_ports port 591		# filemaker</span><br><span class="line">acl Safe_ports port 777		# multiling http</span><br><span class="line">acl Safe_ports port 8080        # qyweixin client login</span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line">acl whitelist dstdomain &quot;&#x2F;app&#x2F;squid&#x2F;etc&#x2F;whitelist&quot;</span><br><span class="line">http_access deny !whitelist</span><br><span class="line">#http_access deny !Safe_ports</span><br><span class="line">#http_access deny CONNECT !SSL_ports</span><br><span class="line">http_access allow localhost manager</span><br><span class="line">http_access deny manager</span><br><span class="line">http_access deny to_localhost</span><br><span class="line">http_access allow localnet</span><br><span class="line">http_access allow localhost</span><br><span class="line">http_access deny all</span><br><span class="line">http_port 3129</span><br><span class="line">cache_mem 64 MB</span><br><span class="line">cache_swap_low 80</span><br><span class="line">cache_swap_high 97</span><br><span class="line">cache_dir ufs &#x2F;app&#x2F;squid&#x2F;var&#x2F;cache&#x2F;squid 512 16 256</span><br><span class="line">cache_effective_user squid</span><br><span class="line">cache_effective_group squid</span><br><span class="line">refresh_pattern ^ftp:		1440	20%	10080</span><br><span class="line">refresh_pattern ^gopher:	1440	0%	1440</span><br><span class="line">refresh_pattern -i (&#x2F;cgi-bin&#x2F;|\?) 0	0%	0</span><br><span class="line">refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880</span><br><span class="line">refresh_pattern .		0	20%	4320</span><br></pre></td></tr></table></figure><br>增加了：<br><code>acl whitelist dstdomain &quot;/app/squid/etc/whitelist&quot;
http_access deny !whitelist</code></p>
<p>通过whitelist文件设置白名单，禁止白名单外的地址访问<br>whitelist设置的白名单地址可以是全域名地址，也可以是通配：<br>.qq.com<br>.jiandaoyun.com<br>.tbk.cn<br>.jdycdn.com<br>.qpic.cn<br>.qlogo.cn<br>.就是代表通配</p>
<h2 id="squid日志分析"><a href="#squid日志分析" class="headerlink" title="squid日志分析"></a>squid日志分析</h2><h3 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h3><p><code>yum install -y httpd</code></p>
<p><code>systemctl enable httpd</code></p>
<p><code>systemctl start httpd</code></p>
<p>检查端口:<br><code>ss -tunlp | grep httpd</code></p>
<p>测试：<br>浏览器访问<a href="http://192.168.1.200">http://192.168.1.200</a>（服务器地址）</p>
<h3 id="安装sarg"><a href="#安装sarg" class="headerlink" title="安装sarg"></a>安装sarg</h3><p><code>tar zxf sarg-2.4.0.tar.gz</code></p>
<p><code>cd sarg-2.4.0</code></p>
<p><code>./configure \</code></p>
<p><code>--prefix=/app/sarg-2.4.0</code></p>
<p><code>enable-extraprotection</code></p>
<p>编译安装:<br><code>make &amp;&amp; make install</code></p>
<p>创建软连接<br><code>cd /app</code></p>
<p><code>ln -s sarg-2.4.0 sarg</code></p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><code>vi /app/sarg/etc/sarg/sarg.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access_log &#x2F;app&#x2F;squid&#x2F;var&#x2F;logs&#x2F;access.log  # squid的访问日志位置</span><br><span class="line">title &quot;Squid User Access Reports&quot;  # 网页标题</span><br><span class="line">output_dir &#x2F;var&#x2F;www&#x2F;html&#x2F;squid  # 分析报告的存放位置</span><br><span class="line">user_ip no # 不使用IP代替用户ID</span><br><span class="line">topuser_sort_field BYTES reverse # 升序排列</span><br><span class="line">user_sort_field BYTES reverse</span><br><span class="line">exclude_hosts &#x2F;app&#x2F;sarg&#x2F;noreport  # 设置不生成报告的主机</span><br><span class="line">overwrite_report no</span><br><span class="line">mail_utility mailx # 指定发邮件命令</span><br><span class="line">charset UTF-8</span><br><span class="line">weekdays 0-6 # 指定top排序星期周期</span><br><span class="line">hours 7-12,14,16,18-20  # 指定top排序时间周期</span><br><span class="line">www_document_root &#x2F;var&#x2F;www&#x2F;html # 网页根目录</span><br></pre></td></tr></table></figure>
<p>建立不生成报告的主机列表文件<br><code>touch /app/sarg/noreport</code></p>
<p>按小时生成squid流量报表</p>
<p>新建一个sh文件:<br><code>vim /root/squid-hours.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">Date=$(date -d <span class="string">&quot;1 hours ago&quot;</span> +<span class="string">&quot;%y%m%d%H&quot;</span>)</span><br><span class="line">/app/squid/sbin/squid -k rotate</span><br><span class="line">sleep 10</span><br><span class="line">Squiddir=<span class="string">&#x27;/app/squid/var/logs&#x27;</span></span><br><span class="line">Access=<span class="string">&#x27;access.log.*&#x27;</span></span><br><span class="line">/bin/mv <span class="variable">$&#123;Squiddir&#125;</span>/<span class="variable">$&#123;Access&#125;</span> <span class="variable">$&#123;Squiddir&#125;</span>/access<span class="variable">$&#123;Date&#125;</span>.<span class="built_in">log</span></span><br><span class="line">/app/sarg/bin/sarg -o /var/www/html/hours  -l  <span class="variable">$&#123;Squiddir&#125;</span>/access<span class="variable">$&#123;Date&#125;</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>创建计划任务执行sarg记录，只在上班时间执行。<br><code>crontab -e</code></p>
<p><code>0 9,10,11,12,13,14,15,16,17,18,19 * * * /root/sarg-hour.sh</code></p>
<h3 id="验证访问"><a href="#验证访问" class="headerlink" title="验证访问"></a>验证访问</h3><p><a href="http://192.168.1.200/squid-reports/">http://192.168.1.200/squid-reports/</a></p>
<h2 id="ss5配置"><a href="#ss5配置" class="headerlink" title="ss5配置"></a>ss5配置</h2><p>squid只支持http和https类型的代理，某些应用需要用到socks5代理，这时需要配置上ss5</p>
<p>安装环境：<br><code>yum install pam-devel openldap-devel openssl-devel</code></p>
<p><code>yum -y install gcc automake make pam-devel openldap-devel cyrus-sasl-devel</code></p>
<p>下载ss5：<br><code>wget http://downloads.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</code></p>
<p>安装：<br><code>tar -xzvf ss5-3.8.9-8.tar.gz</code></p>
<p><code>cd ss5-3.8.9</code></p>
<p><code>./configure</code></p>
<p><code>make</code></p>
<p><code>make install</code></p>
<p>配置无用户认证方式<br><code>vim /etc/opt/ss5/ss5.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth    0.0.0.0&#x2F;0               -               -</span><br><span class="line">permit -    0.0.0.0&#x2F;0    -    0.0.0.0&#x2F;0    -    -    -    -    -   </span><br></pre></td></tr></table></figure>
<p>配置用户认证方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth    0.0.0.0&#x2F;0               -               u</span><br><span class="line">permit -    0.0.0.0&#x2F;0    -    0.0.0.0&#x2F;0    -    -    -    -    -</span><br><span class="line"></span><br><span class="line">cat &#x2F;etc&#x2F;opt&#x2F;ss5&#x2F;ss5.passwd</span><br><span class="line">test test</span><br></pre></td></tr></table></figure>
<p>启动服务：<br><code>chmod a+x /etc/init.d/ss5</code></p>
<p><code>systemctl start ss5</code></p>
<p>查看端口:<br><code>ss -tunlp | grep ss5</code></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>叙利亚，现实版的旧中国</title>
    <url>/archives/588cdfd2/</url>
    <content><![CDATA[<p><img src="/archives/588cdfd2/1.png" alt=" "></p>
<p>原创 一棵青木 远方青木</p>
<p>叙利亚，如今地球上最苦难的国家，它的首都大马士革曾经是地球上最辉煌的城市之一。</p>
<blockquote>
<p>“人间若有天堂，大马士革必在其中；<br>天堂若在天空，大马士革必与之齐名。“</p>
</blockquote>
<p>这是一句谚语，描述的是很久以前的大马士革，<font color="red">但不是今天。</font></p>
<p>今天的叙利亚，<font color="red">总人口才2240万人，但寄人篱下的难民数量已经达到600万，整个国家都快被打成了废墟。</font></p>
<p>2020年12月1日，在叙利亚的难民营地里，一群孩子在追逐运输垃圾的车辆，然后在新运来的垃圾里翻找食物。</p>
<p>据统计，在叙利亚600万的难民里，至少150万难民是儿童。</p>
<div><iframe class="video_iframe rich_pages" data-vidtype="2" data-mpvid="wxv_1643011227498921993" data-cover="http%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FR5G41XEd3GguD3yDQbZpZcd5S8m1ygVwtO1Xl3MSr4ibQn6KKWibHAzNLQNLQDDuLECNvCiaK9Xq8niad7icibYkE64w%2F0%3Fwx_fmt%3Djpeg" allowfullscreen frameborder="0" data-ratio="1.7777777777777777" data-w="1920" data-src="https://mp.weixin.qq.com/mp/readtemplate?t=pages/video_player_tmpl&amp;action=mpvideo&amp;auto=0&amp;vid=wxv_1643011227498921993"></iframe></div>

<p>为何叙利亚人活得如此悲惨，还要从2010年说起。</p>
<p>2010年12月，阿拉伯之春爆发，在整个阿拉伯地区爆发了所谓的茉莉花革命，连锁波及了很多阿拉伯国家。</p>
<p>起因，是突尼斯的一起城市小贩自焚事件，欧美势力插手后，在向往欧美的公知带领下，迅速演变成了大规模暴力反政府冲突，进而掀翻了现任政府。</p>
<p>2011年1月16日，茉莉花革命蔓延到叙利亚，反对派们到处找理由。</p>
<p>2011年3月，一名学生在街头涂鸦反政府内容被逮捕，引发了公知们的大规模抗议，进而演变成了武装冲突。</p>
<p>而欧美势力，趁机给反政府力量提供大量的资金和武器弹药，鼓励他们掀翻现任政府。</p>
<p>然后，就引发了全面内战。</p>
<font color="red">很小的事情，就可以成为撬动一个国家覆灭的支点。</font>

<p>很多人纠结于香港暴乱的起因。</p>
<p>但阿拉伯的例子告诉我们，<font color="red">什么起因根本不重要，只要美国想在后面搞事，你不管做什么都会有事，随便选个社会矛盾都可以当支点。</font></p>
<p>除非你举国上下一点矛盾都没有，但这是不可能的，圣人治国都做不到。</p>
<p>阿拉伯之春迅速掀翻了很多中东国家，但叙利亚政府却异乎寻常的顽强。</p>
<p>最开始的时候，欧美国家向叙利亚反政府武装（叙利亚自由军）提供了大量的武器和后勤补给，直接在土耳其、约旦等国设立了自由军的训练营地。</p>
<p>训练完毕的反政府战士，携带大量的军事物资，源源不断的的进入了叙利亚。</p>
<p>反政府力量坚定的认为，只要掀翻了现任政府，叙利亚人民就会更加的富强。</p>
<p>双方围绕各大城市展开了鏖战。</p>
<p>但和后面的大战相比，一开始的战斗只是热身赛，反政府武装只是仗着训练和补给营地都在境外才避免了被剿灭的命运。</p>
<p>2013年，阿拉伯极端武装力量插手了叙利亚内战，什么ISIS极端武装，车臣极端武装都来了。</p>
<p>为首的ISIS武装势如破竹，正面击败了政府军主力，一度占据了整个叙利亚80%的土地，并宣布建立了“伊斯兰国”。</p>
<p>欧美国家一看极端武装的战斗力这么强，转眼就把那些所谓向往欧美自由的反政府力量给抛在了一边。</p>
<p>那群公知真的是太废了，打了2年都没打出个眉目，白白浪费那么多资金和武器。</p>
<p>还是ISIS他们省钱，直接把叙利亚这事给摆平了。</p>
<p>虽然他们都是恐怖分子，但<font color="red">象征性的打击一下就可以了。</font></p>
<font color="red">至于ISIS这群极端武装自由还是不自由，和欧美国家有什么关系。</font>

<p>当初搞乱叙利亚，就是为了拔除这个俄罗斯的盟国。</p>
<p>只要能达到掀翻现任政府这个目的，采取什么手段和过程那都是次要的。</p>
<p>把叙利亚让给极端武装控制，欧美国家觉得没什么。</p>
<p>但俄罗斯不乐意了。</p>
<p>因为这群极端武装成了车臣恐怖分子的大本营，亲不亲美先不谈，<font color="red">但肯定是极端反俄。</font></p>
<p>反政府武装好歹还能正常对话，这群恐怖分子真的连对话都做不到。</p>
<p>2015年，俄罗斯直接大规模军事介入叙利亚，发起对ISIS武装力量的直接打击。</p>
<p>不仅是在帮叙利亚政府，也是在帮自己。</p>
<p>随后的日子，叙利亚政府军节节胜利，ISIS武装节节败退。</p>
<p>到了2018年3月，政府军发起了收复东古塔的行动，如果成功，那么平定全国指日可待，这下子美国坐不住了。</p>
<p>这么多年在叙利亚的各路反政府力量身上投入了那么多钱和物资，怎么能这么打水漂。</p>
<p>阿拉伯之春毫不费力的掀翻了那么多国家，怎么就你叙利亚那么难搞，就不能乖乖倒台，给阿拉伯之春这么好的行动画上一个圆满的句号么？</p>
<p>2018年4月7日，在反政府武装控制的杜马镇发生了一起恐怖袭击事故，导致数十名平民丧生。</p>
<p>西方国家第一时间对此事做出结论，这是叙利亚政府军使用化学武器对叙利亚平民进行的大规模屠杀。</p>
<p>2018年4月9日，联合国安理会就叙利亚杜马镇“化武事件”召开特别会议。</p>
<p>叙利亚常驻联合国大使贾法里在会场上频频反击美英等国的代表。</p>
<p>他说<font color="red">这些神奇的化学武器从来不会去攻击有武器的人，永远都只找女人和孩子，这些化学武器已经学会区分武装人员了，而救援人员也从来不需要穿防护服。</font></p>
<p><img src="/archives/588cdfd2/2.png" alt=" "></p>
<p>贾法里犀利的外交言辞征服了全世界的媒体，大家都认为叙利亚政府军确实没有使用化武屠杀平民。</p>
<p>但贾法里没有征服联合国安理会。</p>
<p>而英美代表在贾法里刚发言没多久就直接离场了，根本没兴趣听贾法里后面说了什么，因为那不重要。</p>
<p>反正你说什么都是没用的。</p>
<p>当年覆灭伊拉克的所谓证据，也许只是一罐洗衣粉，但伊拉克这种小国灭就灭了，证据对不对无所谓的。</p>
<p><img src="/archives/588cdfd2/3.png" alt=" "></p>
<p>最终，美英法以叙利亚有大规模杀伤性武器为由，决定进攻叙利亚。</p>
<p>听到这个消息后，贾法里一瞬间老了十岁。</p>
<p><img src="/archives/588cdfd2/4.png" alt=" "></p>
<p>贾法里是一位非常优秀的外交官，但<font color="red">弱国无外交。</font></p>
<p>2018年4月14日夜间，一道异常亮眼的光芒划过了叙利亚首都大马士革的天空。</p>
<p>这天晚上，叙利亚遭到了英法美足足110枚战斧式导弹的袭击。</p>
<p><img src="/archives/588cdfd2/5.png" alt=" "></p>
<p>次日，特朗普发表推特“炫耀”成果：</p>
<blockquote>
<p>“昨晚完美地执行了对叙利亚的“精准打击”，感谢英法两国明智的举措以及优秀的军事力量，结果很棒，任务完成！”</p>
</blockquote>
<p><img src="/archives/588cdfd2/6.png" alt=" "></p>
<p>随后，欧美势力大规模直接介入叙利亚战场。</p>
<p>土耳其、以色列等各方势力也纷纷介入。</p>
<font color="red">叙利亚全境成了个大战场，被称之为“微型世界大战”。</font>

<p>各路互相敌对，又互为盟友的势力，犬牙交错，在叙利亚的土地上大打出手。</p>
<p><img src="/archives/588cdfd2/7.png" alt=" "></p>
<p>连隔壁的土耳其，前前后后都向叙利亚出兵了近10万人。</p>
<p>事态发展到这里，和叙利亚政府军及反政府军已经一毛钱关系都没有了，全球的各路势力在叙利亚这里杀红了眼，谁都不肯退让半步。</p>
<p>而叙利亚政府，根本没有能力阻止他们之间的开战。</p>
<font color="red">和中国当年的清朝时期，何其的相似。</font>

<p><img src="/archives/588cdfd2/8.png" alt=" "></p>
<p>在战争的摧残下，整个叙利亚迅速的变成了一片废墟。</p>
<p><img src="/archives/588cdfd2/9.png" alt=" "></p>
<p><img src="/archives/588cdfd2/10.png" alt=" "></p>
<p><img src="/archives/588cdfd2/11.png" alt=" "></p>
<p>叙利亚的父母们，抱着孩子在废墟中逃亡。</p>
<p><img src="/archives/588cdfd2/12.png" alt=" "></p>
<p>每一天，他们都生活在炮火的威胁之下，已经很久没有正常的生活了。</p>
<p><img src="/archives/588cdfd2/13.png" alt=" "></p>
<p>他们发出了灵魂反问：我们到底做错了什么？</p>
<p><img src="/archives/588cdfd2/14.png" alt=" "></p>
<p>不得已逃难的叙利亚儿童死在海滩上的照片，震动了全世界还有良知的人。</p>
<p><img src="/archives/588cdfd2/15.png" alt=" "></p>
<p>一名叙利亚女童面对记者的摄像机镜头，误认为是武器，哭着举手投降。</p>
<font color="red">那懂事的样子，真的很让人心碎。</font>

<p><img src="/archives/588cdfd2/16.png" alt=" "></p>
<p>一名叙利亚的女孩曾经说自己最害怕的东西是炮弹爆炸的声音。</p>
<p><img src="/archives/588cdfd2/17.png" alt=" "></p>
<p>但经历长期的炮弹洗礼后，新生代的叙利亚儿童，已经不怕炮弹了。</p>
<div><iframe class="video_iframe rich_pages" data-vidtype="2" data-mpvid="wxv_1643011983228616707" data-cover="http%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FR5G41XEd3GguD3yDQbZpZcd5S8m1ygVwgNibaNXynAc4StmtLFyo5Vznz1PZzmopStTuJXI4WCohhcwaJPezheQ%2F0%3Fwx_fmt%3Djpeg" allowfullscreen frameborder="0" data-ratio="0.5607476635514018" data-w="720" data-src="https://mp.weixin.qq.com/mp/readtemplate?t=pages/video_player_tmpl&amp;action=mpvideo&amp;auto=0&amp;vid=wxv_1643011983228616707"></iframe></div>

<p>在叙利亚交战区，一包奶糖的标价已经超过了100美元，这对于贫困落后的叙利亚人民来说简直就是个天价。</p>
<p>一名吃到记者随身携带大白兔奶糖的叙利亚儿童，直接就哭了出来。</p>
<p>而同样的奶糖，中国儿童可以随便吃。</p>
<p>从2000到2020年，美国在全世界掀起了各种颜色革命，在多个国家扶持了反政府力量，借他们之手搞垮了很多国家的政权。</p>
<p>颠覆成本非常的低，而那些按美国指示乖乖破坏自己国家的人，还坚定的认为自己是为本国人民谋福利。</p>
<p>但实际上，被颠覆的国家那么多，所有被美国直接或间接推翻的国家中，<font color="red">有哪一个实现了民主和自由？有哪一个国家的国民过上了富裕的日子？</font></p>
<p>是伊拉克还是叙利亚，是利比亚还是乌克兰？</p>
<font color="red">反例遍地都是，正面案例一个都没有。</font>

<p>中国也有这样的人，而且一直都有。</p>
<p><img src="/archives/588cdfd2/18.png" alt=" "></p>
<p>如果被这样的人掌控了国家，那么围着垃圾堆寻找食物的，可能就是我们自己的孩子了。</p>
<p><img src="/archives/588cdfd2/19.png" alt=" "></p>
<p>叙利亚很幸运，有了一个很优秀的外交官，短短时间内就说服了全世界。</p>
<p>但他依然无法阻止自己的祖国被炸成废墟。</p>
<p>他遭遇的这一切，中国都遭遇过，<font color="red">上一个叙利亚就是中国。</font></p>
<p>正因为我们经历过，所以感同身受。</p>
<p>叙利亚沦为列强战场，那是因为这符合列强的需要。</p>
<font color="red">叙利亚人民怎么想的，这不重要，因为弱国没资格有想法。</font>

<p>确实有很多叙利亚的英雄为了祖国牺牲了一切，他们不怕死，但叙利亚的儿童依然过的很悲惨。</p>
<font color="red">很可惜，不是每一个混乱贫弱的国家，都能出现一个毛泽东。</font>

<blockquote>
<p>“如果认清了中国是一个许多帝国主义国家互相争夺的半殖民地，就会明白全世界何以只有中国有这种统治阶级内部互相长期混战的怪事，而且何以混战一天激烈一天，一天扩大一天，何以始终不能有一个统一的政权。”<br>—(《毛泽东选集》第一卷《星星之火，可以燎原》)</p>
</blockquote>
<p>我们并非生在和平年代，只是生在了和平的国家。</p>
<p><a href="https://mp.weixin.qq.com/s/WmlueZpyJpbR1Xzp6pL8bA##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>年利润100%的合法生意，99%的人都能干倒闭</title>
    <url>/archives/54bfe784/</url>
    <content><![CDATA[<p><img src="/archives/54bfe784/1.png" alt=" "></p>
<p>原创 一棵青木  远方青木</p>
<p>这篇文章首发于2019年，我早就说了奶茶店是骗局了，来一个坑一个。</p>
<p>但没想到还是有人被坑，而且还被坑的这么惨。。。</p>
<p><img src="/archives/54bfe784/2.png" alt=" "></p>
<p>看完这个新闻后，我决定把以前写的这篇文章，重新发一遍，看看能不能拯救多一点人。</p>
<center>~~~</center>

<p>很多人积累了一点财富之后，都不满足于将钱放在银行，都在打听怎么投资，最好是一年能赚一倍那种。</p>
<p>有没有这样的好生意呢？还真有。</p>
<p>马克思曾经说过，为了100％的利润，资本就敢践踏一切人间法律。</p>
<p>这句话已经过时了，现在的中国，<font color="red">年利润100%的生意，比比皆是，而且还是合法的！</font></p>
<center><font color="blue" size="5">1</font></center>

<p>前几天，和亲戚聊天，我大姨和我说她退休后想开一个餐厅。</p>
<p>我大惊失色，问她为什么会有这种想法。</p>
<p>她说，餐厅赚钱快啊，我做菜又好吃，投资又不大，做这个肯定赚钱。</p>
<p>开餐厅的确很赚钱，我大姨做菜的手艺确实也很棒，餐厅的投资确实也不大，但是开餐厅，真的未必赚钱。</p>
<p>不少人创业，第一个想到的就是餐饮业，因为餐饮业的入行门槛相当低，<font color="red">看起来谁都可以干，而且非常暴利。</font></p>
<p>而投身于这一行的创业者，总觉得自己具有非常大的优势，比如自己有个秘方、能挖来几个厨师、懂选址、具备丰富的餐饮工作经历、有特色食材资源等。</p>
<p>他们认为自己凭这些，就能开好一家餐馆了，<font color="red">很快就能做大做强，然后冲出亚洲。</font></p>
<p>真是想太多，餐饮业的确很暴利，<font color="red">餐饮业的平均年利润，是100%，非常惊人，但是这个钱，不是那么好赚的。</font></p>
<p>你震惊了，我的钱存银行，一年才4%收益，投个P2P才8%，餐饮业的利润居然是100%，这钱怎么就不好赚了，风险再大都值得啊，还能比P2P更大？</p>
<p>还真被你猜对了，<font color="red">投资餐饮业，风险比P2P要大多了。</font></p>
<center><font color="blue" size="5">2</font></center>

<p>1989年，俏江南创始人张兰扔下8岁的汪小菲到加拿大打黑工，洗盘子擦桌子什么都干，白手起家，这种暗无天日的黑工生活，她干了三年。</p>
<p>1992年，张兰带着打黑工赚的2万美元，回国创业，在北京开了一家“阿兰餐厅”，发财了。</p>
<p>1995年，赚了大钱的张兰，在亚运村开了一家“百鸟园花园鱼翅海鲜大酒楼”，到1997年，这个酒楼的日营业额达到了50万元，年营业额近2亿人民币。</p>
<p>做过餐饮，知道餐饮业毛利率的，都知道这个营业额带来的利润有多恐怖，那才是1997年。</p>
<p>日进斗金的张兰，把这个大酒楼给卖了，创办了“俏江南”，立志做出自己的品牌。</p>
<p>2007年，俏江南年营收达到10亿元。</p>
<p>2008年，俏江南成为奥运会唯一指定中餐馆。</p>
<p>2009年，张兰荣登胡润餐饮富豪榜第三名。</p>
<p>2010年11月，张兰之子汪小菲和大S在北京订婚。</p>
<p>俏江南，想当餐饮界的LV。</p>
<p><img src="/archives/54bfe784/3.png" alt=" "></p>
<p>开个餐厅而已，张兰怎么就赚到了数十亿身家呢，这就要从餐饮业的暴利说起了。</p>
<p>普通的餐厅，平均回本周期大概是15~18个月左右，如果你和别人说你想开一个新餐厅，预估2年才能回本，让别人投钱入股，那是没有人会搭理你的。</p>
<p>因为在你做投资预估时，一个狂吹牛的阶段，都只敢把回本周期吹成24个月，比市场平均值还低，别人要真投了钱，死都不知道怎么死的。</p>
<p>而海底捞，把回本周期做到了6~12个月，<font color="red">平均值大概是10个月左右。</font></p>
<p>回本周期10个月是什么意思呢，就是你今天投资100万，从钱到账那一天开始算，连装修、开业、培训员工的时间都算上，扣除食材成本、员工工资、租金、税费后，平均一个月可以给你赚10万块，熬10个月不死，你就赚回了初始本金，后面的利润，就是无风险躺着数钱了。</p>
<p>大厨不是你，大堂经理不是你，服务员也不是你，你只需要投资100万，每个月付完他们工资和一切成本，还可以净赚10万到手。</p>
<font color="red">爽不爽，月入10万的金领生活，正在对你招手。</font>

<p>而你需要投资的金额，仅仅只够在北京买一个厨房，还不速来。</p>
<p><img src="/archives/54bfe784/4.png" alt=" "></p>
<p>哪怕你做不到海底捞那种程度，搞个餐饮业的平均值，15个月左右回本也行，<font color="red">只需要我投资150万，一个月也可以净赚10万，从此过上衣食无忧的资本家生活，狠狠的剥削那些大厨和服务员。</font></p>
<p>你想得美哦，100多万而已，你以为凭大厨的工资就攒不出来？</p>
<p>就算不开大店，花二三十万开个小店也是没问题的，他自己为啥不会去开店？</p>
<font color="red">是他傻，还是你觉得他傻？</font>

<p>投资创业期间，到底是老板剥削员工，还是员工剥削老板，那真得看情况，不好说的。</p>
<p>还记得那个巅峰时年纳税上亿，雇佣20几万员工，气吞万里如虎的俏江南么。</p>
<p>因经营不善，张兰的俏江南后来被债权人给强制卖掉了。</p>
<center><font color="blue" size="5">3</font></center>

<p>按投资回报周期12个月来算，年利润是100%，投资1个亿，只要按这种利润率稳定赚10年，你就有1024亿。</p>
<p>如果你能稳定赚20年，你就会拥有1024乘以1024个亿，这数额太大，我不敢算。</p>
<p>为啥没有出现过这样的巨无霸餐饮集团，因为无数网红餐厅，前赴后继的关门了，俏江南不是第一个，小肥羊也不是最后一个。</p>
<p>海底捞火锅厉害吧，回本周期短的吓人，按理说这样的公司不说统一中国餐饮界，至少得统一中国火锅届吧。</p>
<p>但实际上，中国的火锅市场极度分散，冠军海底捞，仅占据总市场份额的2.2%。</p>
<p><img src="/archives/54bfe784/5.png" alt=" "></p>
<p>同时，海底捞还是全球中式餐饮市场份额第一名，占中式餐饮总份额的0.2%。</p>
<p>为什么海底捞利润率这么高，居然只有这么一点市场份额，它不会扩张么？</p>
<p>因为海底捞发展的时间短啊，以前的餐饮第一名可不是海底捞，而是俏江南。</p>
<p>海底捞什么时候会倒我不知道，但是它早晚会倒，因为它如果能再维持这种速度发展10年以上，整个地球都是它的了。</p>
<p>中国至今没有一个餐饮龙头，能活10年之久。</p>
<center><font color="blue" size="5">4</font></center>

<p>一个餐厅，最核心的就是菜品，这些菜品都是厨师做出来的，按理说，厨师应该是餐厅的核心竞争力。</p>
<p>依这个逻辑，厨师开餐厅，胜率应该是非常高的。</p>
<p>很多厨师，其实也是这么想的，大厨工资本来就高，攒几十万轻轻松松，回老家开个小餐馆自己当老板，多爽。</p>
<p>餐饮界有个定律，10个厨师开餐厅，9个会倒闭。</p>
<p>不开餐厅的人，永远不知道开店有多难，绝对不是把菜做好就万事大吉的。选址、装修、消防、营销，每一个门槛都能弄死一批新老板。</p>
<p>最难的，还是带团队，管理之所以能成为一门学问，正是因为他真的很难。</p>
<p>餐馆招募的普通员工，老板不盯着，完全没有积极主动性，怎么偷工减料怎么来，提高工资、提高分红、承诺股权，这些手段完全无法激发他们的主观能动性，<font color="red">他们什么都想要，但是什么都干不好。</font></p>
<font color="red">高薪如果一定能养廉，治天下就太简单了。</font>我随便拉一个微信员工，用30亿的年薪激励他，他也变不成张小龙。

很多餐厅老板，就是死在管理不善上，最后一核算，开个餐馆赚的钱，扣掉本钱后还不够自己工资。

开个餐馆，冒着赔本的风险，操最多的心，最后一算账，自己的收入还没员工的高，这样的餐馆，当然只有倒闭一条路，老板出去打工赚钱。

其实能收回本金的餐馆已经很不错了，现在出现了很多“三月死”的饭店，意思就是开张三个月，生意不好，只能关门，至于本钱，当然就打水漂了。

大家的小区周围，都一定出现过这种餐厅，你在开业大酬宾的时候光顾一次，过几个月刚想第二次尝尝，发现已经倒闭了。。。

三个月就血本无归的生意，风险当然比P2P大。

干餐饮，至少要开满一年多才能回本，但你冒那么大风险，只是为了回本么？

开餐厅想真正赚到钱，至少要存活3年以上，中间不能有任何差错，这很难。99%的新人都做不到。

刘强东人生中的第一次创业，开的就是一家小饭馆，最后亏了20多万，<font color="red">90年代的20多万。</font>

<p>绝大部分人干餐饮，都死的很惨，新餐馆像流水一样的出现，又像流水一样的倒闭。</p>
<center><font color="blue" size="5">5</font></center>

<p>奶茶店，是餐饮界中的一个异类，这个新兴起的网红产业，曾经遍地黄金。</p>
<p>当年，奶茶店是不折不扣的暴利行业，回本周期曾经短到惊人的3个月。</p>
<p>传统珍珠奶茶的毛利率，达到90%以上，而即便是用水果鲜奶这种上等原料制作出来的新一代奶茶，毛利率也有70%以上。</p>
<p><img src="/archives/54bfe784/6.png" alt=" "></p>
<p>开个火锅店动辄500~1000平米，而开个奶茶店只要5~20平米就可以了，投资那么低，利润那么高，营业额还不小，回本周期岂能不快。</p>
<font color="red">当年开奶茶店，确实是谁开谁赚钱，在风口上，猪都可以飞。</font>

<p>在利润的驱使下，大量的奶茶店，像韭菜一样长起来了，奶茶店的回本周期急速攀升，直到让人无法忍受。</p>
<p>2017年，是奶茶店盛极而衰的转折点，这一年，全国奶茶店开了9.6万家，倒闭7.8万家，存活率仅仅18.8%。</p>
<p><img src="/archives/54bfe784/7.png" alt=" "></p>
<p>那几年好多大学生辞职创业，首选就是奶茶店，后面的下场，就是全赔。。。</p>
<p>奶茶这玩意门槛太低了，谁都可以干，没有任何行政门槛，资金门槛也低的吓人。</p>
<p>既然门槛那么低，那就要问一下了，<font color="red">凭什么你发财呢？你长的很像王思聪么？</font></p>
<p>到了2017年，单纯的开奶茶店已经赚不到钱了，只会亏钱，能赚到钱的奶茶店，都有一个特征，就是创新出了新式爆款品种。</p>
<p>凭这个爆款饮品吸引了流量，才能赚到大钱，最典型的，就是喜茶、奈雪の茶、答案茶等。</p>
<p>但是奶茶配方太容易模仿了，抄袭简直不要太简单，所以短暂的火爆过后，虽然这些创造出爆款的茶饮还能靠品牌效应继续赚钱，但是明显越来越难。</p>
<p>奶茶界的规矩，一个爆款茶饮，最多6~12个月的生命周期，然后就会泛滥，最终逐步被消费者淘汰。</p>
<p>如果不能每年推出一个爆款，哪怕是喜茶这样的茶饮，也会迅速凋零。</p>
<p>鹿角巷曾是一家爆火的网红奶茶，最火时店门口放了个牌子：排队预计等5个小时。</p>
<p>但在开店不到15个月后，它在深圳的第一家门店就关门倒闭了。</p>
<p>在2018年，答案茶也曾火爆全网，一年之内加盟店高达500家，覆盖全国27省份。</p>
<p><img src="/archives/54bfe784/8.png" alt=" "></p>
<p>2019年，答案茶直接凉凉，现在你在中国再也见不到这个奶茶店了，它也成为了奶茶加盟的典型反面教材。</p>
<center><font color="blue" size="5">6</font></center>

<p>在奶茶市场搏杀白热化之后，面对越来越难赚钱的现状，一些人动起了歪脑筋。</p>
<p>做爆款茶饮太难，做品牌效应也太难，直接卖奶茶赚不到钱，怎么办呢？</p>
<p>奶茶业<font color="red">曾经短暂存在过的真实暴利，给了他们钻空子的机会。</font></p>
<font color="red">宣传奶茶创业，宣传奶茶暴利，灌输无脑发财的思想。</font>

<p>只需要交几万加盟费，就可以获得总部的一系列扶持，什么扶持都有，你要啥给啥，反正送佛送到家，总部免费培训你成为一名奶茶老板。</p>
<p>具体条款我就不列了，打开百度，一堆奶茶店加盟的广告，随手截一个给大家感受一下，这条件优惠的，我看了都心动。</p>
<p><img src="/archives/54bfe784/9.png" alt=" "></p>
<p>只要交了加盟费，你的财富由此起航。</p>
<p>既然真那么暴利，为啥不自己干，这么好的项目，银行为什么不贷款给他自己做？</p>
<p>等你真交了加盟费，一切就真相大白了。</p>
<p>除了房租是你自己交之外，装修由总部统一负责，当然，钱需要你出，设备总部统一配备，钱是你出，原材料也要用总部的，钱还是你出。</p>
<p>美其名曰保姆式培养，实质是在骗你手中的钱，开这个奶茶店，你赚不赚钱不重要，<font color="red">开业之前，总部就已经把钱给赚饱了。</font></p>
<p>当你开1个月的奶茶店之后，你就会深深意识到自己的无知和愚昧，贪婪蒙蔽了你的眼睛，让你看不到这个世界的险恶。</p>
<p>你不想玩了，想退钱，想回去好好上班，当个打工仔。</p>
<font color="red">想得美，交出去的钱还想拿回去，门都没有。</font>

<p>投资有风险难道不懂么？人家可是聘请了专业法务的，打官司你的胜率就是零。</p>
<p>奶茶加盟店，已经被普遍认为是骗局，甚至出现了“<font color="red">奶茶传销</font>”这一词汇，直接把奶茶加盟和传销骗局相提并论。</p>
<p>如果你现在还幻想开一家奶茶店当老板，从此走上财富自由之路，<font color="red">我建议你先喝杯冰镇奶茶冷静一下。</font></p>
<center><font color="blue" size="5">7</font></center>

<p>现在有很多媒体，为了吸引眼球，故意灌输成功学毒鸡汤，夸大创业的成果，隐藏创业的难度，拿成功的个例当成普遍现象，导致无数的人误入歧途。</p>
<p>而餐饮业，正是重灾区，因为这个行业，暴利和暴亏同时存在，最容易产生暴富神话和成功很容易的幻觉。</p>
<p><img src="/archives/54bfe784/10.png" alt=" "></p>
<font color="red">开一家餐馆的刺激程度，不亚于去澳门赌场。</font>

<p>而高风险高收益，其实是个伪命题，高风险未必一定带来高收益。</p>
<font color="red">人才干这事，只有高收益，而韭菜干这事，只有高风险。</font>

<p>创业，重点是创这个字，你必须跳出现有的维度，从更高的维度实现降维打击，你才可能创业成功。</p>
<p>你的眼光，至少要领先别人四五步，如果你做的东西，几年前就有人在干了，那不叫创业，叫做生意。</p>
<p>什么叫做生意呢，做生意就是不领先，只跟随，不享受风口红利，纯粹和你拼质量，拼成本，吃苦耐劳，质量优异，是做生意成功的唯一办法。</p>
<p>这个也很难，其实难度丝毫不亚于创业，<font color="red">成功的原因只有一个，死亡的原因千奇百怪。</font></p>
<p>99%以上的餐馆，活不过3年以上，所以整个餐饮行业的平均回本周期，才被压制在了15~18个月以内。</p>
<p>死亡率这么高的前提下，只有这么暴利，才会有人敢参与。</p>
<font color="red">一个行业如果看起来很暴利，而你又不是世界上第一个发现它的人，那就请你一定要注意了，里面一定有陷阱。</font>

<p>创业是一个注定只有少数人能成功的事情，和一系列的条件都有关，你有一个条件出现了短板，就只有死路一条。</p>
<p>现在蛊惑创业的毒鸡汤铺天盖地，我揭露一些潜在风险你们也未必信。</p>
<p>不过不管你信不信，听我一句劝，你创业可以，一定记住最多只用自己积蓄的一半去创业，哪怕看起来这个项目再诱人，也不要把身家性命全部砸进去。</p>
<p>尤其是在创业艰难的时候，绝对不要投入剩下的保命钱，不要认为挺过这关就好了，创业的难关一个接一个，根本没有尽头，永远都有下一关等着你，一旦哪一关你没熬过去，所有投入就全部打了水漂。</p>
<p>一旦你的积蓄耗光，你就会想到借贷，想到信用卡，想到抵押房产。</p>
<p>如果你这么做了，那么后果大概率就是<font color="red">妻离子散。</font></p>
<p>而如果你只用一半的积蓄去创业，那么哪怕失败，至少你还可以保持正常的生活。</p>
<font color="red">我不知道你和你的亲朋好友，有多少人曾经被朋友圈无处不在的创业毒鸡汤给洗脑，从而蠢蠢欲动。</font>

<p>希望看完我这篇文章之后，能够让你们稍微清醒一下，做足市场调研，有了充分把握再考虑创业的事情，因为这注定是九死一生的买卖。</p>
<p>人总是误会自己的擅长和不擅长，在自己不擅长的领域里，因为只看到些皮毛，就觉得很简单，自己完全可以。而在自己非常擅长的领域里，因为看到了更深处的困难和瓶颈，所以做事反而瞻前顾后，畏首畏尾。</p>
<p>我一贯主张创业最多用一半积蓄这个铁的原则，希望你们也是如此。这样能在最不利情况出现时，让你们少损失很多钱，<font color="red">有一个重整旗鼓再出发的机会。</font></p>
<font color="red">珍爱生命，拒绝朋友圈的那些创业毒鸡汤。</font>

]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈公有云，私有云，超融合，虚拟化，容器</title>
    <url>/archives/1dd74f7d/</url>
    <content><![CDATA[<p><img src="/archives/1dd74f7d/1.png" alt=" "></p>
<h2 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h2><p>通过互联网购买互联网云平台资源来满足企业业务需求：国内如阿里云，腾讯云等，国外如微软的Azure，亚马逊等；其中公有云平台有很多项目，包括虚拟云主机，域名，数据库，AI等。</p>
<h2 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h2><p>企业内部自建数据中心，拥有物理服务器，存储等硬件设备，通过openstack（大型），vmware，proxmox等软件平台来管理硬件资源，来达到私有云的效果。同时还可以租借第三方机房或物理服务器，通过运营商的独享专线和平台连接到该硬件资源，企业只需支付专线费用。</p>
<h2 id="超融合"><a href="#超融合" class="headerlink" title="超融合"></a>超融合</h2><p>就是几个（通常最低是三个节点或以上）节点，所谓的节点就是一台几U服务器大小的框架里面塞集成度比较高的硬件块，该硬件块性能较强，容量较大，而且节点可扩展，从而代替传统机架式服务器，使用厂商自研的软件平台如vmware，citrix，nutanix prism，smartx等平台来管理节点和集群，通过软件平台定义网络和存储来达到最大华空间资源利用。</p>
<h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p>以上所有云和超融合，虚拟化都是基础，都是通过把物理机或所谓的节点安装虚拟化层软件或系统来达到虚拟化的效果，最终是由一个软件平台来把这些物理资源整合成一个整体（资源池）来使用，也就是说无论你用虚拟桌面好还是连接到哪个共享好，都不用知道背后到底是哪台物理服务器，也无从知道，因为这这是资源池中分配的。现在比较流行的虚拟化技术是开源的KVM，VMWEARE的esxi，nutanix的ahv等。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器使软件应用程序与操作系统脱钩，从而为用户提供了一个干净而最小的Linux环境，同时在一个或多个隔离的“容器”中运行其他所有内容。容器的目的是启动一组有限的应用程序或服务（通常称为微服务），并使它们在独立的沙盒环境中运行。</p>
<p>容器分两种，一种是lxc，另外一个就是鼎鼎大名的docker，值得注意的是，LXC使用Namespace(名称空间)来实现进程隔离，同时使用内核自己的cgroup来解决并限制一个或多个进程中的CPU，内存，磁盘I / O和网络使用情况，理论上lxc效率会更好。</p>
<h2 id="OpenStack与虚拟机之间的关系"><a href="#OpenStack与虚拟机之间的关系" class="headerlink" title="OpenStack与虚拟机之间的关系"></a>OpenStack与虚拟机之间的关系</h2><p>OpenStack使用Python语言开发，是虚拟资源管理工具，他可以协助你搜集各种资源，并加以利用以及管理，实现物理资源的高效使用和安全。虚拟化物理机这个动作，OpenStack无法完成，需要一个中间层例如KVM、Xen、VMware等来基于硬件做资源的虚拟化，然后此时OpenStack通过各种API接口来接管这些资源。</p>
<p>OpenStack 主要针对 IaaS平台，以资源为中心，可以为上层的 PaaS 平台提供存储、网络、计算等资源。</p>
<p><img src="/archives/1dd74f7d/2.png" alt=" "></p>
<h2 id="与Docker和k8s的关系"><a href="#与Docker和k8s的关系" class="headerlink" title="与Docker和k8s的关系"></a>与Docker和k8s的关系</h2><ol>
<li><p>OpenStack：公认的云计算IaaS平台，其管理的核心目标对象是机器（虚拟机或物理机），当然也可以管理存储和网络，但那些也大都是围绕着机器所提供的配套资源。近年来容器技术火了之后，OpenStack也开始通过各种方式增加对容器的支持，但目前OpenStack还不被视为管理容器的主流平台。</p>
</li>
<li><p>Docker：这里我假定你指的是Docker engine（也叫做Docker daemon，或最新的名字：Moby），它是一种容器运行时（container runtime）的实现，而且是最主流的实现，几乎就是容器业界的标准。Docker是用来创建和管理容器的，它和容器的关系就好比KVM和虚拟机之间的关系。当然，Docker公司对Docker engine本身的定位和期望不仅仅在于在单机上管理容器，所以近年来一直在向Docker engine中加入各种各样的高级功能，比如：组建多节点的Docker集群、容器编排、服务发现，等等。</p>
</li>
<li><p>Kubernetes（k8s）：搭建容器集群和进行容器编排的主流开源项目（亲爹是Google），适合搭建PaaS平台。容器是Kubernetes管理的核心目标对象，它和容器的关系就好比OpenStack和虚拟机之间的关系，而它和Docker的关系就好比OpenStack和kvm之间的关系。一般来说，Kubernetes是和Docker配合使用的，Kubernetes调用每个节点上的Docker去创建和管理容器，所以，你可以认为Kubernetes是大脑，而Docker是四肢。</p>
</li>
</ol>
<h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><p>OpenStack是管理虚拟机的（web可视化平台，在linux里边部署配置），k8s是管理容器的（web可视化平台，在linux里边部署配置）；上层的应用是部署在容器上的，而一般容器又是创建在虚拟机上的，所以OpenStack是属于IaaS层面的，k8s是属于PaaS层面的，上层应用是属于SaaS层面的。</p>
<p><em>摘自<a href="https://www.cnblogs.com/chenbin93/p/13378181.html?utm_source=tuicool">https://www.cnblogs.com/chenbin93/p/13378181.html?utm_source=tuicool</a></em></p>
]]></content>
      <categories>
        <category>热点</category>
        <category>平台</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>劳动力价值归零、共产主义临界、星际争霸时代</title>
    <url>/archives/5d04ac6b/</url>
    <content><![CDATA[<p><img src="/archives/5d04ac6b/1.png" alt=" "></p>
<p>原创 微信公众号一棵青木 远方青木</p>
<p>今天，我打算和大家聊一点有趣的事情。</p>
<p>我以前考虑过一个问题，随着机器人技术越来越发达，人工智能越来越先进，普通人在未来还有存在的意义么？</p>
<p>刚发明的机器人是非常昂贵的，但只要技术提高到一定地步，机器人的制造成本就可以非常低廉，就好像一百年前的汽车和今天的汽车一样。</p>
<p>如果将来有一天，我们可以用很低的成本去制造机器人，比如说20万一个，而机器人又具备了很高的智慧，可以替代人类做绝大部分工作，那怎么办？</p>
<p>机器人可以干家务，可以当服务员，可以当工人，甚至还可以当工程师和医生，而且是不眠不休24小时不停干活。</p>
<p>由于机器人的知识承载量是无穷大的，智慧型机器人个个都是最顶级的医学专家，而且是全科医生，啥病都能看，连科室都不用分了。</p>
<font color="red">那普通人还能干啥，还能去哪找工作？</font>

<p>更可怕的是，机器人也是劳动力，它自己可以制造出更多的机器人。</p>
<p>每一个机器人，都拥有人类世界全部的知识，也可以从事任意一份工作，既能当建筑工人，也能当电站设计师，还能自己动手建立新的机器人工厂。</p>
<p>你把少量机器人扔到一个荒凉的星球上，它可以从无到有建立一个庞大的基地，里面有发电站、有工厂，机器人的数量会迅速从10个攀升到10万亿，一直达到这个星球的资源极限为止。 </p>
<p>而每一个机器人，都比普通人类要能干。</p>
<p><img src="/archives/5d04ac6b/2.png" alt=" "></p>
<font color="red">当机器人的供应极其充沛时，整个社会的劳动力价值就趋近于零。</font>

<p>这一天，我称之为<font color="red">共产主义临界。</font></p>
<center><font color="blue" size="5">1</font></center>

<p>资本主义制度和市场经济，已经被证实可以极大的解放生产力、促进生产力。</p>
<p>在私有制的前提下，工人在追逐奖金，资本家在追逐利润，所有人都在努力的创造价值。</p>
<p>出于对利润的追逐，资本家在不断的研发新技术，一切都是为了增加劳动效率。</p>
<p>自动化一直在摧毁工作机会，美国农业自动化后，农民的数量从45%急剧减少到了2%，而中国的农业机械普及后，目前也在出现这种趋势。</p>
<p>自动化越发达，需要的人力越少，这一点在所有行业的工厂中，都有体现出来。</p>
<p>自动化虽然摧毁了老旧低端的工作机会，但更加富有的人民会创造出新的就业机会，所以整个社会依然在蒸蒸日上。</p>
<p>但这种技术进步带来的幸福，有其极限所在，那就是机器人革命突破临界点，造成劳动力价值归零的那一天。</p>
<p>如果一家工厂已经发达到全部由机器人管理，可以自己发电、自己挖矿、自己制造维修新的机器人，整个过程不需要任何人类的参与，也不需要任何管理人员，每天都会自动产出一定数量的商品。</p>
<p>请问这些商品的价值应该是多少？</p>
<p>答案是零。</p>
<p>商品的价格，不是由它的成本或价值所决定的，而是由需求和供给所决定的。</p>
<p>空气对你的价值，明显比保时捷要大的多，但是没有保时捷你可以接受，没有空气你万万不能接受。</p>
<p>在月球上，1克空气和1克黄金是等价的。</p>
<p>但是在地球上，你愿意为空气付出的价格，是零。</p>
<p>因为地球上可以源源不断的自动产出空气，供给太过充沛，所有人都不缺空气，不存在任何稀缺性，所以也就没有价格。</p>
<p>在智慧机器人时代，道理类似。</p>
<p>整个资本主义的存在有一个巨大的理论基石，那就是假定利润可以驱动所有人。</p>
<p>在目前的生产力水平下，这的确是有效的，所有人都在为了利润而奔跑，人类社会也在为了利润而进化。</p>
<p>但是在机器人可以完成一切的时代，这个基石就坍塌了。</p>
<p>如果资本家追逐利润，那么他的选择必然是开除所有员工，自己一个人和一堆机器人统治世界，因为这么做，效率最高。</p>
<p>但是当工人失去一切收入时，商品也就没有了意义，因为无人有钱购买，整个社会的需求几乎消失，资本家也就没有生产的动力，哪怕机器人工厂的生产成本趋近于零，他也不愿意生产。</p>
<font color="red">没有需求，就没有生产。</font>

<p>整个社会的秩序，就这么崩溃了，资本家和工人都很迷茫，我每天到底应该干嘛。</p>
<p>而智慧机器人+资本主义，会产生奇妙的化学反应。</p>
<p>追逐更高的生产效率和更多的利润，是资本家的天性，也是我们所鼓励的目标。</p>
<p>但是当生产效率高到临界点的时候，麻烦就来了。</p>
<font color="red">这个临界点，就是智慧机器人可以用趋近于零的成本，胜任所有的工作。</font>

<p>我刚才说了，机器人可以采矿，可以建工厂，可以自己全自动生产更多的机器人，同时也可以生产世界上所有的商品和服务。</p>
<p>除非你索取的报酬比机器人还低，否则人类劳动力就没有存在的价值。</p>
<p>但机器人的成本已经接近于零，你还能怎么低，你总要吃饭吧。</p>
<p>这个时候，如果社会还在坚持资本主义私有制，那就会出现一个很可怕的事情。</p>
<p>99%的普通人类，都会失去工作，只留下少数精英科学家和大资本家。</p>
<p>如果彻底坚持私有制，那么这些普通人类都会被淘汰消灭掉。</p>
<p>由于机器人可以不断自我繁殖、扩大生产规模，接下来残存的1%人类里，会再度分化，剩余人口的99%会被再次淘汰，遗留万分之一的超级资本家。</p>
<p>最后，整个地球会只剩下1个终极资本家，他一个人控制无数的机器人，可以用更高的效率完成之前全人类的所有生产任务，同时占有了全地球所有的资源。</p>
<p>这个人有个专有名词，叫<font color="red">终产者。</font></p>
<p>但人类是群居性生物，如果地球上的人类社会消亡了，人类文明也就消亡了，没有同类可以沟通，整个地球就是一个巨大的囚笼，这个终产者也不会有什么幸福可言。</p>
<p>所以，在智慧型机器人时代，如果彻底坚持私有制和资本主义，整个人类社会将步入自我毁灭。</p>
<p>这就是典型的生产力不匹配生产关系。</p>
<p>先进的生产力，理应带来更大的幸福，如果反而带来了痛苦和迷茫，那就说明人类世界需要更先进的生产关系。</p>
<p>这就是共产主义临界，这种科技革命带来的生产力爆发，会直接颠覆原有的生产关系。</p>
<center><font color="blue" size="5">2</font></center>

<p>这种等级的生产力，还会带来一个附带的效果，<font color="red">那就是人类将飞速进入星际时代。</font></p>
<p>目前的人类社会，绝对不可能步入星际时代，所谓的探索月球，探索火星，其实都是给披着和平的外表在做洲际导弹试验。</p>
<p>地球上最差劲的地方，都会比火星上最强的地方要好的多，至少在地球上空气是免费的，水源也不贵。</p>
<p>我宁可开发撒哈拉大沙漠，也不可能去开发什么火星资源，很明显大沙漠更适宜人类居住。</p>
<p>地球上这么多戈壁、沙漠、海底世界都闲着，我有什么必要去殖民火星，那不是有毛病么。</p>
<p>为什么我们放弃了沙漠？因为开发沙漠资源需要人力，而维持人力需要资源，如果开发出的资源小于消耗的人力资源，那开发沙漠就是不划算的事情，我们宁可放弃。</p>
<p>但是在铺天盖地可以自我繁殖的智慧机器人面前，这都不是问题，他们可以靠核聚变的动力，用沙漠里的沙子和石头合成新的机器人，然后不断的自我复制，然后用极低的成本开发整个沙漠。</p>
<p>最后，机器人会代替人类征服地球的每一个角落，甚至可以潜入深海去开发资源。</p>
<p>地球的机器人数量，会很快达到整个地球可以承载的资源极限，提供无数的产品来供应整个人类。</p>
<p>这个时候，开发火星就有价值了，因为人类的力量等于占领的星球数量，机器人的繁殖不需要空气，不需要水源，只要有核燃料和岩石就可以，而这些东西，每个星系都会有。</p>
<font color="red">只要一艘殖民舰落地，机器人很快就会占满整个星球，然后利用星球的资源复制出数万艘殖民舰。</font>

<p>出于对更强生产力的追求，人类社会将在新的生产关系下，集中全人类的力量，突破星际旅行技术，然后把机器人工厂种满星空的每一个角落。</p>
<p>如果碰到了其他也在争夺星球资源的高等文明，那就有可能引发一场星际之战。</p>
<p><img src="/archives/5d04ac6b/3.png" alt=" "></p>
<p>刚才分析过，资本主义的生产关系和星际时代的生产力互不兼容，所以到时候和异星文明战斗的，不可能是资本主义战士，只能是共产主义战士。</p>
<p><img src="/archives/5d04ac6b/4.png" alt=" "></p>
<p>这并不是开玩笑，生产力决定生产关系，生产反作用于生产力。</p>
<p>如果人类发展不出智慧型机器人，那人类的生产力不可能会出现爆发式增长，永生永世会被困在地球上，直到漫长的时间过后，地球环境变化，人类和恐龙一样走向灭亡。<br>如果人类发展出智慧型机器人，那自我繁殖的机器人会很快让劳动价值归零，也只有发达到足以让劳动价值归零的先进生产力，才有可能帮助人类突破星球的枷锁。<br>而这种级别的生产力，会导致资本主义制度直接解体。</p>
<p>现阶段的生产力，资本主义制度占优势，但星际时代的生产力，则会毁灭资本主义制度。</p>
<center><font color="blue" size="5">3</font></center>

<p>资本主义制度的存在，在不断的提升人类的生产力。</p>
<p>但生产力越发达，资本主义制度就越衰弱，生产力发达到一定程度，资本主义制度要么自我灭亡，要么就自我改良成变种的共产主义。</p>
<p>最近几十年，科技越发达，欧美的工人福利就越高，越来越像共产主义国家了，这就是他们逐步改良，缓步进入共产主义的证明。</p>
<p>所以我认为马克思的理论没有任何问题，最大的问题可能就是超越了时代。</p>
<p>中国后来从共产主义改为社会主义，承认市场经济，承认私有制，也是出于这个原因，现阶段生产力不够发达，不匹配超前的生产关系。</p>
<p>目前的人类世界，靠利润驱动个体，是社会生产最优的选择。</p>
<font color="red">所以，科学技术是第一生产力，消灭资本主义制度的主力军不是部队，而是科学家。</font>

<p>过于发达的生产力会毁灭资本主义制度，但这些资本主义国家发展生产力却非常积极。</p>
<p>目前世界上最先进的机器人技术，是美国波士顿动力公司，一个彻头彻尾的资本制公司。</p>
<div><iframe scrolling="no" frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=w0749vrxbh4" style="min-height:600px;width:100%;height:100%;" allowfullscreen="true"></iframe></div>

<p>因为追逐更高利润，追逐更先进生产力，是资本的天性，哪怕即将抵达共产临界，也会有资本家突破那层隔膜。</p>
<font color="red">你不做，别的资本家做，谁先做谁利润更高。</font>

<p>当然，如果人类科技真发展到那个地步，金钱也许就失去了意义，荣誉和地位才是所有人追逐的目标。</p>
<p>希望这一天早点到来，<font color="red">到时候我带一艘殖民舰，选一个荒凉的小星球，和老婆孩子一起到那里，在数千亿机器人的服务下每天看星星。</font></p>
<font color="red">到了那一天，点赞转发的人，每人我送一颗星球给你玩。</font>

<center>--end--</center>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247525489&amp;idx=1&amp;sn=068a1b2194598b2c1ee71795034c5b6f&amp;chksm=fe0e0c67c97985710f49b8547b3bcfa9678734ce95baeba572e266d9796e5a21fcb0257ed4d5&amp;mpshare=1&amp;scene=1&amp;srcid=1125hrYlosR3l65SIfdyZKgt&amp;sharer_sharetime=1606273428353&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=0d6e55fbf9699bbd58ad1ae84b1d14b920c9a1ff0e7cc91218376e3452615f7e3788ad2dab19b81b29863746469184d5520caf58dd07e3256c2b37ebefc655da7ae97d9884470ca7989a9ae97d38995bfa60d934beca7633dd7483b32e1652bde7f8d6cc4c9345d92bacce989a7790b9232461d46d76bc2a7f1a9e0705b1776f&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A83d0XuPkfb7Ys7GuJlHfyI%3D&amp;pass_ticket=rTtuoKflXWMAZRFpE8f4oSkRd3tKyqvEyOEAQGoYYjPXxZqPLapBxytxLiC6l714&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>经济</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>docker下搭建prometheus+grafana</title>
    <url>/archives/cf0240fb/</url>
    <content><![CDATA[<p><img src="/archives/cf0240fb/1.png" alt=" "></p>
<h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><p>Prometheus是一个最初在SoundCloud上构建的开源监控系统 。它现在是一个独立的开源项目，为了强调这一点，并说明项目的治理结构，Prometheus 于2016年加入CNCF，作为继Kubernetes之后的第二个托管项目。</p>
<p>Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库。从字面上理解，Prometheus由两个部分组成，一个是监控报警系统，另一个是自带的时序数据库（TSDB）</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>具有由 metric 名称和键/值对标识的时间序列数据的多维数据模型</li>
<li>PromQL，有一个灵活的查询语言</li>
<li>不依赖分布式存储，只和本地磁盘有关</li>
<li>通过 HTTP 的服务拉取时间序列数据</li>
<li>也支持推送的方式来添加时间序列数据</li>
<li>通过服务发现或静态配置发现目标</li>
<li>多种图形和仪表板支持</li>
</ul>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p>此图说明prometheus的体系结构及其一些系统组件</p>
<p><img src="/archives/cf0240fb/2.png" alt=" "></p>
<p>图片左侧是各种数据源主要是各种符合 Prometheus 数据格式的 exporter,除此之外为了支持推动数据 类型的 Agent,可以通过 Pushgateway 组件,将 Push 转化为 Pull。Prometheus 甚至可以从其它的 Prometheus 获取数据,组建联邦集群。Prometheus 的基本原理是通过 HTTP 周期性抓取被监控组件的状态,任意组件只要提供对应的 HTTP 接口 并且符合 Prometheus 定义的数据格式,就可以接入 Prometheus 监控。</p>
<p>图片的上侧是服务发现,Prometheus 支持监控对象的自动发现机制,从而可以动态获取监控对象。 图片中间是 Prometheus Server,Retrieval 模块定时拉取数据,并通过 Storage 模块保存数据。PromQL 为 Prometheus 提供的查询语法,PromQL 模块通过解析语法树,调用 Storage 模块查询接口获取监控数据。 图片右侧是告警和页面展现,Prometheus 将告警推送到 alertmanger,然后通过 alertmanger 对告警进行处 理并执行相应动作。数据展现除了 Prometheus 自带的 webui,还可以通过 grafana 等组件查询 Prometheus 监控数据。</p>
<h3 id="与其他监控系统的比较"><a href="#与其他监控系统的比较" class="headerlink" title="与其他监控系统的比较"></a>与其他监控系统的比较</h3><p>在Prometheus 之前市面已经出现了很多的监控系统,如 Zabbix、Open-falcon 等。那么 prometheus 和这些监控系统有啥异同呢?我们先简单介绍一下这些监控系统</p>
<p>Zabbix 是由 Alexei Vladishev 开源的分布式监控系统,支持多种采集方式和采集客户端,同时支持 SNMP、 IPMI、JMX、Telnet、SSH 等多种协议,它将采集到的数据存放到数据库中,然后对其进行分析整理,如果 符合告警规则,则触发相应的告警。</p>
<p>Zabbix 核心组件主要是 Agent 和 Server,其中 Agent 主要负责采集数据并通过主动或者被动的方式采集数据发送到 Server/Proxy,除此之外,为了扩展监控项,Agent 还支持执行自定义脚本。Server 主要负责 接收 Agent 发送的监控信息,并进行汇总存储,触发告警等。为了便于快速高效的配置 zabbix 监控项,zabbix 提供了模板机制,从而实现批量配置的目的。</p>
<p>Zabbix Server 将收集的监控数据存储到 Zabbix Database 中。Zabbix Database 支持常用的关系型 数据库,如果 MySQL、PostgreSQL、Oracle 等,默认 是 MySQL。Zabbix Web 页面(PHP 编写)负责数据 查询。Zabbix 由于使用了关系型数据存储时序数据,所以在监控大规模集群时常常在数据存储方面捉襟见 肘。为此 zabbix 4.2 版本后也开始支持时序数据存储,不过目前还不成熟。</p>
<p><img src="/archives/cf0240fb/3.png" alt=" "></p>
<p>Open-Falcon 是小米开源的企业级监控工具,用 Go 语言开发而成,包括小米、滴滴、美团等在内的互 联网公司都在使用它,是一款灵活、可扩展并且高性能的监控方案,主要组件包括:</p>
<p>Falcon-agent:用 Go 语言开发的 Daemon 程序,运行在每台 Linux 服务器上,用于采集主机上的各种 指标数据,主要包括 CPU、内存、磁盘、文件系统、内核参数、Socket 连接等,目前已经支持 200 多项监 控指标。并且,Agent 支持用户自定义的监控脚本,</p>
<p>Hearthbeat server:简称 HBS 心跳服务,每个 Agent 都会周期性地通过 RPC 方式将自己的状态上报给 HBS,主要包括主机名、主机 IP、Agent 版本和插件版本,Agent 还会从 HBS 获取自己需要执行的采集任务 和自定义插件。</p>
<p>Transfer:负责接收 Agent 发送的监控数据,并对数据进行整理,在过滤后通过一致性 Hash 算法发送 到 Judge 或者 Graph</p>
<p>Graph:RRD 数据上报、归档、存储的组件。Graph 在收到数据以后,会以 rrdtool 的数据归档方式来存 储,同时提供 RPC 方式的监控查询接口。</p>
<p>Judge:告警模块,Transfer 转发到 Judge 的数据会触发用户设定的告警规则,如果满足,则会触发邮 件、微信或者回调接口。这里为了避免重复告警引入了 Redis 暂存告警,从而完成告警的合并和抑制。</p>
<p>Dashboard:面向用户的监控数据查询和告警配置界面</p>
<p><img src="/archives/cf0240fb/4.png" alt=" "></p>
<p>从开发语言上看,为了应对高并发和快速迭代的需求,监控系统的开发语言已经慢慢从 C 语言转移到 Go。不得不说,Go 凭借简洁的语法和优雅的并发,在 Java 占据业务开发,C 占领底层开发的情况下,准确 定位中间件开发需求,在当前开源中间件产品中被广泛应用。</p>
<p>从系统成熟度上看,Zabbix 是老牌的监控系统:Zabbix 是在 1998 年出现的,系统功能比较稳定,成熟 度较高。而 Prometheus 和 Open-Falcon 都是最近几年才诞生的,虽然功能还在不断迭代更新,但站在巨人 的肩膀之上,在架构设计上借鉴了很多老牌监控系统的经验;</p>
<p>从系统扩展性方面看,Zabbix 和 Open-Falcon 都可以自定义各种监控脚本,并且 Zabbix 不仅可以做到 主动推送,还可以做到被动拉取,Prometheus 则定义了一套监控数据规范,并通过各种 exporter 扩展系统 采集能力;</p>
<p>从数据存储方面来看,Zabbix 采用关系数据库保存,这极大限制了 Zabbix 采集的性能,Open-Falcon 采用 RDD 数据存储,并且可以对接到 OpenTSDB,而 Prometheus 自研一套高性能的时序数据库,在 V3 版 本可以达到每秒千万级别的数据存储,通过对接第三方时序数据库扩展历史数据的存储;</p>
<p>从配置和维护的复杂度上看,prometheus 只有一个核心 server 组件,一条命令便可以启动,相比而言, 其他系统配置相对麻烦,尤其是 open-falcon。</p>
<p>从社区活跃度上看,目前 Zabbix 社区活跃度比较低,Open-Falcon 虽然也比较活跃,但基本都是国内 的公司参与,Prometheus 在这方面占据绝对优势,社区活跃度最高,并且受到 CNCF 的支持,后期的发展 值得期待;</p>
<p>从容器支持角度看,由于 Zabbix 出现得比较早,当时容器还没有诞生,自然对容器的支持也比较差。 Open-Falcon 虽然提供了容器的监控,但支持力度有限。Prometheus 的动态发现机制,不仅可以支持 swarm 原生集群,还支持 Kubernetes 容器集群的监控,是目前容器监控最好解决方案。Zabbix 在传统监控系统中, 尤其是在服务器相关监控方面,占据绝对优势。伴随着容器的发展,Prometheus 开始成为主导及容器监控 方面的标配,并且在未来可见的时间内被广泛应用。总体来说,对比各种监控系统的优劣,Prometheus 可 以说是目前监控领域最锋利的“瑞士军刀”了。</p>
<h2 id="使用docker搭建监控linux主机"><a href="#使用docker搭建监控linux主机" class="headerlink" title="使用docker搭建监控linux主机"></a>使用docker搭建监控linux主机</h2><p>可以参考官方方法：<a href="https://prometheus.io/docs/guides/node-exporter/">https://prometheus.io/docs/guides/node-exporter/</a></p>
<p>可以知道，监控linux主机需要node-exporter，所以docker镜像需要node-exporter，prometheus，grafana</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>docker pull prom/node-exporter</code><br><code>docker pull prom/prometheus</code><br><code>docker pull grafana/grafana</code></p>
<h3 id="启动node-exporter"><a href="#启动node-exporter" class="headerlink" title="启动node-exporter"></a>启动node-exporter</h3><p>node_exporter设计用于监控主机系统。不建议将其部署为Docker容器，因为它需要访问主机系统。请注意，您要监视的任何非根安装点都需要绑定到容器中。如果启动容器以进行主机监视，请指定path.rootfs参数。此参数必须与host root的bind-mount中的路径匹配。node_exporter将path.rootfs用作访问主机文件系统的前缀。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; run_node_exporter.sh &lt;&lt; EOF</span><br><span class="line">docker stop node_exporter</span><br><span class="line">docker rm node_exporter</span><br><span class="line">docker run -d --name node_exporter \</span><br><span class="line">--restart=always \</span><br><span class="line">--net=<span class="string">&quot;host&quot;</span> \</span><br><span class="line">--pid=<span class="string">&quot;host&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/proc:/host/proc:ro&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/sys:/host/sys:ro&quot;</span> \</span><br><span class="line">-v <span class="string">&quot;/:/rootfs:ro&quot;</span> \</span><br><span class="line">prom/node-exporter \</span><br><span class="line">--path.procfs=/host/proc \</span><br><span class="line">--path.rootfs=/rootfs \</span><br><span class="line">--path.sysfs=/host/sys \</span><br><span class="line">--collector.filesystem.ignored-mount-points=<span class="string">&#x27;^/(sys|proc|dev|host|etc)($$|/)&#x27;</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>启动后访问<a href="http://IP:9100/metrics">http://IP:9100/metrics</a>，正常会显示：</p>
<p><img src="/archives/cf0240fb/5.png" alt=" "></p>
<p>这些都是收集到数据，有了它就可以做数据展示了</p>
<h3 id="启动prometheus"><a href="#启动prometheus" class="headerlink" title="启动prometheus"></a>启动prometheus</h3><p>新建目录prometheus，编辑配置文件prometheus.yml:<br><code>mkdir -p prometheus/conf</code><br><code>vim prometheus/conf/prometheus.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">60s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;IP:9090&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;IP:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>
<p>IP修改为自己服务器IP，其他名字如job_name可以自行修改，如果要监控多台服务器，则在targets里面添加<br>参考官方配置：<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></p>
<p>修改目录权限，默认prometheus使用nobody的内置用户，对应UID为65534：<br><code>chown -R 65534.root prometheus</code><br><code>chmod -R 775 prometheus</code></p>
<p>启动container：<br><code>docker run  -d -p 9090:9090 -v /app/prometheus/conf:/etc/prometheus -v /app/prometheus:/prometheus prom/prometheus --web.enable-lifecycle</code></p>
<p>“—web.enable-lifecycle” 参数是运行prometheus热加载配置文件，运行<code>curl -X POST http://ip:port/-/reload</code>来重载配置</p>
<p>container默认配置文件在/etc/prometheus/prometheus.yml<br>启动后访问：<a href="http://IP:9090/graph">http://IP:9090/graph</a>，正常显示：</p>
<p><img src="/archives/cf0240fb/6.png" alt=" "></p>
<p>访问targets，<a href="http://IP:9090/targets">http://IP:9090/targets</a>，正常显示：</p>
<p><img src="/archives/cf0240fb/7.png" alt=" "></p>
<h3 id="启动grafana"><a href="#启动grafana" class="headerlink" title="启动grafana"></a>启动grafana</h3><p>参考官方配置：<a href="https://grafana.com/docs/grafana/latest/installation/docker/">https://grafana.com/docs/grafana/latest/installation/docker/</a></p>
<p>新建目录来存储grafana的数据：<br><code>mkdir -p grafana/&#123;data,logs&#125;</code></p>
<p>修改目录权限，默认grafana使用用户grafana，对应UID为472：<br><code>chown -R 472.root grafana</code><br><code>chmod -R 775 grafana</code></p>
<p>启动container：<br><code>docker run -d -p 3000:3000 --name=grafana -v /app/grafana/data:/var/lib/grafana -v /app/grafana/logs:/var/log/grafana grafana/grafana</code></p>
<p>访问URL：<a href="http://IP:3000">http://IP:3000</a><br>默认用户名和密码都是admin，首次登录需要修改密码，密码设置完成之后，就会跳转到首页，点击Add data source，由于使用的是镜像方式Prometheus：</p>
<p><img src="/archives/cf0240fb/8.png" alt=" "></p>
<p><img src="/archives/cf0240fb/9.png" alt=" "></p>
<p>name名字写Prometheus，type 选择Prometheus，因为数据都从它那里获取，url 输入Prometheus的ip+端口，点击下面的Save &amp; Test，如果出现绿色的，说明ok了。</p>
<p>使用grafana 的仪表盘模板导入ID=8919的仪表盘 ,点击 import导入即成功 (如果是docker监控模板推荐 8321)</p>
<p><img src="/archives/cf0240fb/10.png" alt=" "></p>
<p><img src="/archives/cf0240fb/11.png" alt=" "></p>
<p>导入后效果：</p>
<p><img src="/archives/cf0240fb/12.png" alt=" "></p>
<h2 id="监控windows主机"><a href="#监控windows主机" class="headerlink" title="监控windows主机"></a>监控windows主机</h2><p>node-exporter是监控linux主机使用的，官方没有监控windows的插件，可以从<a href="https://github.com/prometheus-community/windows_exporter/releases">https://github.com/prometheus-community/windows_exporter/releases</a>下载</p>
<p>下载后双击安装即可，默认端口为9182，然后访问<a href="http://IP:9182">http://IP:9182</a>，会出现跟node-exporter一样的页面，然后修改prometheus.yml文件，添加windows主机的监控项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">60s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">60s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="comment">#alerting:</span></span><br><span class="line"><span class="comment">#  alertmanagers:</span></span><br><span class="line"><span class="comment">#    - static_configs:</span></span><br><span class="line"><span class="comment">#        - targets: [&#x27;192.168.1.200:9093&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="comment">#rule_files:</span></span><br><span class="line"><span class="comment">#  - &quot;/etc/prometheus/rules/*.yml&quot;</span></span><br><span class="line">      <span class="comment">#- &quot;first_rules.yml&quot;</span></span><br><span class="line">      <span class="comment">#- &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Target configuration</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">Linux</span> <span class="string">Server</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.200:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">Proxy</span> <span class="string">server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.55:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">蓝凌KK服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.57:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">T100</span> <span class="string">server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.205:9100&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">Kettle任务调度服务器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">Windows</span> <span class="string">Server</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.2:9182&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">AD域控服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.3:9182&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">DHCP服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;192.168.1.16:9182&#x27;</span>]</span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">一卡通服务器</span></span><br></pre></td></tr></table></figure>
<p>重启prometheus的容器，此时再次访问<a href="http://IP:9090/targets">http://IP:9090/targets</a>，可以看到会多一个endpoint，就是刚配置上去的windows主机</p>
<p><img src="/archives/cf0240fb/13.png" alt=" "></p>
<p>回到grafana的dashboard市场<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a>，搜索windows，找到dashboard的ID</p>
<p><img src="/archives/cf0240fb/14.png" alt=" "></p>
<p>最后重复跟linux一样的导入操作即可</p>
<p><img src="/archives/cf0240fb/15.png" alt=" "></p>
<h2 id="监控docker"><a href="#监控docker" class="headerlink" title="监控docker"></a>监控docker</h2><p>使用docker镜像google/cadvisor，配置参考<a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a><br>配置完毕后访问<a href="http://ip:设置端口">http://ip:设置端口</a>可以查看网页：</p>
<p><img src="/archives/cf0240fb/16.png" alt=" "></p>
<p>其他跟监控windows一样，修改prometheus配置文件，新增一项job_name：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;10.1.1.8:8070&#x27;</span>]</span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>
<p>模板可以直接搜cadvisor</p>
<h2 id="grafana忘记登录密码"><a href="#grafana忘记登录密码" class="headerlink" title="grafana忘记登录密码"></a>grafana忘记登录密码</h2><ol>
<li>参考官方方法：<a href="https://grafana.com/docs/grafana/latest/administration/cli/#reset-admin-password">https://grafana.com/docs/grafana/latest/administration/cli/#reset-admin-password</a><br>进入grafana的container</li>
</ol>
<p>运行：<br><code>grafana-cli admin reset-admin-password xxx</code></p>
<ol>
<li>google方法：</li>
</ol>
<p>找到grafana的数据文件grafana.db</p>
<p>进入数据库，如：<br><code>sqlite3 /var/lib/grafana/grafana.db</code></p>
<p>查看表：<br>.table</p>
<p>查看表数据：<br><code>select * from user;</code></p>
<p>更改密码为admin:<br><code>update user set password = &#39;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&#39;, salt = &#39;F3FAxVm33R&#39; where login = &#39;admin&#39;;</code></p>
<p>退出：<br>.exit</p>
<p>更改后，会重置密码为admin</p>
<h2 id="使用grafana内置的报警"><a href="#使用grafana内置的报警" class="headerlink" title="使用grafana内置的报警"></a>使用grafana内置的报警</h2><p>grafana内置alertmanager插件，可以通过邮件，钉钉或其他接口来发送报警，但是发送的内容比较简单，可编辑性也不高，但是日常收监控警报已经够用了。grafana设置报警非常人性化，按照页面一步步填写完毕即可。</p>
<h3 id="设置警报规则"><a href="#设置警报规则" class="headerlink" title="设置警报规则"></a>设置警报规则</h3><p><img src="/archives/cf0240fb/17.png" alt=" "></p>
<p>第一第二步，设置规则名称和请求警报条件，其中默认A为请求名称，可以修改，Metrics browser里面可以查看所有支持的值，请求可以使用builder模式和code模式，一般使用code模式自定义请求，其他设置默认即可。这里设置了linux的磁盘警报：</p>
<p><code>100 * (node_filesystem_size_bytes&#123;fstype=~&quot;xfs|ext4&quot;&#125; - node_filesystem_avail_bytes) / node_filesystem_size_bytes &gt; 85</code></p>
<p>检测所有xfs和ext4格式的磁盘，如果使用率大于85%则报警。</p>
<p>如果设置windows报警，根据仪表板，会多出一个hardvolule1的磁盘，此时可以通过仪表板配置一下这个图表的Metrics来忽略这个磁盘：</p>
<p><code>100 - (windows_logical_disk_free_bytes&#123;job=~&quot;$job&quot;,instance=~&quot;$instance&quot;,volume=~&quot;.:&quot;&#125; / windows_logical_disk_size_bytes&#123;job=~&quot;$job&quot;,instance=~&quot;$instance&quot;,volume=~&quot;.:&quot;&#125;)*100</code></p>
<p>volume=~”.:”就是使用正则匹配，只显示分区盘符即可。</p>
<p><img src="/archives/cf0240fb/18.png" alt=" "></p>
<p>第三第四步，设置警报的评估行为和警报详细信息，其中第三步有个Configure no data and error handling，也就是当没有匹配到警报信息的时候，可以显示OK。</p>
<p>第五步配置通知选项，默认是通过根路由来进行。</p>
<h3 id="设置联络点"><a href="#设置联络点" class="headerlink" title="设置联络点"></a>设置联络点</h3><p><img src="/archives/cf0240fb/19.png" alt=" "></p>
<p>就是设置通知方式</p>
<h3 id="设置通知策略"><a href="#设置通知策略" class="headerlink" title="设置通知策略"></a>设置通知策略</h3><p>设置好通知方式，这里默认即可</p>
<h3 id="其他常用的报警请求"><a href="#其他常用的报警请求" class="headerlink" title="其他常用的报警请求"></a>其他常用的报警请求</h3><p>CPU使用率</p>
<p><code>100 * (1 - avg(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[2m])) by(instance)) &gt; 10</code></p>
<p>模拟提高CPU使用率可以使用命令cat /dev/urandom | md5sum</p>
<p>内存使用率</p>
<p><code>(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 &gt; 20</code></p>
<p>模拟提高内存使用率可以参考：<a href="https://blog.csdn.net/heavenmark/article/details/82805260">https://blog.csdn.net/heavenmark/article/details/82805260</a> 恢复内存就重启机器吧</p>
<p><em>参考出处</em><br><em><a href="https://www.cnblogs.com/wangxu01/articles/11646053.html">https://www.cnblogs.com/wangxu01/articles/11646053.html</a></em><br><em><a href="https://www.cnblogs.com/lz1996/p/12741489.html">https://www.cnblogs.com/lz1996/p/12741489.html</a></em><br><em><a href="https://www.jianshu.com/p/87e1ca5b84c9">https://www.jianshu.com/p/87e1ca5b84c9</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>丁戊奇荒和粮食规律</title>
    <url>/archives/69bbce32/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木  <em>首发于2019-12-15</em></p>
<p><img src="http://img.soogif.com/20201116113326934.gif" alt></p>
<p>1875年，中国的气候悄悄发生了变化，华北地区，尤其是山西省的降雨突然减少，土地变的干旱。</p>
<p>根据文献记载，此时已经有零星地区出现了歉收的记录，但在当时，并未引起人们的警觉。</p>
<p>1876年，南方各省出现了大暴雨，农作物损失惨重。但北方各省却出现了大面积的干旱，随后又遭遇了蝗灾，山西的一些地区，已经有人开始靠吃树皮活命。</p>
<p>而那些以为熬过今年，等明年就能吃上饭的灾民，做梦也不会想到，在未来的两年，连树皮都成了奢侈物。</p>
<p>1877年，也就是光绪三年，大饥荒正式拉开序幕。</p>
<p>这一年，干旱依旧，华北各地依然大面积歉收，旱情没有丝毫缓解，但民间的储备粮已经彻底耗尽。</p>
<p>清政府立即进行救灾行动，但虚弱的政府给予的赈灾粮杯水车薪。</p>
<font color="red">当粮缸彻底见底时，大恐怖降临了。</font>

<p>英国外交报告中记录：</p>
<blockquote>
<p>吃人已非个别现象，人们组合成不同的团伙，集体外出“狩猎”，将猎获的俘虏杀死烹食。</p>
</blockquote>
<p>清政府中央救灾大员阎敬铭上书朝廷： </p>
<blockquote>
<p>“往来二三千里，目之所见，皆系鹄面鸠形；耳之所闻，无非男啼女哭。枯骸塞途，绕车而过，残喘呼救，望地而僵。”<br>陕西“赤地千里，几不知禾稼为何物矣……饥民相率抢粮，甚而至于拦路纠抢，私立大纛，上书‘王法难犯，饥饿难当’八字。”</p>
</blockquote>
<p>生产秩序崩溃后，次年灾情依旧，1878年的农作物再次歉收。</p>
<p>这一年，北方的灾荒已经到了毛骨悚然的程度，有一个曾经去过灾区的人回忆说：</p>
<blockquote>
<p>他们路过灾区的时候就听自己这马车在行进的时候”咔嚓咔嚓“直响，他探出头一看，发现路上全是累累白骨，那咔嚓声是车轮碾碎死人骨头的声音。<br>这人吓得缩在车里瑟瑟发抖不敢再看，没想到过了一会，刮风了，大风吹进车里很多黑色的毛发，吹的那人脸上身上都是，那人摘干净仔细一看，吓得差点尿裤子里，他发现那些毛发全是死人的头发，有的头发还能辨认出死者生前的发型，当时的灾区，饿殍遍野，那些荒野上的尸体的头皮已经被喜鹊和乌鸦啄烂了，死尸的头发被大风吹遍原野，于是山西大地上吹起黑色的风。。。<br>就这样，灾民们曾经留在这个世界的最后证据也在风中吹散了。。。</p>
</blockquote>
<p>类似这样的场景和描述，在《丁戊奇荒》这本书里，记载的数不胜数，我就不一一赘述了。</p>
<p><img src="/archives/69bbce32/1.png" alt=" "></p>
<p>曾国藩的弟弟曾国荃曾经这么评价丁戊奇荒：</p>
<blockquote>
<p>“就是地狱也不过如此了。“</p>
</blockquote>
<p>这场大灾荒从1876年正式拉开序幕，持续到1879年才得到缓解，期间又以1877和1878这两年死亡人数最多。</p>
<p>这次大旱灾影响的居民人数在1.6亿到2亿之间，约占当时清朝人口的一半，直接死于饥荒和瘟疫的人数在一千万以上，其中山西500万人，而逃离灾区的灾民大约有2000万人。</p>
<p>清朝官员称这场旱灾为：</p>
<blockquote>
<p>“有清一代二百三十余年末见之惨凄，未闻之悲痛”。</p>
</blockquote>
<p>1877年为丁丑年，1878年为戊寅年。</p>
<p>所以这次大灾荒，被称之为<font color="red">丁戊奇荒。</font></p>
<hr>
<center><font color="orange" size="4">1</font></center>

<hr>
<p>现在的中国人，每天最操心的事情不是如何填饱肚子，而是怎么把身上的赘肉给减下去。</p>
<p>体重计上的数字时刻在提醒你，<font color="red">把碗里的肉扔掉，别再吃了。</font></p>
<p>中国人已经忘记了饥饿的滋味，也不认为自己会吃不上饭。</p>
<p>但是国家没有忘，粮为国之本，中国对粮食安全的重视程度为世界之最。</p>
<p>农业，是一个靠天吃饭的行业，气候对收成的影响非常大。今年能够产出多少农作物，老天爷说了算。</p>
<font color="red">不管十年一遇，还是百年一遇，我们总会有那么不走运的几年里，遇到特大自然灾害。</font>

<p>而粮食这种东西，是世界上刚需程度最大的商品，极其特殊。</p>
<p>一个普通的成年男性，一个月只需要25斤粮食，重体力劳动者也只需要45斤。</p>
<p>按3块钱一斤的粮价计算，一个月75块就可以保证你饿不死。</p>
<p>但哪怕你富如马云，身家数千亿，你一个月也不可能吃250斤粮食。</p>
<p>你可以吃很贵的山珍海味，但是你的粮食消耗总量并不大，毕竟富豪也不是外星人。</p>
<p>粮食多了，我们可以拿来养猪、养牛、甚至酿酒，改善饮食结构。</p>
<p>但粮食少了，问题就大条了。</p>
<font color="red">粮食的绝对刚需就体现在，它永远只能多不能少。</font>

<p>假设世界上的铁矿石产量突然减少10%，那么铁矿石价格会上涨10%吗？</p>
<p>不，你错了，价格会大幅上涨，<font color="red">直到有10%的下游企业买不起铁矿石为止。</font></p>
<p>我们可以没有钢铁，也可以没有石油，但是不能没有粮食。</p>
<p>粮食的刚需程度，远大于铁矿石。</p>
<font color="red">偏偏粮食的需求弹性还特别小，富人没办法多吃，穷人也没办法少吃。

如果粮食减产10%，那么带来的绝对不是每人少吃10%的粮食，而是饿死10%的人为止。
富人绝对不愿意省那点钱去挨饿，所以粮价会无限上涨，直到有10%的人吃不起粮食被饿死。因为他们对粮食的需求，只有饿死的时候才会停止。</font>

<p>大家小的时候，都玩过抢板凳的游戏。</p>
<p>如果N个人，有N个板凳，每人只能坐一个板凳的话，那么大家都很淡定，慢悠悠的走到空闲的板凳那里坐下，大家都很有风度，也不着急。</p>
<p>但如果只给N个人提供N-1个板凳的话，大家就像疯了一样的抢板凳，以最快的速度抢凳子，同时还疯狂的推挤旁边的人，毫无优雅和风度，这还是游戏惩罚很低的情况下。</p>
<font color="red">如果告诉这N个人，抢不到板凳的那个人会死。相信我，这个游戏会瞬间血腥激烈无数倍。

当粮食短缺10%甚至5%的时候，就会开启一场同样的游戏，异常残酷。</font>

<p>2018年，印度的洋葱丰收，部分地区的价格甚至跌到了1卢比/公斤。</p>
<p>但2019年，印度的洋葱出现了歉收，价格上升到25卢比/公斤。</p>
<p>自2019年9月开始，印度洋葱的价格疯狂上涨，目前已经涨到了80卢比/公斤。</p>
<p>之所以会出现3~80倍这么恐怖的涨幅，是因为洋葱是咖喱的主材料，而印度人特别喜欢吃咖喱。</p>
<p>这只是做饭的辅料歉收，如果是粮食不足，你可以想象，价格会飙升到何等地步。<br>袁隆平院士在一次采访时曾经说过：</p>
<blockquote>
<p>“一粒粮食能够救一个国家，也可以绊倒一个国家。要把中国人的饭碗牢牢地掌握在中国人自己手里。”</p>
</blockquote>
<hr>
<center><font color="orange" size="4">2</font></center>

<hr>
<p>现在，你应该已经了解到缺粮的可怕之处了，那么国家怎么做才能避免出现缺粮的情况呢？</p>
<font color="red">首先是科学，科学技术是第一生产力。</font>

<p>农药、化肥、现代水利设施、培育各种良种，都是稳定农业生产最强大的手段。</p>
<p>在这些科学技术发明出来之前，哪怕是西方强国也被粮食问题所困扰。</p>
<p>1500年到1800年间，法国一共发生过40次全国性饥荒；1523年到1623年间，英国一共发生17次全国性饥荒，平均7年一次。</p>
<p>1845-1851年，一场虫害横扫爱尔兰，导致了超级饥荒的诞生，6年时间里，爱尔兰的人口从800万骤降到400万，成为了人间炼狱。</p>
<p>农业科技爆发+人口增长停滞后，全世界的粮食问题，才算得到缓和。</p>
<p>目前，中国的主要农作物品种平均每隔5年，就大规模更新换代一次，同时在水利设施上持续大规模投资，并大规模推广高产高效的农业生产技术。</p>
<p>今天中国粮食作物平均亩产为374.7公斤，超过新中国成立初期的5倍多，同时远超世界平均水平。</p>
<p><img src="/archives/69bbce32/2.png" alt=" "></p>
<p>自2004年以来，中国的粮食生产实现“十五连丰”，在水利设施上的投资，和一群如袁隆平院士这样的农业科学家，功不可没。</p>
<font color="red">然后，是坚守18亿亩耕地红线。</font>

<p>中国很久以前，就划定了18亿亩的耕地红线，这是红线，也是底线。</p>
<p>这些年，土地疯狂涨价，很多地方到处卖地，屡屡尝试侵占基本农田，试图吹风中央，把18亿亩这个标准降一降。</p>
<p>但不管卖地的利益再怎么大，18亿亩红线都坚决不能碰，宁可让很多城市被迫高价拆城中村，也绝不允许他们大肆占用城市周边的农田。</p>
<p>留给城市发展的农田，有，但给的数额是有限的，并不是无限的。</p>
<font color="red">18亿亩耕地的红线，绝不允许被挑战。</font>

<p>我国拥有全球9%的耕地、6%的淡水资源，却需要养活世界近20%的人口。</p>
<p>不管中国再怎么努力，也不可能把粮食的人均拥有量提升到和美国一样多。</p>
<p>所以，中国的粮食安全战略，是吃得饱+吃得好。</p>
<p>什么叫吃得饱，就是在假设国外对中国实行粮食封锁，一切全靠自力更生的前提下，中国能够凭手里的耕地和农业技术，在不那么极端的气候灾害面前，确保全国人有饭吃，不会被饿死。</p>
<p>这就叫吃得饱战略，也是18亿亩耕地红线的由来。</p>
<p>但是在和平时期，外国愿意卖给中国粮食的时候，中国适当进口一些农产品，提升人均粮食占有量，让中国人能吃得上鸡鱼肉蛋。</p>
<font color="red">充沛的食物供应，让你看到肉就想吐、天天头疼减肥的那种食物供应，给人民带来的幸福感和安全感，是无以伦比的。</font>

<p>这就叫吃得好战略，也是目前正在执行的粮食战略。</p>
<font color="red">最后，就是粮食储备战略。</font>

<p>哪怕水利设施修的再好，培育的良种再优秀，碰到极端气候灾难，你也没辙。</p>
<font color="red">别管十年一遇还是百年一遇，时间拖的足够长，你总有机会碰到的。

但这样的事情，你连一次都承受不起。</font>

<p>所以，我们需要粮食储备，大量的储备。</p>
<p>2005年12月到2008年7月，全球气候异常，大量国家和地区粮食歉收。</p>
<p>按粮食专家的测算，全球差不多有1000万人的粮食缺口。</p>
<p>总共60亿人，产生了1000万人的粮食缺口供应，粮食产量比最低供应线少了0.15%，就少那么一点点。</p>
<p>结果，国际小麦的价格从300涨到1330（单位：蒲尔/美分），涨幅3.4倍，国际玉米价格从185涨到758，涨了3.2倍。</p>
<p>这里面有国际炒家的因素，但你敢不买么，你愿意成为那0.15%的人口么？</p>
<p>所以这是阳谋，你只能买。</p>
<p>而同期，中国国内的粮食价格，只上涨了0.7倍，远远小于国际涨幅。</p>
<p>大量涌入中国境内的投机炒作资本，全被国家队给打服了。</p>
<p>在国内粮价持续暴涨时，中国官方开始抛储了。</p>
<p>一开始，不管中国抛出多少吨储备粮，多方都一口吃掉，粮价持续上涨。</p>
<p>然后，中国开始逐步加大抛储强度，一开始是半个月一抛，后来是每周一抛，最密集的时候，每1~2天抛储一次。</p>
<p>最后多方都傻了，中国到底有多少吨储备粮，不留点做军粮么，到底要抛储到什么时候才算结束。</p>
<p>这个时候，中国放出风声，说中国的储备粮有一亿吨，够全国人不种田吃一年的，投机资本不怕死就继续来炒。</p>
<p>中国的储备粮数量一直是国家绝密，谁也不知道有多少。至于这个一亿吨是真的假，炒家也不敢确认。</p>
<p>但万一是真的呢？</p>
<p>恰逢金融危机，连锁反应之下，粮价暴跌，中国境内的粮食炒家血本无归。</p>
<p>等粮价暴跌之后，中国再慢慢吃回自己的储备。</p>
<p>这轮粮食攻防战，中国完胜，靠的就是天量的粮食储备战略。</p>
<p>在最先进的储备技术下，粮食最多只能放3~5年，然后就变成了陈化粮。</p>
<p>为什么我国土地那么少，还力推乙醇汽油，把大量的粮食做成乙醇给汽车烧掉，就是为了处理这些陈化粮。</p>
<p>把新鲜的粮食放成陈化粮，会带来巨大的损失，但是这些损失，国家愿意承受，这等于是在给国家买保险。</p>
<font color="red">缺粮导致的损失，和粮价相比，要贵百倍千倍。</font>

<p>而源源不断轮换出来的陈化粮，必须通过乙醇工厂来处理掉。</p>
<p>所以，当你使用乙醇汽油的时候，其实就是在给中国的粮食安全做贡献。</p>
<p>当时，这0.15%的缺口，是靠非洲人给消化的。</p>
<p><img src="/archives/69bbce32/3.png" alt=" "></p>
<p>这就是中国的储备粮制度，是中国人饭碗的最后保护神，<font color="red">我们不想成为非洲人。</font></p>
<hr>
<center><font color="orange" size="4">3</font></center>

<hr>
<p>即便中国有世界上最庞大的水利设施，即便中国有一群袁隆平这样的农业科学家，即便中国有世界上最强的粮食储备。</p>
<p>中国的官方，依然对粮食问题极度重视。</p>
<p>每次中国出现区域性旱灾，都能惊动国家最高层级的人物去视察处理，这一切，都是在确保中国人的饭碗。</p>
<p><img src="/archives/69bbce32/4.png" alt=" "></p>
<font color="red">虽然粮食不值钱，但粮食的供应却是国之命脉，绝对不允许有丝毫动摇。</font>

<p>如果我不出去购物的话，我家里所有的存粮，把冰箱里的腊肉、巧克力、挂面什么的都算上，最多吃一星期就断粮了。</p>
<p>但我丝毫不担心我会饿死，每次外出也只买三四天的食物，以确保新鲜。</p>
<p>我观察了一下，我整个小区，甚至整个城市都是这样，在家里储备几百斤粮食的人，根本不存在。</p>
<p>大家从不担心自己未来会吃不上饭，<font color="red">国人能有这么强烈的信心，是对中国粮食安全工作人员的最大褒奖。</font></p>
<p>1978年之后的新一代的中国人，已经忘了饥饿的滋味。</p>
<p>希望这样的盛世能持续下去，<font color="red">希望丁戊奇荒永远不会再出现在中国大地上，无论怎样极端的气候灾害，都不允许出现。</font></p>
<p>中国的粮食安全储备战略花再多钱，我认为都值！</p>
<font color="red">因为这些东西，是拿来给中国人保命用的。</font>

<center>-end-</center>
]]></content>
      <categories>
        <category>文摘</category>
        <category>政治</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域常用设置</title>
    <url>/archives/7bb52d79/</url>
    <content><![CDATA[<p><img src="/archives/7bb52d79/1.png" alt=" "></p>
<h2 id="指定域用户拥有添加计算机进域权限"><a href="#指定域用户拥有添加计算机进域权限" class="headerlink" title="指定域用户拥有添加计算机进域权限"></a>指定域用户拥有添加计算机进域权限</h2><h3 id="禁用所有用户添加权限"><a href="#禁用所有用户添加权限" class="headerlink" title="禁用所有用户添加权限"></a>禁用所有用户添加权限</h3><p>默认domain user拥有10个添加计算机进域的权限，需要把ms-DS-MachineAccountQuota参数改为0，即禁止所有用户添加进域，可以打开ADSI编辑器查看和更改：<br>点击开始—管理工具—ADSI编辑器，右击ADSI编辑器连接到默认确定，点击展开默认上下文，右击文件夹属性，找到ms-DS-MachineAccountQuota，修改为0即可</p>
<p><img src="/archives/7bb52d79/2.png" alt=" "></p>
<h3 id="单独分配用户或组权限"><a href="#单独分配用户或组权限" class="headerlink" title="单独分配用户或组权限"></a>单独分配用户或组权限</h3><ol>
<li>首先开启Active Directory用户和计算机管理器的高级功能，拥有更多设置：<br>打开Active Directory用户和计算机管理器，点击查看，点击高级功能</li>
<li>找到Computers容器，右击打开属性，在安全一栏，点击高级，权限框中单击以选中创建计算机对象和 删除计算机对象，确定就OK。这时，该用户或组就拥有该权限啦。</li>
</ol>
<p><img src="/archives/7bb52d79/3.png" alt=" "></p>
<h2 id="禁止非域计算机不能访问服务器共享"><a href="#禁止非域计算机不能访问服务器共享" class="headerlink" title="禁止非域计算机不能访问服务器共享"></a>禁止非域计算机不能访问服务器共享</h2><p>要禁止非域计算机访问服务器资源设置比较复杂，需要配合IP策略来限制，可以参考<a href="https://blog.51cto.com/weber213/676492">https://blog.51cto.com/weber213/676492</a>，但实际上，只要灵活配置用户权限，一样可以达到此效果：<br>非域计算机想访问服务器共享，需要输入用户名和密码，外来用户没有账号从而杜绝安全问题。但是如果使用了员工的域账号来访问，岂不是一样不安全？可以针对该用户取消访问所有计算机，只允许从某个计算机登录，这样无论是公司其他电脑还是外面的电脑使用该账号登录，也会提示没权限访问该资源的。</p>
<p><img src="/archives/7bb52d79/4.png" alt=" "></p>
<h3 id="设置从网络访问本地计算机权限"><a href="#设置从网络访问本地计算机权限" class="headerlink" title="设置从网络访问本地计算机权限"></a>设置从网络访问本地计算机权限</h3><p>有时候设置了域账户绑定计算机访问后，也可以设置该用户不能从网络访问此计算机：<br>点击开始—管理工具—本地安全策略，在本地策略—用户权限分配一项，找到从网络访问此计算机，然后就添加只允许从网络访问此计算机的账户或组就行。</p>
<p><img src="/archives/7bb52d79/5.png" alt=" "></p>
<h2 id="域策略更新及导出"><a href="#域策略更新及导出" class="headerlink" title="域策略更新及导出"></a>域策略更新及导出</h2><p>强制刷新域策略gpupdate /force</p>
<p>导出域策略结果GPRESULT /H d:\GPReport.html</p>
<p>查看当前策略rsop.msc</p>
<h2 id="为域控制器指定可靠的外部时间源"><a href="#为域控制器指定可靠的外部时间源" class="headerlink" title="为域控制器指定可靠的外部时间源"></a>为域控制器指定可靠的外部时间源</h2><p>通常我们会使用域控作为时间同步服务器，但很多时候因为设置的问题导致域内计算机跟域控服务器时间不一致，甚至连域控服务器时间也是不准确的。<br>域控制器长时间均无法与外部时间源进行时间同步，运行w32tm /resync，显示“此计算机没有重新同步，因为没有可用的时间数据”，运行w32tm /query /source ，显示“Local CMOS Clock”，表示正在使用的是主板上的时间，没有使用外部时间源。因为主板上的时间无法做到很准确，经常发生过快或者过慢的情况，导致域内电脑的时间和实际时间经常出现较大的差异，所以必须要修正这个问题<br>我们从几方面来全面检查下域控服务器的设置</p>
<h3 id="连通性及注册表"><a href="#连通性及注册表" class="headerlink" title="连通性及注册表"></a>连通性及注册表</h3><p>首先，我们需要确保以下两点：<br>1.确保UPD 123端口是打开的。<br>使用如下命令检查123端口是否打开： w32tm /stripchart /computer:192.168.100.254   // 地址可以是内部NTP服务器或者是外部因特网时间服务器地址<br>2.在PDC上，我们可以ping外部时间源（即能ping通NTP所在的服务器的IP地址）。</p>
<p>然后，我们可以尝试以下的通过修改PDC注册表的方法配置外部时间源，具体步骤如下：<br>1.PDC宣布自己是NTP服务器：<br>Path: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Config<br>Key Name: AnnounceFlags<br>Type: REG_DWORD (DWORD Value )<br>Data: 0x5</p>
<p>2.将服务器类型更改为 NTP:<br>Path: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters\Type<br>Key Name: Type<br>Type: REG_SZ(String Value)<br>Data: NTP</p>
<p>3.启用NTP服务器：<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer<br>Key Name: Enabled<br>Type: REG_DWORD<br>Data: 1</p>
<p>4.指定哪个服务器作为NTP服务器：<br>Path: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters<br>Key Name: NtpServer<br>Type: REG_SZ(String Value)<br>Data: Peers  （例如：s1a.time.edu.cn,0x9）<br>对于NTPserver键值中，timeserver,0x9的含义，有如下解释：<br>0x9其实是两种标识的组合，即0x1和0x8。在w32time中，共有4种基础标识。<br>0x1 specialinterval<br>0x2 useasfallbackonly<br>0x4 symmatricactive<br>0x8 client<br>在NTP同步机制下，当设置0x1标志位后，取样时间可以由specialpollinterval控制。W32time会根据设置值进行取样，默认为3600秒。如果环境内有两台NTP server作为时间源，而其中一台NTP server配置了0x2 标志位useasfallbackonly，表示该server为备用服务器，仅在没有配置0x2标志位的服务器无响应时才会被考虑。0x8则会把时间服务器表示为对源没有控制权的客户机，并将相关NTP数据推送到其它系统。通常我们会建议将第一台主时间服务器配置为0x9，备用服务器为0xa。</p>
<p>5.只有我们的PDC机器是虚拟机，才需要设置这个注册表。如果不是虚拟机是没有这个注册表的信息。<br>HLM\SYSTEM\CurrentControlSet\services\w32time\TimeProviders\VMICTimeProvider<br>Name: Enabled<br>Type: REG_DWORD<br>Data:0</p>
<p>6.其他的注册表设置只需要保持默认的就可以了，关闭注册表编辑器。使用命令（net stop w32time &amp;&amp; net start w32time）重启时间服务使得以上配置生效。</p>
<p>这样，我们再运行w32tm /query /source，看看还是不是显示“Local CMOS Clock”。如果是，则要进一步检查</p>
<h3 id="默认域组策略"><a href="#默认域组策略" class="headerlink" title="默认域组策略"></a>默认域组策略</h3><p>如果同时启用组策略来同步时间，请确保组策略没有应用到PDC(如果所有角色在一台主机那就是DC)所在的主机。否则在使用w32tm /query /source查询所同步的服务器是会显示使用的是Local cmos clock</p>
<p>打开管理工具—》组策略管理<br><img src="/archives/7bb52d79/6.png" alt=" "><br>要编辑Default Domain Policy 和 Default Domain Controllers Policy，一个是针对域，一个是针对域控。<br><img src="/archives/7bb52d79/7.png" alt=" "><br>把三项都改为未配置，外面还有个全局配置，也要改为未配置。对于域控制器，其组策略上的时间服务选项最好保持在“未配置”的状态。<br>运行gpupdate /force强制刷新，使用w32tm /resync重新同步，再运行w32tm /query /source，可以看到，上面注册表配置的NTP服务器就生效了，不再显示Local cmos clock，再使用w32tm /stripchart /computer:192.168.100.254 可以看到基本上和NTP服务器时间一致。</p>
<h3 id="w32mt使用"><a href="#w32mt使用" class="headerlink" title="w32mt使用"></a>w32mt使用</h3><p>1、除了使用注册表指定外部NTP服务器，也可以使用w32tm命令手动更改:<br>w32tm /config /manualpeerlist:”192.168.100.254,0x9” /syncfromflags:manual /reliable:yes /update</p>
<p>/manualpeerlist表示外部时间源服务器列表，多个服务器之间可用空格分隔，210.72.145.44 是中国国家授时中心的时间服务器ip地址<br>/syncfromflags:manual表示与指定的外部时间源服务器列表中的服务器进行同步<br>/reliable:yes设置此计算机是一个可靠的时间源。此设置只对域控制器有意义。<br>/update向时间服务发出配置已更改的通知，使更改生效</p>
<p>2、显示本地时间与目的时间的时间差</p>
<p>w32tm /stripchart /computer:192.168.100.254 /samples:30 /dataonly</p>
<p>3、显示目前服务器指定的外部时间源</p>
<p>w32tm /query /source</p>
<p>4、恢复Windows Time Service的预设值</p>
<p>net stop w32time<br>w32tm /unregister<br>w32tm /register<br>net start w32time</p>
<p>在域环境中，只需设置根域控制器的外部时间源即可，其它服务器在添加进域中时将自动设置与域控制器时间同步。</p>
<p>改设置可解决域控制器的时间同步问题 如：Time-Service EventID:36</p>
<p>5、 同步时间</p>
<p>w32tm /resync</p>
<h3 id="思科交换机作为NTP服务器"><a href="#思科交换机作为NTP服务器" class="headerlink" title="思科交换机作为NTP服务器"></a>思科交换机作为NTP服务器</h3><p>两条命令搞定：<br><code>ntp master</code><br><code>ntp server 114.118.7.161</code></p>
<p>指定外部网络服务器地址及master</p>
<h3 id="linux主机设置时间同步"><a href="#linux主机设置时间同步" class="headerlink" title="linux主机设置时间同步"></a>linux主机设置时间同步</h3><p>需要安装ntp：<br><code>yum install -y ntp</code></p>
<p>指定服务器地址：<br><code>ntpdate 192.168.100.254</code></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB架构简述</title>
    <url>/archives/5c1c7ec1/</url>
    <content><![CDATA[<p><img src="/archives/5c1c7ec1/1.png" alt=" "></p>
<h2 id="WEB访问过程"><a href="#WEB访问过程" class="headerlink" title="WEB访问过程"></a>WEB访问过程</h2><p>首先简述一下访问网页的过程：<br>在浏览器地址栏输入网址如京东：”jd.com“回车，浏览器很智能，会把你输入的地址转换成标准url即：<a href="http://jd.com/:80">http://jd.com/:80</a>，最后面”/“指请求资源的uri，不带任何字符则是请求根目录，”:80”指端口号，指访问地址的对应端口，默认”/“和80端口会隐藏，让普通用户看起来不疑惑，专注于网页内容。你可能看到返回的网址会变成<a href="https://www.jd.com">https://www.jd.com</a>，是因为京东的web服务器对用户输入的jd.com做处理了，返回一个安全的页面。实际是发送http请求。<br>浏览器会先对域名进行DNS解析，把域名解析成公网地址。浏览器会通过以下几步来获取解析：</p>
<ol>
<li>先检查浏览器本身DNS缓存</li>
<li>查找系统HOST文件是否有对应记录</li>
<li>查找系统DNS缓存</li>
<li>查找本地的DNS服务器缓存</li>
<li>发送DNS请求到根服务器来获得IP地址<br>获取到IP地址后，就向该地址服务器发送HTTP请求，服务器响应请求并返回一个页面，浏览器收到响应后渲染页面。</li>
</ol>
<p><img src="/archives/5c1c7ec1/2.png" alt=" "></p>
<h3 id="从点击访问到看到页面经历哪些时间"><a href="#从点击访问到看到页面经历哪些时间" class="headerlink" title="从点击访问到看到页面经历哪些时间"></a>从点击访问到看到页面经历哪些时间</h3><ol>
<li>DNS解析时间：通常在20-50ms左右</li>
<li>数据传输时间：发送HTTP请求（跟网络带宽有关），接收并返回数据（请求数据内容大小有关）</li>
<li>处理请求时间：建立连接，等待服务器响应（服务器查库，计算，生成页面）</li>
<li>浏览器渲染时间（浏览器算法不一样渲染的时间也不一样）</li>
</ol>
<h2 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a>单机架构</h2><p>LNMP+ECSHOP开源商城搭建在同一台服务器</p>
<ol>
<li>单点故障（可以定期备份）</li>
<li>性能有瓶颈</li>
<li>web和db在一起会相互影响（web忙的时候查询数据库，数据库也很忙，就会很慢，web处理请求就会很慢，就会一堆请求排队，会导致web更慢，这是一个叠加的效应）</li>
</ol>
<h2 id="组件及读写分离"><a href="#组件及读写分离" class="headerlink" title="组件及读写分离"></a>组件及读写分离</h2><p>实现方法：</p>
<ol>
<li>在web1上做负载均衡把请求分发到两台web服务器上，在web2上做备节点</li>
<li>弄两域名如web1.xxx.com和web2.xxx.com，无论用户访问哪个域名都是同一个页面（原理跟游戏选网络节点一样，是电信还是联通或者软件站下载通道），所有技术都是有应用场景，整个框架的设计是根据业务来决定的，而不是新技术。</li>
<li>DNS轮询，使用单条域名绑定多条A记录，有负载均衡的局限性：<ul>
<li>无法快速踢出故障节点：假如其中一台服务器宕机，即其中一条记录失效，需要手动删除失效的记录，但是DNS有缓存时间，在DNS时间失效前，访问就会出问题，当然可以使用脚本当宕机就直接切换IP。</li>
<li>负载不均衡：服务器硬件配置不同，DNS缓存影响，不同地区DNS缓存劫持不一样，有些地区永远获取到同一个地址</li>
</ul>
</li>
</ol>
<p>DNS轮询应用场景：</p>
<ol>
<li>有多个集群，有多个A记录，配成智能DNS，根据客户IP来做</li>
<li>全局负载均衡</li>
<li>用于主机流量的切换或节点的替换，给域名添加多一条记录就是新主机IP，在DNS失效前就是用DNS轮询</li>
</ol>
<p><img src="/archives/5c1c7ec1/3.png" alt="单机架构到集群演变"></p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>什么是集群<br>多台同构或异构的服务器集中起来对外提供相同的服务，可以叫这堆服务器做集群，服务器不一定是要全部是linux或windows的，也可以是异构的。<br>分类：</p>
<h3 id="负载均衡LB"><a href="#负载均衡LB" class="headerlink" title="负载均衡LB"></a>负载均衡LB</h3><p>提高资源利用率，使用多种调度策略，尽量把任务分发得更均匀。当出现故障能够快速切换，但不能把负载均衡配置在web服务器上，可以放到DB服务器上，因为要有第三方仲裁才能确保宕机的消息是可靠的。不能单纯PING不同就认为节点DONM了，有可能是到该节点的网络不通，也可能是网络拥堵，并不意味着服务器宕机，如果这时候切换，就会造成混乱。需要过一段时间再尝试PING，需要有次数限制，如果再不通，就设置一个SLEEP时间，过了SLEEP时间再尝试。经典案例是支付宝回调通知的一种方式。实现：</p>
<ol>
<li>DNS轮询</li>
<li>HTTP重定向：使用location跳转，一般为业务原因需要用到，或者备案原因</li>
<li>反向代理：代理用户的请求，向真实服务器发送请求，再把结果返回给用户，下载类网站不适合使用反向代理局限于带宽和性能问题，如果是下载类很容易把带宽占满，同时有高并发的情况，性能会很差。可以马上停掉从库，主库读写，然后从库再弄一个反向代理来分流，后面再优化架构。</li>
<li>IP负载均衡：<ul>
<li>如LVS的NAT模式：LB充当网关的功能，用户发送请求，目的地址是VIP虚拟IP，源地址是用户IP，到达LB设备后进行调度，发送数据包目的地址为服务器IP，源地址是用户IP，到达服务器后，服务器根据用户IP发送给网关，也就是LB设备，LB设备再修改数据包，把源IP改为VIP。这样最大特点是服务器的网关必须要设置成LB服务器的VIP，不然就无法通讯，LB设备对双向的数据包进行改写，与反向代理不同的是，LVS不向用户负责，只负责转发，不负责请求。而且LVS不支持健康检查，健康检查是keepalived或者是其他软件如heartbeat里面的active director做的。</li>
<li>LVS的DR模式：用户请求到达LB设备，LB设备进行调度，转发数据包到服务器，服务器直接返回给用户，不再经过LB设备。此模式实际上是二层负载均衡，LB设备只修改MAC地址（ARP协议）。缺点是配置麻烦，不能跨局域网，监听端口不能改。下载类可以用DR模式，少了一次转发。</li>
</ul>
</li>
</ol>
<h3 id="高可用HA"><a href="#高可用HA" class="headerlink" title="高可用HA"></a>高可用HA</h3><p>健康检查，高可用性，防止脑裂—仲裁设备：关机。两台反向代理服务器合理利用如何实现：</p>
<ol>
<li>多组互备：使用两套集群，集群A中代理A为主，B为备，集群B中代理A为备，B为主。缺点：雪崩效应</li>
<li>备机做服务器监控，数据库备份或者定时任务等</li>
<li>做web节点</li>
</ol>
<h3 id="高性能HPC"><a href="#高性能HPC" class="headerlink" title="高性能HPC"></a>高性能HPC</h3><h2 id="WEB架构集群"><a href="#WEB架构集群" class="headerlink" title="WEB架构集群"></a>WEB架构集群</h2><h2 id="WEB架构缓存"><a href="#WEB架构缓存" class="headerlink" title="WEB架构缓存"></a>WEB架构缓存</h2><p>打开京东网站，查看源代码，可以看到有link rel的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//misc.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img10.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img11.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img12.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img13.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img14.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img20.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//img30.360buyimg.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//d.3.cn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//d.jd.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//www.jd.com/favicon.ico&quot;</span> <span class="attr">mce_href</span>=<span class="string">&quot;//www.jd.com/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个是HTML5的新功能，叫DNS预获取。在HTTP头部插入，把页面内所有需要获取DNS的元素先获取缓存一遍，这样当请求到对应资源的时候就会很快。</p>
<h2 id="WEB架构存储"><a href="#WEB架构存储" class="headerlink" title="WEB架构存储"></a>WEB架构存储</h2><h2 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h2><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有绝对好的架构，只有合适的架构，当引入一个新的架构，解决了当前问题，同时也会产生其他问题。没必要指点他人架构，存在即合理，当你看到别人的架构，多想想为何这样用，这种架构的好处是什么，优点是什么。一个好的架构，就是在有限的资源里，把架构做到最优，能充分利用所有资源，达到最大的效果。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>解密中国地图里暗藏的天机，看完后发现历史和地理统统白学了！</title>
    <url>/archives/d9b6b8be/</url>
    <content><![CDATA[<p>作者：长河飞舟 来源：天涯-纵论中西全史</p>
<p><img src="/archives/d9b6b8be/1.jpg" alt></p>
<p><img src="/archives/d9b6b8be/1.png" alt=" "></p>
<p>喜欢历史但地理太差，以至读过的历史都白读，只能记住雏形。怎么办？来读长河飞舟的这篇关于中国古代军事地理的雄文就够了。</p>
<p>说起古代的中华大地，经常会提及它的一个别称，九州。关于“九州”是哪九个州，历代划分有所不同。见于古籍的，《周礼》、《禹贡》、《吕氏春秋》、《尔雅》等就有多个版本。</p>
<p>这里我们不去细究九州的划分，但我们借用这个概念，将中国约略画成一个九宫格，就有了中国历史上的九大军事战略要地。</p>
<p>我先把这个九宫格画出来，然后再一一加以解说。</p>
<center>关中 山西 河北</center>

<center>汉中 中原 山东</center>

<center>巴蜀 荆楚 江东</center>

<p><img src="/archives/d9b6b8be/2.png" alt=" "></p>
<p>现在，建议大家手边准备一幅中国地形图，下面我们会具体来说说这九个地区的地形结构。其间会多次提到山脉、河流、城市，如果对照地图，看起来会更加有趣一些。</p>
<p>评价一个地方是不是战略要地，主要就是两大要素：其一，山；其二，水。也就是古人常说的山川之险。</p>
<p>山的作用毋庸置疑，在飞机发明之前，高山几乎就等于不可逾越。那么在山脉之间的一些谷道，就成了连接两大区域间的唯一通道。历史上又经常在这些谷道上修筑一些易守难攻的关隘，就成了兵家必争的咽喉要道。</p>
<p>河流同样具有防御作用，但不如山脉那样明显。然而河流却同时具有另外两大功效：一，交通运输；二，农田灌溉。一个光险要而没有经济实力的地域是缺乏战略价值的，因而山、水两要素，必不可少。</p>
<p>就这两条而论，中华大地上最为得天独厚的地方，莫过于秦国的故土——关中。</p>
<p><img src="/archives/d9b6b8be/3.png" alt=" "></p>
<center><font color="orange" size="4">01：关中</font></center>

<p>在中国历史的很长一段时间里，关中都是绝对的天下第一重地。这重地的中心，就是中国第一古都，长安。</p>
<p>长安周围，是渭河、泾河、洛河以及它们的支流所冲出来的一些平原，统称关中平原。周族人的老家，秦国的老家，都在这附近。因此这里也是中国开发最早的地区，沃野千里，人烟稠密。</p>
<p>这些河的许多支流，都从长安旁边流过，古有“八水绕长安”之说（泾、渭、灞、浐、丰、镐、潦、潏），简直就是天然的护城河。秦与西汉年间，又不断在此地修建水渠，使得长安周边无论是交通还是防御，都极其发达。</p>
<p>这说的是关中的腹心之地。下面再向外延伸，说说关中的四面边界。</p>
<p>关中最扎实的边界，当属南边的秦岭。秦岭是相当险峻的一条山脉，海拔在2000米以上的就有好几座，以奇绝壮美著称的华山也是秦岭的一支（不过海拔只有 1000米左右）。诸峰之中最重要的，是秦岭东段的崤山。我们还记得中国历史上最早的一场歼灭战，先轸导演的崤山之战就发生在这里。到战国初期，秦国就在崤山北麓上修建起了一座天下名关——函谷关。</p>
<p><img src="/archives/d9b6b8be/4.png" alt=" "></p>
<h3 id="函谷关"><a href="#函谷关" class="headerlink" title="函谷关"></a>函谷关</h3><p>函谷关夹在崤山与黄河之间，旁边就是三门峡，与中条山隔河相望。也就是说，无论从南边还是北边，除非大范围迂回，否则很难绕过这里。它牢牢扼住了关中与中原的咽喉。只要守住这里，中原势力很难进入关中。战国时代，就有好多次多国部队攻打函谷关未遂的事情。</p>
<p>除了南边的秦岭之外，关中西边是陇山，北边也是群山环绕，只有东部边界的黄河算是稍稍容易过的地方了。所以战国时期秦魏对河西之地展开激烈争夺，争的其实就是关中的门户。</p>
<p>另外，除却函谷关，关中东南有武关通向中原，西南有散关通向汉中，西北萧关则是长安出发的丝绸之路上的重地。这四关史称“关中四塞”，差不多是进出关中最直接的四个直线出入口。其余的路，走起来就不大方便了。这一点我们后面还会提到。</p>
<p>关中就成了进可攻、退可守，安全而又富庶，这就难怪“得关中者王天下”了。</p>
<p><img src="/archives/d9b6b8be/5.png" alt=" "></p>
<p>山西（西边和南边的黄河边界很明显，大家注意一下东边的太行边界）</p>
<center><font color="orange" size="4">02：山西</font></center>

<p>从关中向东，便是山西。所谓“山西”，是说太行山脉以西，指的是黄河“几”字右下角的直角弯与太行山夹出来的一个长条地带。</p>
<p>这也算是一个被包起来的地方。东面太行山脉极长，其间只有著名的太行八陉与东面的河北相通。它西面和南面的黄河内岸还有吕梁山、中条山为屏障，北面便是中华与蒙古草原的重要分界线阴山山脉。阴山以南，云中、雁门这等重要关隘把守着中国的北面门户。</p>
<p>整个山西地区，就像楔子一样插进关中与河北之间，是整个中国北方的枢纽地带。战国时秦图大业，商鞅力主首先攻魏；楚汉相争韩信略定北方，也自山西始。日后更有不计其数的大战在山西地带展开。</p>
<p>但山西内部的地形，就不像关中那么好。虽然一条汾河贯穿南北，可其间大小山脉交错纵横，使得山西很容易分裂成小的政治集团，所以历史上经常由外部力量统一山西。而山西一旦统一起来，由于它四面均易守难攻，就成了一个极佳的战略地带。</p>
<p><img src="/archives/d9b6b8be/6.png" alt=" "></p>
<center><font color="orange" size="4">03：河北</font></center>

<p>从山西向东，来到河北。河北，自是指黄河以北。它南面是黄河，东、西、北三面又分别由渤海、太行山、燕山所包，据此亦可割据一方。</p>
<p>然而河北之地，没有关中八百里秦川的富庶，也不如汾河流域各平原丰饶，反而还饱受黄河改道的水患。自古它都不是一个经济发达地区。</p>
<p>但有一点，河北民风彪悍。燕赵多悲歌慷慨之士，自古闻名天下。赵武灵王胡服骑射之后，河北更是中国骑兵的重要产地。因此，凭借河北精兵，妥善运用，亦可与天下争雄。</p>
<p><img src="/archives/d9b6b8be/7.png" alt=" "></p>
<center><font color="orange" size="4">04：山东</font></center>

<p>由河北向南跨过黄河，便是山东。</p>
<p>前面讲关中、山西、河北，都说了四面屏障。可是对山东来说，没有。它除了东面的渤海、黄海算是安全之外，其余三面，几乎无险可守。整个山东地区一马平川，一打就穿。战国时乐毅一口气吃掉整个齐国，然后田单又一口气将整个齐国吃回来，这种事情，也只有在山东地区才会出现。</p>
<p>但山东却又是兵家必争之地，为什么呢？原因很简单，这里很富。</p>
<p>山东渔盐之利天下闻名，而且山东也是中国传统的工商业发达地区。平原之上，粮食自然也相当充足。此地便成了历史上重要的经济基地。</p>
<p>对于山东的战略地位，清代地理大家顾祖禹在他的名作《读史方舆纪要》中写道：”山东以自守则易弱以亡，以攻人则足以自强而集事。“堪称至理。</p>
<p><img src="/archives/d9b6b8be/8.png" alt=" "></p>
<center><font color="orange" size="4">05：中原</font></center>

<p>山东向西，便是古代中国的中心地带，自古战事最为激烈的地区——中原。</p>
<p>逐鹿中原、问鼎中原……尽管没有什么割据势力是从中原起兵的，但任何有野心的人物，心里都装着一个中原之梦。</p>
<p>至于中原地区究竟是个什么概念，说起来却有些复杂。我们只得将其再细分，划成四个小区域。</p>
<center>三川 河内</center>

<center>南阳 淮上</center>

<p>西北，为三川河谷。所谓三川，指的是黄河、伊河、洛河冲积出来的小平原，中原重镇洛阳正位于其上。三川地区除了北临黄河之外，三面环山。山间亦有险关，西面是函谷，东面是成皋，南面是伊阙，北面是黄河南岸的重要渡口孟津。这四处都是历史上的知名地带。函谷自不必提；当年刘邦为了给韩信的战略包围赢得时间，顶住项羽的疯狂进攻，守的便是成皋；战国时秦国与魏、韩争夺伊阙，白起斩杀二十四万人，足见此地之重要；周武王”八百诸侯会孟津“，虽有传说成分，但也能说明孟津的地位。三川河谷，可谓中原的重中之重。</p>
<p>西南，为南阳盆地。此地地势虽说不上有多险要，但确实是兵家必争的枢纽之地。它北面，是中原重地洛阳；西北面的武关是关中门户；南面的汉水、方城山又是荆楚的门户；另兼西接汉中、东临江淮，四通八达，不可不取。历史上，围绕南阳盆地两大重镇宛城、襄阳，发生的战争故事数不胜数。</p>
<p>东南，为淮河上游地区。此地最大的特点，河流众多，淮河、汝河、颍河、涡河、汴河等等，水运发达，堪称中原水系的命脉所在。我们知道在古代，河运极其重要，走水路比走陆路便宜太多。因而掌握这片地区，对于本国经济发展至关重要。又加上南面靠着大别山，是中原少见的有所屏障之地。</p>
<p>东北，是太行山与黄河夹出的一个区域，是关中、山西、河北、中原之间的一个过渡地区。汉代在此置河内郡，郡治在今河南沁阳地区。在即将讲述的刘秀统一战争中，此地便被刘秀定为兵马、粮草的转运中心。可见这里与中原其它地区一样，起着至关重要的枢纽作用。</p>
<p>以上讲到的五大战略要地，主要位于黄河流域，基本属于我们概念中的北方。在历史进行到公元前后，中国北方的生产力水平，远胜南方。因此以上五个地区，是之前历史的主体地区。但下面的四个地区，将在日后的历史中发挥越来越重要的作用。</p>
<p><img src="/archives/d9b6b8be/21.png" alt=" "></p>
<p>整个中原：</p>
<p>西北洛阳附近为三川河谷</p>
<p>西南以襄阳、南阳（即宛城）为中心为南阳盆地</p>
<p>东南为淮河上游</p>
<p>东北黄河流域为河内</p>
<p><img src="/archives/d9b6b8be/16.png" alt=" "></p>
<center><font color="orange" size="4">06：汉中</font></center>

<p>中原西边，为汉中。汉中地区，是秦岭和巴山之间夹出来的一个长条地带。秦岭隔开了汉中与关中，巴山则把汉中与巴蜀分在两侧。</p>
<p>汉中这个地方，在九大战略要地里面差不多是最小的。单独占据汉中，很难成事，必须要向关中或者巴蜀挺进，才能把根据地建得更加厚实。所以汉中的意义，主要在于与关中和巴蜀的联系。</p>
<p>汉中与关中隔着秦岭，其间只开了四条谷道曲折相通。自西向东，分别是陈仓道、褒斜道、傥骆道、子午道。</p>
<p>陈仓道自不必说，韩信暗度陈仓之策已是中国战史的经典，它的北口正是关中四塞之一的散关。褒斜道并不出名，但却开发最早，当年司马错正是从此道进入汉中，进而拿下蜀地的。傥骆道最为险峻，极少用兵，更加少为人知。而子午道却由于《三国演义》的宣传而极其有名。它实际上是公元5年才开发出来的，而且相比其它的谷道也有些绕远，当时不太受重视，所以魏延才觉得能起到奇袭的效果。</p>
<p>至于汉中与巴蜀间的巴山之中，谷道更少，只有两条。其中直通成都的叫金牛道，由于路途最短，最直接，所以为兵家必争。道上的剑门关也是古代名关之一，李白《蜀道难》中创造的名句“一夫当关，万夫莫开”，就是说这儿的。金牛道东边，还有条米仓道，就需要从巴中、阆中，绕到成都了。</p>
<p><img src="/archives/d9b6b8be/17.png" alt=" "></p>
<center><font color="orange" size="4">07：巴蜀</font></center>

<p>下面我们就顺着这两条谷道穿过大巴山脉，来说说巴蜀之地。</p>
<p>就防御的角度而言，巴蜀比关中更加稳固。其南面是云贵高原，西面是青藏高原，敌人根本不可能攻上。仅有的两条通路，在北边和东边。</p>
<p>北边我们说过了，掐住剑门关，守住米仓道，便可保巴蜀腹心成都的安全。而巴蜀的东面门户，在重庆。重庆是全国有名的山城，因此从东面陆路进攻巴蜀，几乎不可能，只能走长江水路。而巴蜀又位居长江上游，顺流而下易，逆流而上难，加之有三峡阻隔，可谓万无一失。</p>
<p>所以说，巴蜀之险，几不可破。但这里有个问题，就是崇山峻岭太多，外面不容易进去，里面也不容易出来。因此巴蜀最容易出现局部割据的势力。然而，一旦巴蜀脱出局域，则变得极其重要。与东面的荆楚相连，则占尽长江天险，足以与北方抗衡；与北面的关中、汉中相连，则可顺流而下，直取荆楚、中原。加之成都平原也是一个巨大粮仓，使得巴蜀虽不是兵家必争（因为很难打下来），却是得之可安天下的重地。</p>
<p><img src="/archives/d9b6b8be/18.png" alt=" "></p>
<center><font color="orange" size="4">08：荆楚</font></center>

<p>从巴蜀向东，跨过长江三峡，便是荆楚之地。这是整个南方的枢纽地带。与巴蜀相连，则顺江而下，江东岌岌可危；与江东相连，则据守三峡，足可困死巴蜀；又凭借长江、汉水之险，堪与北方对峙。任何一个立足于南方的政权，如果不拿到荆楚，就不会任何前途。因此，有人统计说《三国演义》一百二十回里有七十二回提到荆州，就是这个道理。</p>
<p>中国历史越往后发展，长江流域越发重要。</p>
<p><img src="/archives/d9b6b8be/19.png" alt=" "></p>
<center><font color="orange" size="4">09：江东</font></center>

<p>我们再从荆楚顺江而下，便来到了我们九宫地域的最后一站——江东。</p>
<p>由于长江在安徽境内拐向东北，所以长江中下游的皖东南、江浙一带，历史上又称江东。此地是中国地图上水网最密集的一个地方。因而北方铁骑要想从此地跨江南渡，几乎不可能，必须取道荆楚。因而江东政权只要在西线防住荆楚，便足可割据一方。若能拿下荆楚，便有望争雄天下。春秋时期吴国可以置其余大国于不顾，盯着楚国打，就是这个道理。只不过没想到侧背出了个越国，才骤然灭亡。若吴越连成一体，则大事可图。</p>
<p>又由于发生在江东内部的战事极少，北方由于战乱所致的流民大量涌入江东，使得这个地区在历史上是越来越发达。江南鱼米之乡，三江五湖之利，此地便渐渐成为中国新的经济重心所在。</p>
<p>江东政权的另一个优势，就在于与它隔江相望的江淮之间地区，常常是各方势力的真空地带。它便很有机会跨过长江，在江北淮南之地建立根据地，为北进中原做好准备。</p>
<p><img src="/archives/d9b6b8be/20.png" alt=" "></p>
<center><font color="orange" size="4">10：简论</font></center>

<p>关中、河北，居高临下，为天下之上游，西北、东北之边患，泰半源于两地。</p>
<p>山西又为关中、河北之上游，自古山西攻河北易，河北攻山西难，如高欢之并尔朱，则追亡逐北之余也。刘秀之入河东，则所对皆乌合之众也。</p>
<p>山西的优点是形式完固，自成一国，应有尽有，春秋时晋以此立国争霸，缺点是出击不如关中、河北平坦方便。山西吕梁、太行包住的中间类似于一个葫芦，葫芦腰容易被切断。</p>
<p>山东似一小关中，故齐之地，东有大海，西有大河，南有穆陵关，亦非全无险要可守，且擅渔盐之富，也是根据地的一选，后期运河发达，更是掐死北方咽喉，朱元璋取大都，则先定山东，断其运道，不过确实是利攻不利守。</p>
<p>洛阳西有崤山、函谷，东有荥阳、虎牢，北有黄河、孟津，南有龙门、伊阙，看似天险，实为天牢，因为从四处险固进至洛阳城下，都只须一天，战略纵深狭小，所以张良反对在此建都。</p>
<p>后来李世民灭王世充，大部分时间都用在攻占洛阳周围的据点上，等到占领四处险要，反而方便唐军阻断救援，王世充空有河南、安徽的大量援兵，只得做了瓮中之鳖，就连来救的窦建德也屯兵虎牢关下，被李世民寻机一并灭了。唐军河阳之溃后，李光弼弃洛阳守河阳，就是把史思明关进了天牢，任自己揉捏。可见洛阳看似天险的迷惑性害人不浅啊。</p>
<p>此外，方城山似在伏牛山与桐柏山交界之处，南阳盆地北端，而非南端。方城以为城，汉水以为池，比喻说法，二地貌似相距甚远。</p>
<p>楚灭申、邓，得方城，强则从此进取中原，宰割陈蔡郑宋，弱则退入方城，据此自守，晋人悬师在外，束手无策，且由于山西南下不易，晋人行动常比楚人慢半拍，直至用孟献子之策筑城虎牢，取得战略前沿。</p>
<p>荀文若曰：昔汉高据关中，光武定河内，皆深根固本以致天下。</p>
<p>后汉之世，寇恂则比于萧何，邓禹则差强张良，耿弇则仿佛韩信，但又都是缩水版。</p>
<p>以下内容来自问答平台：</p>
<p>01：为什么东周时的齐国灭亡之后，今山东省地区再没有作为独立而有重要影响力的割据板块出现过？</p>
<p>齐鲁的战略形势就是因为地理吃了亏。黄淮海平原一马平川，华北一体，山东丘陵地势稍高，但实在没有资质可以摆脱和燕赵淮泗一体的大格局。</p>
<p>山西同属华北。但西有黄河，与同样黄土高原的关中隔断，东有太行，与河北山东隔断。所以北方分裂，关中与河北为两个中心争夺北方，山西夹在其中，谁有了晋阳这个砝码，谁就基本稳赢了。</p>
<p>山东齐鲁不同。东边靠海，虽是边角，但没有秦楚那样大后方战略纵深。</p>
<p>更加没有肴函那样雄视天下的险要，他的命运只能被定格在附属于以河北为中心的关东集团，或臣服于以关中长安、河南洛阳为中心的北方、大一统天下。</p>
<p>偶然有几个例外爆表的超常表现。但也就蹦达那么几下。</p>
<p>但是说齐鲁之地内乏强兵，这就太绝对了。</p>
<p>齐国的崛起，占了开发优势、边角地理天然决定，以及经济发展。</p>
<p>最重要的一点。齐国开发的好，和中原一样甚至后来居上，现在也是，人口前几的人口资源大省。</p>
<p>人口分布密集，人口资源充足。</p>
<p>最直观的表象是什么？</p>
<p>人口多，从事农业人数足够，经济发展支柱完备，兵员充足，一整个逻辑链条下来，结果就是军事能力强！</p>
<p>岂不闻战国齐技击，魏武青州兵乎？</p>
<p>综上两点，这样一个有强大军事潜力的地方，同时又没有险要的地方，想控制他怎么办呢？</p>
<p>把他分割了！</p>
<p>齐鲁地大。秦并天下三十六郡，齐地分为齐郡、琅琊郡、薛郡三地。</p>
<p>刘邦出于其他考虑把整个齐地封给了大儿子刘肥，希望凭借齐王七十余城的强大力量牵制吕氏。后来铲除诸吕，内有周、陈勋戚，外有齐王宗室，朱虚侯居中协调，一举事成！</p>
<p>齐悼惠王刘肥者，高祖长庶男也。其母外妇也，曰曹氏。高祖六年，立肥为齐王，食七十城，诸民能齐言者皆予齐王。</p>
<p>可惜最后帝位没落在齐王支系上，给了戍边母家地位低微的代王文帝。</p>
<p>吕后已经早于文帝开始把齐国瓜分削弱了。</p>
<p>汉代的情况，看这张图就够了。齐鲁之地被青州、兖州、徐州瓜分，三州治下十数个郡国。这样你还能希望他作为整体有啥作为？</p>
<p>再给大家看看齐鲁在春秋战国时的大致范围。面积要比现在山东一省要大得多。还有它最盛时的声威，青州齐鲁本地，河北河南三大区域交接交通枢纽：兖州大部。再控制淮泗。这不是和秦国一样的东西二帝，还有别的人选吗？！</p>
<p>这是剧本乐毅伐齐的疆域全景。当然，这时候是齐国刚吞并宋国，很快就五国伐齐。齐国过度扩张成了众矢之的。之后复国达到了它的理想疆界。</p>
<p>战国时三晋错综复杂的交界，我中有你，你中有我是大难点，我曾经研究过，韩魏易地，赵魏易地，都产生了很大影响。</p>
<p>就这样，自秦汉之后，对这个有军事潜力、无险要地势的齐鲁，历代进行了尽可能最大化的分割治理。他想割据有所作为都难。</p>
<p>天下大分裂时一般作为以河北为中心的政治集团附属组成部分。大一统就被管的死死的。</p>
<p>但也有例外的时候，中晚唐淄青镇成为全国最大藩镇，为祸百年。</p>
<p>之后的时代，全国政治中心东移，长安、洛阳、南京、开封、北京。京杭运河，南北沟通。山东位于南北两个政治中心，南京北京交通必经之路。给控制的不能再死了。实在蹦达不了了，乖乖听两个老大哥的话。</p>
<p>综上，因为历代对齐鲁地区行政地区的规划施行分割压制政策，加上自身外无险要的特点。</p>
<p>齐鲁地区本身很难以在历史进程中以自己为核心根据地统治天下，说白了就是不适合做京畿，全国政治中心。</p>
<p>偶然的几个历史机会凭借军事潜力起家可以，比如：魏武帝借兖州之地，青州之兵起家。但发迹后，仍旧必须要把政治中心迁往河南内地，天下之中。</p>
<p>02：为什么秦汉以降，崤山、函谷关作为关隘的防御效应远不如先秦时期那么大，以至于后世史书上都不再怎么提及了？</p>
<h3 id="文：三种不同的红色"><a href="#文：三种不同的红色" class="headerlink" title="文：三种不同的红色"></a>文：三种不同的红色</h3><p>先说说函谷道的问题。</p>
<p>函谷道，有广义和狭义两种说法。</p>
<p>广义上的函谷道，指的是从函谷关到潼关之间长140里的道路，这条道路并不是一直狭小，事实上，它虽然非常险峻，倒也没有到“深险如函”的地步，中间也有好几个地方可以离开这条函谷道而转入他途。</p>
<p>真正的“函谷”，是指的狭义上的函谷道，这条道路长度仅仅15里，它其实是稠桑原上的一条裂缝。稠桑原是典型的黄土高原上的塬的地形，顶部平坦如原，但高度非常高，四周峭壁陡立，黄河从稠桑原北面流过，紧贴着原壁，所以东来的行人要进入关中，没有其他道路可以走，只能从这条裂缝通过。这条裂缝中，绝岸壁立，宽不过数米，真正的是“车不能方轨，马不能并鞍”。古代形如函谷关之险要，往往用一个词来形如，叫“丸泥可塞”，这四个字真不是夸张，函谷确实是丸泥可塞。</p>
<p>函谷关就位于这条裂缝的开口处，也就是今天河南灵宝县的王垛村。在稠桑原的东面，也就是函谷关的关前，就是弘农河（提起这条河，估计没几个人知道，但它有条支流却是大大有名，叫做断密涧，即李密丧命之所，将军犯地名啊）。今天看来弘农河水量很小，但在古代却不是这样，因此弘农河就成了函谷关天然的护城河，敌人要进攻函谷关，就必须先渡过弘农河，这已经是非常不容易的，而渡过河之后，由于弘农河紧贴着稠桑原东侧而流，河岸和关城之间的只有一条狭小的窄路，无论敌人有多少兵马也无法摆开，这是函谷关又一险要之处。</p>
<p><img src="/archives/d9b6b8be/9.png" alt=" "></p>
<p>这是函谷关的模型。两边高地即稠桑原，中间裂隙即函谷，关城建在裂隙口，关前即是弘农河（模型没有显示出来）。</p>
<p>到今天，由于水土流失函谷已经基本湮没，但还有遗迹可寻。在河南灵宝县的王垛村，有一条沟壑，长7里，深有17米，这就是当年函谷的遗迹。</p>
<p><img src="/archives/d9b6b8be/10.png" alt=" "></p>
<p>这是谷歌地图上的函谷遗迹，那条纵贯东西的大沟就是当年函谷，王垛村所在就是当年的函谷关。</p>
<p>从地图上来看，稠桑原上道路纵横，毫无天险可言，那为什么古代非要钻那条函谷呢？那是因为古代的稠桑原上都是森林，——听这个名字就知道了，“稠桑原”，可知其上桑树是何等密集。其实不单单是稠桑原上森林密布，从崤山到潼津，古代称作“桃林之塞”，又叫“松柏之塞”，可知这一百多里路，到处都是密集的森林。春秋时晋国曾派人驻守桃林之塞，以遏制秦国东进。其实驻守的地方就是后来的函谷关。——正是由于原上森林密布，人不得通行，只能在原体的一条裂缝中行走。所以只要扼守住这条裂缝，就能断绝东西交通。</p>
<p><img src="/archives/d9b6b8be/10.png" alt=" "></p>
<p>这是今天函谷的模样，这么窄小的一条沟壑，自然是千百年来缺少维护塌方淤积的结果，但从这里却可以明显的知道什么叫做“丸泥可塞”。</p>
<p>函谷关为什么后来荒废了？</p>
<p>那是因为在汉武帝年间，汉武帝把函谷关向东挪动了300多里，挪到了新安。</p>
<p>为什么汉武帝要把函谷关挪到那地方去呢，按照传统的说法，说楼船将军杨仆，数立大功，但深以自己为关外之人而羞耻，因此向汉武帝请求，不愿封赏，但愿为关内人。于是为了照顾他，汉武帝就把函谷关向东移动了300多里，把杨仆的家乡圈了进了。现代有一些学者（如辛徳勇）不认同这种说法，说简直胡扯，杨仆算个神马东西，汉武帝犯得着为了他挪动函谷关？汉武帝挪动函谷关的真正原因，是为了扩大关中的领地。</p>
<p>不管怎么说吧，反正是汉武帝下令在新安重建了一座关城，并命名为函谷关，把原有的老关城毁弃，在其上建立了弘农县。</p>
<p>这样，从汉武帝开始，所说的函谷关就不再是战国、秦朝时说的函谷关了，而是新安县的那个。</p>
<p>但是，新安的函谷新关形胜远不如故关，在战略上的意义大大降低，而且并没有发生过大的战役（因为不是兵家必争之地了，比如赤眉入关中，就是兵分两路，绕过函谷新关，会师于弘农县（也就是函谷故关），由于弘农没有防御，因此得以轻松进入关中），所以新关的知名度远远小于故关。</p>
<p>正因为新关在军事战略上不能完全取代故关，所以新关虽设，但故关的战略任务仍然存在，只不过是由弘农县来承担罢了。但函谷关的荣耀毕竟雨打风吹去，我认为这里面的原因，除了新关迁置之外，故关（即弘农）附近的地形变化也应该是重要原因。</p>
<p>函谷故关的天险，实际上依赖于两点，一是黄河紧贴着稠桑原北壁而走，不留一点空隙。二是稠桑原上森林密布，人不得通行。但这两点都是非常容易发生变化的。</p>
<p>稠桑原是典型的黄土高原的地形，黄土高原的重要特性就是土质疏松，非常容易流失，特别是在流水作用下，河流的下切现象非常明显。一开始时，黄河紧贴着稠桑原，但随着河流不断冲刷，河道不断下切，黄河水位也随之不断降低，原来紧贴着原体的河道就会裸露出来，形成河滩。而这河滩一旦形成，函谷关的天险就将不复存在，因为人们都从河滩走了，千军万马不再挤函谷那条裂缝了。河滩的这条新路，在东汉末年就已经形成了，曹操征伐关中，因嫌函谷险恶，于是命令许褚于故关以北十里处凿建新路，并在那里建立了关城，史称魏函谷关。魏函谷关这条道，其实就是在黄河裸露出的河滩上形成的。随着新路的开辟，函谷故关的战略重要性极大的降低了。汉代弘农县城在函谷故关的关址之上（即今王垛村），但隋朝时将县城移往黄河边，其实就是为了封锁河滩上的那条新大路。从此之后，县城就一直在黄河边上，直到解放后，因为要修建三门峡水库，才将灵宝县城向南迁移到今天的地方。</p>
<p>另外，稠桑原上森林的消失，也使得函谷关的天险不再。那些森林是什么时候消失的，现在已经无从稽考，但可以肯定的是，森林的消失，必然导致函谷关丧失其战略意义。</p>
<p>再说潼关。</p>
<p>潼关之名首见于史册，是曹操大战马超，所谓割须弃袍于潼关，夺船避箭于渭水是也。因此有理由相信，潼关始建，应该在东汉末年。</p>
<p><img src="/archives/d9b6b8be/12.png" alt="函谷关、函谷新关、潼关关系图"></p>
<p>潼关的地形也非常险要，它位于渭河与黄河的交汇点，春秋时称渭汭，对面就是黄河的重要渡口风陵渡。在黄河的南面，有两条河流，西面的一条叫潼水（这也是潼关得名的原因），东面一条叫远望沟，在潼水（及其支流禁沟）与远望沟之间，是一个塬，宽有两公里，高六、七百米，由于两侧常年被水流冲刷，因此峭壁陡立，非常险峻。在塬的北面就是黄河，和函谷关一样，黄河紧贴着塬体流淌，没有任何空隙，使得每个向西行进的人，都必须通过原上，而再无其他路可走。</p>
<p>要登上塬，就只有一条路可以通行，叫做黄巷坂，这条路和函谷一样，南面紧靠高原，北面和黄河之间有一高岸隆起，形成了南依高原，北临绝涧的形势，中间唯一孔道，宽仅数米，也是丸泥可塞，非常险峻。这条黄巷坂，当地人也叫“五里暗门”，“五里”言其长度，“暗门”形容其险峻。我记得上世纪90年代时，央视有一纪录片《孙子兵法》，片中编导人员走访潼关，在五里暗门经过，即使在屏幕中看，其险峻也是令人心惊胆战。</p>
<p>前面说函谷道有广义和狭义两种，狭义的函谷道仅仅指稠桑原上的那条孔道，但广义的函谷道指的是从函谷关到潼关整个140里长的道路，这140里的道路，其起点是15里函谷，其终点就是黄巷坂这条5里暗门，都是丸泥可塞的险峻之所，可谓造物奇绝。</p>
<p>沿着黄巷坂上了塬，就到了潼关。和函谷关不同，潼关并不是建在孔道的起点，而是建在了孔道终点的高原之上。</p>
<p><strong>“古今智谋”</strong>，读历史、懂智谋、学为我用！</p>
<p>在潼关之西，就是潼水及其支流禁沟。其中禁沟深数十米，其险峻超过了潼水，是潼关西面的屏障。然而，禁沟虽然阻断了东西，但禁沟之内仍可南北通行，当人们从黄巷坂登上塬头，经过潼关后，就由潼关南行，抵达禁沟，然后再从禁沟北上，到达禁沟与潼水的交汇点潼河沟口，出潼河沟口后，就可以沿渭水直奔长安了。</p>
<p><img src="/archives/d9b6b8be/13.png" alt="潼关形势图1"></p>
<p>当然，这是汉朝建立潼关时的情况，事实上，潼关和函谷关面临着一个同样的问题，就是黄河的下切。汉朝初建潼关时，黄河紧贴着塬体流淌，要想通过只能登上高原，但随着黄河不断冲刷，河道不断加深，河床不断下降，原来的河床就会裸露出来，形成河滩，从而导致天险不再，行人从黄巷坂出来，不必再登塬，从河滩上过去就行了。如此一来，原上的汉潼关就成为了聋子的耳朵。因此从唐朝开始，就给潼关挪了地方，从塬上移到了河滩，而把原来塬上走禁沟的旧路废止了。</p>
<p>由于禁沟向南可以直抵秦岭，并通向武关，倘若敌人自禁沟北上，就可以到达潼关背后，因此禁谷的防御是潼关防守的重中之重，作为潼关防守的配套，在禁谷之中建立有十二个关隘，称作十二连城，在唐朝时是禁止人通行的，禁谷的所以名为“禁”，就是这个原因。黄巢攻潼关，就是派军队自禁沟北上，绕到潼关背面，两面夹击，从而攻破的。唐军之所以疏忽了对禁沟的防守，就是因为这条沟平时禁止通行，从而形成的思维定式，忘记了这里可以通行。明朝李自成攻潼关，也是自潼关南面绕道至关后，两面夹击从而破关，但却不是走禁沟，而是走是南山的山麓。因为明朝时禁沟是一条重要道路，明军不可能不防守。</p>
<p>因此，潼关北依黄河，南靠秦岭，东有黄巷坂之险阻，西有禁沟之天堑，自然是天下雄关，关中门户。</p>
<p><img src="/archives/d9b6b8be/14.png" alt="潼关形势图2"></p>
<p>细细考究函谷关和潼关的兴废，有政治因素，也有千年之间地形变化的因素。</p>
<p>为什么一开始秦人设关时设的是函谷关，而不是潼关？</p>
<p>这里我认为有两个因素。</p>
<p>一是从政治上讲，函谷关之始建，是在战国时，这时潼关已经是秦国领土。秦人设函谷关的主要目的就是为了御敌于国门之外，既然在函谷关有非常险要的地形，那就没有必要退缩一百余里了。</p>
<p>二是从地形上讲，函谷关有一个非常优越的地方，就是它永远只面向一个方向的敌人，敌人永远只能从东面来，而没有第二条路可走。这点是潼关比不上的。潼关在地形险要方面不如函谷关，敌人可以从禁沟来（如黄巢），可以从秦岭南麓而来（如李自成），也可以从北面蒲津来（如曹操）。从这个意义上讲，函谷关的地形是要优于潼关的。</p>
<p><img src="/archives/d9b6b8be/15.png" alt=" "></p>
<p>那为什么后来潼关又取代了函谷关呢？</p>
<p>也是两个方面，一是政治上的，汉武帝为了扩大关中领地，加强中央集权，将函谷关挪到了新安，从而降低了函谷故关在政治上的分量。</p>
<p>另一方面，也是地形和环境的变化。由于黄河的下切，使得稠桑原北侧可以通行，使得西向关中不再需要经过函谷关。同时，稠桑原上森林的消失，使得天险不再。失去了森林和唯一通道地位，函谷关就已经失去了军事上的意义，所以它必然要被取代。</p>
<p>在这种情况下，潼关作为函谷关的替代就出现了。虽然后来潼关也出现了黄河下切的问题，但潼关胜过函谷关的一点是，它不必依赖于森林作为自己的防护。所以黄河下切产生了新的道路，对于潼关来说只需要移动关城就可以继续镇守要津，作关中门户。</p>
<p>声明：本文来源于网络，版权归原作者所有，如有侵权请告知删除。</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>地理</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>朝鲜的38°和越南的17°</title>
    <url>/archives/df68c2e9/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 2019-07-30</p>
<p>1965年，美国发动“滚雷行动”，大规模派兵直接入侵越南。</p>
<p>1975年，美国狼狈撤退，结束十年越战。</p>
<p>美军在越南的十年，是黑暗的十年，越战流尽了美国人的血，让美国在和苏联争霸时直接处于弱势地位。</p>
<p>那么问题来了，整整十年，北越军队都在活蹦乱跳的独自抗衡美军，不仅完整保留了军队的建制，还能维持后方的经济生产。</p>
<p>反观北朝鲜军，美军参战后一个月不到，被打的几乎全军覆没，中苏双方给钱给装备都没用，最后还是中国志愿军亲自上阵，才把美军给打退。</p>
<p>这么一比，好像北越军队战斗力爆棚，但是这么牛逼的北越军队，在1979年的对越自卫反击战中，其北方守卫军团却被中国军队给瞬间打的全线崩盘。</p>
<font color="red">短短十几天，中国军队就兵临越南首都，如果不是顾忌苏联干涉，越南直接就没了。</font>

<p>要知道，1975年北越军队刚打退强大的美军，正是最巅峰辉煌的时候，怎么在中国军队手里败这么惨，难道美军比中国军队差很多？</p>
<p>要知道，中美双方刚在朝鲜战场上直接交手，至少也算个平局吧，美军战斗力没有那么弱。</p>
<p>那么问题出在哪呢？怎么会出现这么离奇的战果对比。</p>
<p>核心原因其实就是因为，中美军队刚刚在朝鲜战场上交过手。</p>
<hr>
<center><font color="orange" size="4">朝鲜的38°线</font></center>

<hr>
<p>1950年6月，朝鲜战争爆发，北朝鲜军势如破竹，将南朝鲜军压制在小小的釜山区域，再加一把劲，就可以把整个南朝鲜军给赶下大海。</p>
<p>这时候，美军为首的联合国军参战了，一个月之内，装备了大量苏制武器的北朝鲜军被打的几乎全军覆没。</p>
<font color="red">毛主席直接向美国发出警告，联合国军可以参战，但是不得越过38°线进入北朝鲜区域，否则中国将出兵参战。</font>

<p>但是以当时中国的国际威望，这句话并没有引起美国人的重视，在美国眼里，中国就是个半殖民地的农业国。</p>
<p>联合国军的总指挥麦克阿瑟向杜鲁门总统保证，中国军队不会参战。</p>
<blockquote>
<p>“即使赤色中国真的愚蠢地出兵，那将只是为他们创造了打回到石器时代的机会。”</p>
</blockquote>
<p>麦克阿瑟宣称，自己将在圣诞节前将战线推进至鸭绿江边，结束朝鲜战争，然后带美国士兵们回家过节。</p>
<p>在美军士兵越过38°线的当天，中国人民志愿军越过了鸭绿江，秘密入朝参战，把联合国军给包了饺子，骄横的麦克阿瑟被迫进行了大撤退，美军重新回到了38°线。</p>
<p>随后的五大战役里，中美双方屡屡交手，美国动用了其1/5的空军，1/3的陆军和大部分的海军，以及除核武器外的所有新式武器。</p>
<p>结果，美军震惊的发现，这个落后农业国里出来的军队，居然如此能打，怎么都打不死，自己还损失惨重。</p>
<p>中美双方，在朝鲜38°线上胶着，互有胜负，谁也无法奈何谁，最终，骄傲的美国人被迫谈和。</p>
<p>而迫使美国人坐到谈判桌前的最终一战，就是上甘岭战役，因为这一战，直接打碎了美国人全部的骄傲。</p>
<p>在五大战役后，中美双方实际上已经摸清对方的实力和作战习惯，彼此谁都无法奈何谁，中国军队曾试图扩大战果，突击37°线占领了汉城，甚至还攻入过36°线，但是很快被联合国军打了回去。</p>
<p>而联合国军也曾试图突破志愿军的阵地，一样也是损失惨重。</p>
<font color="red">双方都不想打了，但是都开不了这个口，谁先开口，谁就失去了谈判的筹码。</font>

<p>所以，双方都想拿到一点战果，从而获得谈判的有利条件，而美国选择了五圣山作为目标。</p>
<p>五圣山，是朝鲜中线的门户，如果丢掉了五圣山，后面200公里皆为平原，无险可守，只要能拿下五圣山，就能让中国军队陷入被动，从而被迫在谈判中让步。</p>
<p>美军指挥官范弗里特拟定了庞大而细致的作战计划，试图一举攻克五圣山，美军把这一次的作战，称之为摊牌行动，要用此战，和志愿军做一次最终较量，迫使中国在和谈中让步。</p>
<p>攻克五圣山的第一步，就是要先拿下五圣山前面的二个小山包，也就是鼎鼎大名的597.9和537.7高地，这两个高地后面有一个小山村，叫上甘岭。</p>
<p>所以美军攻克这二个高地的战斗，就称为上甘岭战役。</p>
<p>中国军队在上甘岭区域，仅部署2个连，按范弗里特的计划，美军可以在一天之内，以伤亡200人以内的代价，占领这两个高地，然后在这里修筑工事，攻击一公里之外的五圣山。</p>
<font color="red">没想到的是，联合国军在上甘岭的损失，是原定计划的100倍。</font>

<p>美军指挥官范弗里特是火海战术的忠实粉丝，他曾创造了一个名词，叫范弗里特弹药量，什么意思呢，他自己是这么解释的：</p>
<blockquote>
<p>我再次强调我的观点，掩体与火力须足够大。我们必须倾泻钢铁与烈焰而不是人员。我要在此阻止住中国人并重创他们。我欢迎他们来进攻，我要挺立在阵地上用炮火击溃他们。我要留下无数个炮兵的弹坑，以致能让人连着从一个弹坑跳到另一个弹坑里。这没有拔高，我是认真的！</p>
</blockquote>
<p><img src="/archives/df68c2e9/1.jpg" alt=" "></p>
<p>范弗里特很迷恋他的弹药量：“没有什么阵地是十万发炮弹解决不了的，如果十万发不行，那就再来十万发！”</p>
<p>没想到的是，他最终倾泻了190万发炮弹和5000多枚航空弹在上甘岭阵地上。更没想到的是，他不仅没打下五圣山，甚至连第一关上甘岭都没打过去，最终大败亏输。</p>
<p>在摊牌行动发动的一瞬间，美军无穷无尽的炮弹就落到了上甘岭区域上，所有的土地都被翻了一遍，所有的表面工事都荡然无存。</p>
<p>志愿军用了4个月时间精心构筑的防御工事、铁丝网、防坦克壕、陷阱被瞬间全部抹平，驻守上甘岭的2个连队，在第一波炮击结束后，就已经阵亡了60%，很多战士都是因为没来得及撤到坑道，被突然而来的炮击给活活震死的。</p>
<p>从这个角度说，范弗里特原来的作战计划中，预计用一天时间，200人以内的伤亡占领上甘岭，的确是没有问题的。</p>
<p>被炮击后的上甘岭，如同被烈焰烤焦了一般，一片白土，看似已经无人可以生存。但是在美军靠近时，志愿军的战士们突然不知道从哪就冒了出来，用火力狠狠的压制了敌人。</p>
<p><img src="/archives/df68c2e9/2.jpg" alt=" "></p>
<p>靠着在地下密密麻麻的坑道，40%的志愿军躲过了第一波突然炮击，并以这批战士为种子，牢牢的守住了阵地，在后方源源不断的炮火和兵力支援下，上甘岭成了联合国军彻底的绞肉机。</p>
<p>为了对付原本只有两个连驻守的上甘岭，美军先后投入了南韩军队两个师、美军一个师，以及联合国军的两个营，最终全部损失惨重。</p>
<p>美军不仅投入了重兵，还有铺天盖地的火力优势，累积发射了190万发炮弹，将整个上甘岭的山头削低了3米。</p>
<p><img src="/archives/df68c2e9/3.jpg" alt=" "></p>
<p>美军优势如此之大，在面对号称可以消灭一切地球生物的火海面前，志愿军是如何守住阵地的呢？大家其实都知道了，靠的是地下坑道。</p>
<font color="red">但是很多人曾简单的理解，所谓地下坑道，就是志愿军白天简单的藏在坑道里，晚上再钻出来战斗。</font>

<p>这你就大错特错了，炸药连山都能给炸碎，你的坑道修的再结实也抗不过炸药啊。</p>
<p>如果你龟缩坑道不出，美军什么都不用干，把出入口直接给你炸塌，里面的人就全部活埋了，根本都不用理会你的。</p>
<font color="red">在太平洋战场上，龟缩在坑道里的日军，就被美国的火焰喷射器和毒气弹，给轻松消灭的一干二净。</font>

<p>实际上，志愿军的坑道战术，远远比普通人想的更复杂，打起来也更残酷。</p>
<p>首先，志愿军的坑道，不是普通的坑道，而是反斜面坑道。什么叫反斜面坑道呢，我给大家解释一下，一座山有两个面对吧，北面对着志愿军的五圣山阵地，而南面对着美军的阵地。</p>
<p>我们在对着自己人的那一面修建的坑道，就叫反斜面坑道。</p>
<p><img src="/archives/df68c2e9/4.jpg" alt=" "></p>
<p>因为在正斜面，美军炮火会完全覆盖整个坡面，我军无法在地面生存。一旦地面被美军彻底占据，所有的坑道口都会被轻易彻底摧毁，志愿军的战士意志力再强大，也无法生存下去。</p>
<p>但是在反斜面，美军的炮火打不过来，但是我军在五圣山的炮火却可以完全覆盖，美军士兵只要敢站上反斜面，就会遭到我军的炮火打击，从而没有能力破坏我军的坑道。</p>
<p><img src="/archives/df68c2e9/5.jpg" alt=" "></p>
<p>志愿军的战士之所以在白天缩到坑道里，只是为了防止被美军大口径航空弹给活活震死而已，并不是纯粹是依靠坑道只守不攻。</p>
<p>美军的炮火优势的确远胜于志愿军，但是志愿军的炮火也不弱，至少在反斜面压制美军步兵是没问题的，除此之外，中美双方的炮兵，还隔着上甘岭，凌空炮战，互相攻击对方的炮兵阵地。</p>
<p>炮战的强度到底有多大呢？别的战场，那是子弹横飞，而上甘岭战场，那是炮弹横飞，<font color="red">空中炮弹密度之大，甚至曾经命中一架俯冲投弹的美军战机，导致其凌空爆炸。</font></p>
<p>因为双方的炮火支援，最终志愿军占领了反斜面，美军占领了正斜面，中间的分界点，叫棱线。</p>
<p>谁占据棱线，谁就具备了视野优势，高地压制和突击先手权等一系列的好处。</p>
<p>在前期，由于美军的突袭，棱线被美军占据，甚至修建了坚固的工事，让志愿军一筹莫展，整个反斜面的志愿军都被火力压制，有时候甚至连从坑道冒头都困难，鼎鼎大名的一个苹果的故事，就发生在棱线被美军占据的那一段时间。</p>
<p>送一个苹果就能立二等功，水源后勤几乎断绝，但是准备了整整四万斤苹果，还牺牲了那么多运输员，最终居然只送上去一个苹果，其余的物资在运输中被全部摧毁。你想想，战斗中的志愿军得被美军火力压制的多惨。</p>
<font color="red">因为棱线如此重要，所以上甘岭战役最残酷的战斗，全部聚集于棱线区域。</font>韩国军史上直接将上甘岭战役，称之为“狙击棱线战斗”，而不是称之为坑道战。

第15军军史中写道：“上甘岭战役中，危急时刻拉响手雷、手榴弹、爆破筒、炸药包与敌人同归于尽，舍身炸敌地堡，堵敌枪眼等，成为普遍现象。”

而这些和敌人同归于尽的战斗，通常不会发生在坑道附近，一般都发生在棱线争夺战中。

例如黄继光，为了给战友一个冲锋的机会，拿身体堵抢眼。他为什么不等一等，因为此时离天亮只有40分钟了，如果再拿不下这个火力点，等天亮，就再也没有拿下棱线的机会了。

所以，黄继光堵了枪眼，而不是等后方的支援，因为他知道，如果不这么做，一旦今晚的战斗没有成功，等美军再次巩固了阵地，志愿军的牺牲会远大于此。

拿下了棱线，就占据了战斗的主动权，在朝鲜战争中，和敌人同归于尽的战斗英雄很多很多，黄继光之所以能成为战斗英雄的典型，是因为他的功劳太大了。

<font color="red">自从棱线上的美军坚固工事被全部打掉，就再也没有机会修建起来，而战斗的主动权也回到了志愿军手里。</font>

<font color="red">在无工事的情况下，夜战棱线争夺，志愿军占据绝对优势，这直接导致联合国军的伤亡开始迅速增加，而志愿军方面，再也不会困难到连一个苹果都运不进来。</font>

<p>最终，中美双方在上甘岭区域鏖战了43天，联合国军伤亡达到了2.5万，志愿军伤亡达到了1.15万，在美军最擅长的阵地战上，中国击败了美国。</p>
<p>美军夜战不如志愿军，近战不如志愿军，运动战不如志愿军，阵地战还是打不过志愿军，那就只剩平原战有优势了，但是朝鲜多山，给美军发挥优势的机会极少，美国完全看不到胜利的希望。</p>
<p>上甘岭战役后，美国再也没有发动过营级以上的攻势，直到最终认输，被迫同意在朝鲜停战协议上签字。</p>
<p>明明是势均力敌的战斗，最终战果也是平局，为何说是美国输了呢？因为双方的实力相差太大，最后居然打成平局，美国人自己认为自己输了，而中国人自己认为自己赢了。</p>
<p>美国上将克拉克在朝鲜停战协议上签字时<font color="red">哀叹，我是美国历史上第一个在没有取得胜利的停战协议上签字的司令官。</font></p>
<p>而在彭德怀元帅在签字后，则<font color="red">志得意满的对记者说，帝国主义在东方架起几门大炮就可以征服一个国家、一个民族的历史一去不复返了。</font></p>
<p>1953年7月27日，朝鲜停战协议正式签订，双方以38°线为分界点进行停战。</p>
<p>麦克阿瑟擅自越过毛主席警告的38°线，引来了中国的出兵，最终还是被迫回到了38°线，但是美国国力大损，所以麦克阿瑟被撤职，毁了一世英名。</p>
<hr>
<center><font color="orange" size="4">越南的17°线</font></center>

<hr>
<p>在朝鲜战争仅仅结束2年之后，越南战争爆发，到了1965年，美国更是直接参战。</p>
<p>而当时的中国领导人，通过外交部告知美国，你参战可以，但是北纬17°为红线，只要越过此线，中国就会出兵。</p>
<p><img src="/archives/df68c2e9/6.png" alt=" "></p>
<p>整个越南战争时期，美国别说地面部队不敢越线，就连飞机上都安装了17°线的报警器，生怕给了中国出兵的口实。</p>
<p>不越过17°线，美军就不可能彻底灭绝北越军队，但是越过17°线，则可能把越南变成第二个朝鲜。</p>
<p>所以，北越军队始终不灭，甚至后方的生产都没有耽误，让北越有力量源源不断的和美国缠斗。</p>
<p>越南成了彻底的泥潭，变成了美国的噩梦，对美国进行了持续的放血，让美国在和苏联的争霸中处于绝对的弱势。</p>
<font color="red">越南的17°线，成了美国人又恨又怕的一条线。</font>

<p>当年朝鲜的38°线，在毛主席发出明确警告时，麦克阿瑟置若罔闻，直接下令全军过线，甚至讥笑说，要是中国敢出兵，就把中国打回石器时代。</p>
<p>十年之后，北越的17°线，却成了美国军队的红线，美国宁可被北越持续放血也不敢越过此线。中国只是通过外交部传个话，整整10年，没有一个美国士兵敢于越过17°线。</p>
<p>没有朝鲜的38°线，哪有越南的17°线，国家之间，永远是实力为王。</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247486818&amp;idx=1&amp;sn=27241d49aebf102d8116b091eacb2a1a&amp;chksm=fe0d6574c97aec62a30743af0d99e5ffa7bcf974881e433d5f0c2d9d43694f298dd6c82c2c04&amp;mpshare=1&amp;scene=1&amp;srcid=1102EfUKkYOQKQ5S7Hhh9YNB&amp;sharer_sharetime=1604298793415&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=2ff6efa5b41f0127be0de028b066084019785435691c9f053e8fc295014f1ff7fd0707a45822ee25af0f838aa4e382140663efeaa9aaf798cd237c51f9761ffc519a02d23ca2e7880bc79639605abe280b3fa88db7e3db1e77de1d09ca4dd230907a02f9d40a4308b712a9c61c4f0548b1f2dce9d1952aa5231e1c44d835f7c5&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2C4NyoZ1fi%2BNKvGtesHQ%2BA%3D&amp;pass_ticket=ytqcTrkIxlSOZPF9Y7MS9WCG%2BoqqrEvfPJ1zTctENsq3GU%2FTOYIOM7e2LBdDBDzS&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>中国军队进化史</title>
    <url>/archives/5a1605e8/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 昨天</p>
<p>都说枪杆子里出政权，那大家有没有反思过，军队的战斗力，到底从何而来。</p>
<p>1950年，朝鲜战争爆发，以美国为首的联合国军和中国人民志愿军在朝鲜这个弹丸之地打了起来。</p>
<p>台湾的蒋介石，反思了自己和解放军几十年的斗争历史，发现自己仅有的几次胜利，全部是靠大修碉堡换来的，只要打运动战，必输无疑。</p>
<p>所以，蒋介石向联合国军建议，不要和志愿军打你来我往的运动战，很容易吃亏，他建议稳扎稳打，利用阵地战层层推进，要是能修上几十万个碉堡再打，那才能安心睡觉。</p>
<p>这个建议被麦克阿瑟嗤之以鼻，你自己无能不要误导别人，我还要带着美军圣诞节之前回家呢，打个中国军队而已，还修碉堡，修个鬼，浪费军费。</p>
<font color="red">蒋介石难得给美国提供了一次良心建议，还被无情的驳回。</font>

<p>后果大家也看到了，由于轻敌冒进导致美军损失惨重，麦克阿瑟被撤职查办。</p>
<p>接任的主帅李奇微虚心的接受了蒋介石的建议，和志愿军玩起了阵地战，开始蹲战壕，采用碉堡和火海战术相结合，才终于稳住了阵脚。</p>
<p>麦克阿瑟表示很冤枉，教科书上的中国军队不是这样子的，我被军校的教科书坑了！中国军队什么时候变得这么强了。</p>
<p>短短50年，中国军队经历多次蜕变，才最终脱胎换骨，从弱军变成了强军。而印度的军队，很明显没有这么强。</p>
<font color="red">这里面，有什么秘方么？</font>

<hr>
<center><font size="6"> 1 </font></center>

<hr>
<p>从1840年鸦片战争开始，中国军队和西方列强打仗，每战必败，而且败的非常惨，自己全军覆没，别人就死几个人那种惨败。</p>
<p>清政府认为，军事上的战败，是因为西方人有洋枪洋炮，纯粹是靠装备优势才打赢了大清，只要装备跟上去了，西方蛮夷绝对不可能和天朝上国的军队相抗衡。</p>
<p>当时国际上并没有武器禁运一说，只要你有钱，最先进的武器甚至军舰都可以随便买，外国人还负责帮你培训，可谓是服务到家。</p>
<p>经历60年的洋务运动，清政府还真建起来了一只新军，新式清军的装备非常之豪华，各种先进的武器都有。</p>
<p>我举个例子，当时清朝的岸防巨炮，是德国克虏伯厂原装进口，采用当时世界最先进技术，口径达到了340mm，威力远超当时的军舰主炮。</p>
<p>就看这造型，今天的你都知道这大炮不好惹，何况是100年前。</p>
<p><img src="/archives/5a1605e8/1.jpg" alt=" "></p>
<p>而加特林重机枪，彻底将骑兵军种从人类军备史上抹掉的陆军神器，清军也有装备，是李鸿章到德国访问参观时，亲自下单购买的，采用世界最先进技术。</p>
<p><img src="/archives/5a1605e8/2.jpg" alt=" "></p>
<p>当时的清朝陆军，不敢说冠绝全球，但武力绝对不弱，装备上丝毫不弱于西方强国。</p>
<p>所以，慈禧太后飘了，加上义和团的支持，慈禧觉得自己快无敌了。</p>
<p>1900年，慈禧向世界宣战，围攻外国使馆，引发八国联军入侵北京。</p>
<p>然后，清政府被残酷的现实给狠狠的教育了一番。</p>
<p><img src="http://img.soogif.com/20201031110408327.gif" alt=" "></p>
<p>当时北京城附近，清军和义和团加起来有几十万，而八国联军仅仅只有2万人，但这场战争的结果，却是清军被摧枯拉朽一样的击败。</p>
<p>首先就是配备了德国克虏伯最先进大炮的天津大沽炮台，拥有如此先进的大炮，却完全不堪一击。</p>
<p>历史资料上说：</p>
<blockquote>
<p>大沽口保卫战也是一场具有一定近代性质的战斗。守卫大沽炮台的清军所配备的新式大炮，多为克虏伯厂或阿姆斯特朗所造，炮台防军的训练也接近近代化。在守将罗荣光的指挥下，清军英勇抵抗6小时。</p>
</blockquote>
<p>没错，耗费重金打造的超级堡垒，<font color="red">6小时就没了</font>，还是“英勇抵抗”的前提下。</p>
<p>那些为岸防巨炮准备的特制重炮弹，全部被八国联军缴获，堆积如山。</p>
<p><img src="/archives/5a1605e8/4.png" alt=" "></p>
<p>攻陷大沽炮台后，八国联军只用了10天时间，就占领了北京城，路途中义和团的抵抗，连清风拂面都算不上。</p>
<p>民间乡勇不靠谱，京城的正规军总得靠谱吧。</p>
<p>当时的北京城，清朝正规守备军高达10万人以上，仅德国最先进的毛瑟11mm口径步枪就有10000支，加特林重机枪有两挺，外加70多门各种火炮。</p>
<p>下图，是被八国联军缴获的清军火炮，和当时八国联军配备的火炮，一样先进。</p>
<p><img src="/archives/5a1605e8/5.png" alt=" "></p>
<p>如此之强的装备，加上本土防御作战的优势，击败甚至全歼八国联军都不在话下。</p>
<p>结果整个北京城连一天时间都没扛住，就全部沦陷，给八国联军造成的死伤，微乎其微，少的都不好意思说。</p>
<font color="red">先进的火枪和大炮在清军手中，和烧火棍没啥区别。</font>

<p>1900年11月28日，在北京的紫禁城，八国联军列队庆祝胜利，随后开始了大规模的洗劫。</p>
<p><img src="/archives/5a1605e8/6.png" alt=" "></p>
<p>军官们在金銮殿宝座上合影留念。</p>
<p><img src="/archives/5a1605e8/7.png" alt=" "></p>
<p>普通士兵不甘寂寞，也找个宫殿拍一下到此一游。</p>
<p><img src="/archives/5a1605e8/8.png" alt=" "></p>
<p>而清朝的留守官员，则向八国联军的军官行叩拜大礼。</p>
<p><img src="/archives/5a1605e8/9.png" alt=" "></p>
<p>这就是中国新式军队留给世界的第一次印象，完全可以用豆腐渣来形容，<font color="red">哪怕拥有最先进的武器，还是豆腐渣。</font></p>
<hr>
<center><font size="6"> 2 </font></center>

<hr>
<p>辛丑条约签订后，八国联军退去，整个中国都醒悟过来，光靠买先进的武器装备没有用，封建军队哪怕拿上神兵利器，它还是封建军队。</p>
<p>要学，就得学全套，西方的军队制度必须得学，老祖宗留下来的那一套军制不能再用了。</p>
<p>于是，就有了袁世凯练兵之举。</p>
<p>袁世凯采用德国和日本的步兵操典，采用清一色的西方的装备和军队体制，力求练出和西方一样的强军。</p>
<p>这是中国军事史上开天辟地的革命，师、旅、团、营、连这种西方军制第一次被引入中国，取代了老旧的封建军事体系。</p>
<font color="red">这，是中国军队的第一次蜕变。</font>

<p>袁世凯在练兵上大费苦心，创办了大量军事院校，进行全面西化，鼎鼎大名的北洋陆军武备学堂，为中国培训出了第一批西式将领，为北洋军队源源不断的输送人才。</p>
<p>当时北洋的军校教学，已经出现了当时世界上最先进的沙盘教学，主教官均聘请自西方列强国家。</p>
<p><img src="/archives/5a1605e8/10.png" alt=" "></p>
<p>北洋军队的炮兵训练，以今天的眼光去看，也可圈可点。</p>
<p><img src="/archives/5a1605e8/11.png" alt=" "></p>
<p>当时的北洋军队，还从德国采购了最新的热气球，作为侦查使用，这可能是中国的第一支空军部队了。</p>
<p><img src="/archives/5a1605e8/12.png" alt=" "></p>
<p>“北洋三杰”段琪瑞、冯国璋、王士珍均是从武备学堂毕业，如此强大的人才储备和先进装备结合，让北洋军队的战斗力，冠绝全国。</p>
<p>在1905年，北洋新军炼成，兵额7万人，成为了当时全中国最强大的武力集团，而整支军队上上下下，只听袁世凯一人。</p>
<p>这种封建化私人控制的手段，让袁世凯最终得以逼迫清帝退位，同时，也让中国军队的蜕变，到此为止。</p>
<font color="red">北洋军队，是中国第一支近代化军队，强于封建化军队，但远弱于现代化军队。</font>

<hr>
<center><font size="6"> 3 </font></center>

<hr>
<p>因为淘汰了清朝老祖宗传下来的封建军制，北洋军队的战斗力极强，称霸中国二十余年。</p>
<p>但袁世凯也仅仅只是采用了西方的军制，并未采用西方的整套思想体系，依然采用封建领主的思想来控制军队。</p>
<p>袁世凯在打造北洋军队时，采用各种手段强化军队对其的个人忠诚，而旗下各个将领也有学有样，整个北洋军队，实行封建领主一样的层层分封制度。</p>
<p>兵为将有的制度，让军队一切向钱看，当兵就是为了吃饷，军队是给个人打工的。</p>
<p>哪怕是袁世凯，调动手下的军队，也得先把钱分下去，喂饱了将领再喂饱士兵，军队才愿意战斗。</p>
<font color="red">所以，北洋军队的战斗意愿，和封建军队差不多。</font>

<p>因为当兵是为了吃饷嘛，拿多少钱办多少事，我就拿那一点工资，犯不着把命都搭上。</p>
<p>虽然西方军制让北洋军队可以科学合理的使用火器，在作战科学度上已经追上了西方军队，但是这个战斗意愿依然等同于封建军队。</p>
<p>在古代，如果要激发士兵的血性，必须要“重赏”，如果拿不出钱，就只能靠屠城的诱惑来激励军队，所以古代的统一战争才那么喜欢屠城。</p>
<p>没办法屠城和重赏的时候，军队的战斗意愿就极其低落。</p>
<font color="red">当年保卫北京城的10万清军，死个千把人，就全线崩盘，一哄而散，在军事意义上已经“全军覆没”。</font>

<p>而北洋军队的战斗意愿，也好不到哪去。</p>
<font color="red">讨逆战争中，张勋和段祺瑞的数万军队在北京城周围混战11天，打了300多万发子弹，最后共计死亡28人。</font>

<p>这让穷困潦倒，提倡<font color="red">一颗子弹消灭一个敌人</font>的红军情何以堪。</p>
<blockquote>
<p>“……我说我军切不要像张勋的军队，他与段祺瑞打仗，打了三百多万发子弹，才打死二十八个人。<br>—(陈毅《华东一年来自卫战争的初步总结》)</p>
</blockquote>
<p>而这一切，都被当时在北京的外国领事馆传回了国内，当时还有领事馆的报告说，双方一共打了5000万发子弹，最后伤亡共计25人。</p>
<font color="red">就因为死了20几个人，张勋“全军覆没”，大清又亡了一次。</font>

<p>这，就构成了西方对中国军队的第二次印象。</p>
<p>如果中国军队一直维持这个模样，别说印度，估计连非洲的一些军队都打不过。</p>
<font color="red">腐朽的东西，一定会被历史所淘汰。</font>

<hr>
<center><font size="6"> 4 </font></center>

<hr>
<p>袁世凯死后，中国陷入了北洋军阀的混战时期。</p>
<p><img src="/archives/5a1605e8/13.png" alt=" "></p>
<p>经过优胜劣汰的角逐，至1926年国民革命军北伐前，形成了三大北洋军阀。</p>
<p>其中，吴佩孚20多万、孙传芳20多万，张作霖35万，合计80万大军。</p>
<p><img src="/archives/5a1605e8/14.png" alt=" "></p>
<p>吴佩孚作为中国军阀的代表，还上过美国的时代杂志封面。。。</p>
<p><img src="/archives/5a1605e8/15.png" alt=" "></p>
<p>而当时的广东国民政府，偏于一隅之地，总共只有8.5万军队，却在两年之内，摧枯拉朽的消灭了北洋军阀，统一了全国。</p>
<p>到底发生了什么？如果国民革命军这么强的话，早干嘛去了？</p>
<p>国民革命军有的武器，北洋军阀都有，国民革命军有黄埔军校，北洋军阀也有北洋陆军武备学堂，而论财力，北洋军阀完胜国民革命军。</p>
<font color="red">说成大白话就是，你有的我都有，你没有的我也有，凭什么你赢？</font>

<p>国民革命军吃了大力丸么？怎么突然变得这么猛？</p>
<p>还真有大力丸。</p>
<p>1905年，以反对帝制为主要目标，孙中山先生提出了三民主义。</p>
<p>三民主义强有力的打击了满清统治的合法性，为满清的最终灭亡提供了契机，但三民主义的能量也就到此为止了，对于后期北洋军阀的混战无能为力。</p>
<p>孙中山先生不断的进行反思和探索，争取为中国找到一条新的出路。</p>
<p>1917年，国际上爆发了俄国的十月革命，1919年，国内爆发了五四运动。</p>
<p>这两年大事，促进了孙中山先生的思想变化，在1924年1月，导致了新三民主义的诞生。</p>
<blockquote>
<p>在民族领域，孙中山提出打倒帝国主义，打倒和帝国主义勾结之军阀。<br>在民权领域，孙中山提出要改良欧美现行制度之流弊，强调直接民权与权能区分，即政府拥有治权，人民则拥有政权，不完全实行西方选举制。<br>在民生领域，孙中山提出实行土地国有，然后由国家分配给农民，并节制资本，在命脉行业实行国有资本控制，使私有资本制度不能操纵国民之生计。</p>
</blockquote>
<font color="red">看完了之后你会发现，这不就是半个共产主义么？新中国建立后实行的就是这一套。</font>

<p>你说的一点都没错，因为这就是孙中山受到共产主义的启发才改良的。</p>
<p>同年，孙中山在国民党第一次代表大会上，<font color="red">提出联俄、联共、扶助农工三大政策</font>，接受苏联援助，成立黄埔军校，提出国共合作，允许共产党员以个人身份加入国民党，拥有双党身份。</p>
<p>在国共合作的初期，双方的关系是非常密切的，在1925年12月黄埔军校的演讲中，<font color="red">蒋介石说：“我愿为三民主义而死，亦即为共产主义而死也！”</font></p>
<p>国民革命军被新三民主义的思想武装后，共产党又补上了基层动员的短板，直接从近代化军队，升级为了现代化军队，<font color="red">这是中国军队的第二次蜕变。</font></p>
<p>近代军队和现代军队的最大区别在哪里？</p>
<p>最大的区别就在于近代军队是用金钱和对个人的忠诚组织起来的军队，而现代军队是用思想和主义，以及对国家的忠诚组织起来的军队。</p>
<font color="red">近代军队为钱而战，失去指挥官后就一哄而散，现代军队为主义而战，哪怕还剩最后几个人，依然能坚持战斗。</font>

<p>双方的战斗力，天差地别。</p>
<p>1925年3月，孙中山先生不幸逝世，但北伐依旧按计划进行。</p>
<p>1926年6月4日，北伐开始，8.5万国民革命军全军出击，要讨伐80万装备精良的北洋军队。</p>
<p><img src="/archives/5a1605e8/16.png" alt=" "></p>
<p>8月20日，国民革命军占领长沙，又攻破多重防线，兵临吴佩孚的统治中心武汉，10月，北伐军占领武汉全城，消灭了军阀吴佩孚。</p>
<p>在武汉攻城战如火如荼之时，北伐军同时在江西境内激战，从9月22日到11月8日，北伐军三打南昌，以阵亡一万五千人的代价，消灭了军阀孙传芳。</p>
<p>江西鏖战之际，福建小军阀周荫人的部队企图进攻广东，扰乱北伐军后方。</p>
<p>留守在黄埔军校的教官何应钦，向福建出兵，到1926年12月，占领福建全省，并向浙江方向出击，兵锋直指上海。</p>
<font color="red">换句话说，短短半年时间，区区8.5万北伐军，兵分三路，分别灭掉了两湖的吴佩孚、江西的孙传芳，以及福建的周荫人。</font>

<p>什么叫摧枯拉朽，这就是，完全是碾压式的战斗，这么远的距离，光行军都要花不少时间。</p>
<p>为策应北伐，黄埔军校政治部主任周恩来与陈独秀等人，在上海发动工人武装起义，接应北伐军顺利的占领了上海。</p>
<p>在占领上海15天后，蒋介石发动了震惊中外的“4.12”政变，大肆屠杀共产党人。</p>
<font color="red">这是蒋介石的一次叛变，不仅仅是叛变了共产党，他还叛变了国民党，更叛变了新三民主义。</font>

<hr>
<center><font size="6"> 5 </font></center>

<hr>
<p>国民革命军为国民政府所有，忠于国家，忠于新三民主义，并非为个人私产。</p>
<p>但是在蒋介石北伐的过程中，为满足个人私欲，回归到了袁世凯那一套，采用各种手段强化国民革命军对其个人的忠诚。</p>
<p>在国民革命军内部，凡是忠于蒋介石的将领，一律另眼相看，哪怕违法违纪，贪污赌博，都可以网开一面。</p>
<p>这种“恩威并施”的手段，让这些将领对蒋介石感恩戴德，成为了其忠实的“嫡系”。</p>
<p>而不忠于蒋介石的将领，哪怕再优秀，也被归属于杂牌，不仅有严刑峻法制裁，而且还换着花样的想办法让其去战场送死。</p>
<font color="red">蒋介石的唯一目的，是让国民革命军变成蒋家军，让国民政府变成蒋家政府。</font>

<p>所以，在国民政府一致决议迁都武汉之时，蒋介石拒不接受，非要在南京另立中央。</p>
<p>要篡权，可没那么容易，国民党里的元老太多，掌握的能量也太大。</p>
<p>为了获取外部的支持，在蒋介石占领上海后，就决定全面倒向西方列强，取消新三民主义的反帝国主义纲领，成为西方列强新的代理人，取消土地国有和限制资本的纲领，成为大地主大资本家的代理人。</p>
<p>因为只有西方列强、大地主和大资本家，才能在短期内给予蒋介石足够的支持。</p>
<p>蒋介石的选择，从他个人的角度上来说，是对的，因为在国民党内部夺权的过程中，蒋介石几次都差点被赶下台，经历龙争虎斗才最终篡权成功。</p>
<p>但是毫无疑问，蒋介石叛变了新三民主义，叛变了国民党，也叛变了共产党。</p>
<p>孙中山先生被国民党和共产党共尊为国父，孙中山一手缔造了国民党，国民党称孙中山为国父天经地义。</p>
<p>但共产党为什么也要尊孙中山为国父，而不是袁世凯？这和孙中山先生提出的新三民主义，有极大的关系。</p>
<p>我们为什么一直说蒋介石背叛了革命，不单单指蒋介石背叛了共产党，<font color="red">更关键的，是蒋介石背叛了新三民主义。</font></p>
<p>蒋介石成功的把国民党变成了个人私产，修改了孙中山新三民主义的初衷，更驱逐了其北伐成功的最大助力——共产党。</p>
<p>失去了新三民主义的加成，失去了基层工人和农民的支持，重新搞军阀私产那一套。</p>
<font color="red">从此，国民革命军，从现代化军队，再次衰退回了近代军队。</font>

<hr>
<center><font size="6"> 6 </font></center>

<hr>
<p>到1930年，国民革命军的人数已经扩张到了百万级别。</p>
<p>于是，蒋介石发动了中原大战，和阎锡山、冯玉祥、李宗仁等人决战，要清理所有不听指挥的小军阀，真正意义上统一全国。</p>
<p>蒋介石想，自己当年才8.5万人，一年时间就消灭了吴佩孚、孙传芳这种大军阀，随后还重创了张作霖的部队。</p>
<p>为啥北伐军那么牛，还不是因为自己的英明神武！</p>
<p>如今自己兵强马壮，打几个小军阀，不在话下，肯定是手到擒来。</p>
<p>蒋介石集中了60万精锐军队，只留下少量弱军留守地方，几乎把所有家底都压上了，对战80万反蒋联军。</p>
<p>结果打了半年，蒋介石差点打输了，最后只能依靠外交手段，让东北的张学良挥军入关进行调停，才结束这场战役。</p>
<p>根据调停结果，包括东北的张学良在内，全国都改旗易帜，名义上听命于蒋介石，但实际上各自为政，军权和政权蒋介石都无权干涉。</p>
<p>一直到解放战争末期，阎锡山、冯玉祥、李宗仁等人都是国民党内部的国中之国，蒋介石做梦都想弄死的“杂牌部队”。</p>
<p>为啥纵横中国几十年的大军阀被国民革命军摧枯拉朽的击败，而几个不怎么出名的小军阀反而差点把蒋介石打哭。</p>
<font color="red">因为国民革命军，也变成了军阀，军阀对军阀，60万当然打不过80万。</font>

<p>国民革命军创造的北伐奇迹，唯一的原因，就是因为北伐军不是为了军阀的利益而战斗。</p>
<hr>
<center><font size="6"> 7 </font></center>

<hr>
<p>为什么蒋介石容得下国民党，容得下青年党，容得下民盟，偏偏就容不下对自己战斗力帮助最大的共产党。</p>
<p>因为蒋介石为了军队私有化，不得不借力于大地主阶级和买办阶级的帮助，如果蒋介石真的走土地国有的半共产主义路线，依赖工人和农民搞革命。</p>
<p>也许革命会更顺利的成功，但新的共和政府，一定不会是蒋介石的私人财产。</p>
<p>为了满足个人私欲，蒋介石选择了叛变革命，驱逐共产党，收编国民党。</p>
<p>从此，国民革命军的组织理念，就变成了西方列强和国内大地主大资本家的代理人。</p>
<font color="red">这个组织理念，青年党容得下，民盟容得下，和蒋介石对着干的汪精卫、阎锡山等人也容得下，但共产党容不下。</font>

<p>所以，蒋介石谁都可以容，就是容不下共产党，哪怕共产党对其战斗力帮助最大。</p>
<p>蒋介石治下的国民政府，并未达到孙中山先生新三民主义的希望，而是一个变种的新军阀集团，以前的统治阶级，换了个皮，就成了国民党。</p>
<blockquote>
<p>“满眼是白旗。然而貌虽如此，内骨子是依旧的，因为还是几个旧乡绅所组织的军政府，什么铁路股东是行政司长，钱店掌柜是军械司长……。”<br>—（鲁迅《范爱农》）</p>
</blockquote>
<font color="red">个人是无法对抗组织的，只有组织才可以对抗组织。</font>

<p>那组织和个人的区别到底在哪里？是因为组织人多么？</p>
<p>并不是，组织和个人最重要的区别，是因为组织有自己的理念，<font color="red">由于拥有共同的理念，所以才形成了组织。</font>如果没有共同的理念，人再多，也是一盘散沙，乌合之众。</p>
<font color="red">而组织之间的对抗，说白了就是理念之间的对抗，</font>判断你是哪个组织的人，并不是看你的身份，而是看你的思想。

你想干嘛，你到底为何而战？

国共之间的最根本的矛盾，就是共产党一定要土地国有，一定要驱逐西方列强，一定要撕毁所有不平等殖民条约，要把整个中国的旧势力全部捣毁，掀了桌子重新开始。

如果这么做，蒋介石就失去了他的执政根基，就无法实现蒋家王朝，所以蒋介石容不下共产党，哪怕私人关系再好，他也容不下。

这是组织理念级别的冲突，蒋氏军事集团上上下下的利益，全部系于蒋介石一身，就算蒋介石愿意放弃自己的执政根基，他的嫡系也不会容许他放弃，否则他们奢靡的生活从何而来。

蒋介石的自私行为，让中国军队从现代化倒退回了近代化。

<font color="red">既然他不愿意带领中国军队步入现代化，那我们就另起炉灶，重新打造中国军队。</font>

<hr>
<center><font size="6"> 8 </font></center>

<hr>
<p>1927年8月1日，在蒋介石发动反共大屠杀的3个月后，共产党发动了南昌起义，成立了自己的工农红军，打响了武装斗争的第一枪。</p>
<p><img src="/archives/5a1605e8/17.png" alt=" "></p>
<p>很多人认为，解放军是战无不胜的，任何一个投降的国民党军人，只要穿上了解放军的衣服，战斗力立马飙升十倍。</p>
<font color="red">难道中国人民解放军的衣服上面有魔法？</font>

<p>并没有，那只是一身普普通通的衣服，<font color="red">解放军战斗力爆棚的真正魔力，来自于共产主义精神和思想。</font></p>
<p>只有被共产主义思想改造的国民党军人，才是真正的解放军，否则战斗力依然是渣。</p>
<p>书本上就是这么说的，很多人认为是吹牛皮，打仗就是看装备，思想是什么东西，那虚无缥缈的东西有啥用，比得过炮弹么？</p>
<font color="red">思想工作大过天，这不是解放军拍脑袋定下来的，而是不断的斗争中积累下的宝贵经验和教训。</font>

<p>南昌起义时，工农红军有2万多人部队，20天之后，就剩1000人了，红军被逼无奈把队伍拉上了井冈山。</p>
<p>人哪去了？看打不赢，散伙回家了。</p>
<p>很多人当时加入红军纯粹是为了投机，为了抢钱抢粮抢女人，压根没有什么共产主义理念和思想，简单的把共产主义理解为打土豪，抢粮食，分光吃净。</p>
<p>如果我们用这样的人来组成红军，那和军阀的部队有何区别，甚至还不如军阀。</p>
<font color="red">毛泽东到了井冈山之后，第一件事就是办学校，组建教导队，给士兵们讲共产主义，讲马克思列宁思想，讲红军的理念。</font>

<font color="red">于是，中国军队迎来了自己的第三次蜕变。</font>

<p>明白自己为何而战的红军，才是真正的红军，绝对不是换身衣服的事情。</p>
<p>所以，国民党的部队，只能打顺风仗，不能打逆风仗，部队极其惧怕牺牲，阵亡人数达到很低的比例就自行崩溃，全军投降。</p>
<p>但是工农红军，爬雪山过草地，军饷发不出来，连粮食都没有，依然可以坚持战斗欲望。</p>
<p>红军战士掉队，第一件事就是想办法追上大部队，因为只有追上大部队才能实现自己革命的理念。</p>
<p>而国民党的军队就不一样了，要盯紧了，稍不留神就全跑了。</p>
<p>很多人问，就算拥有了理念，有了坚强如钢铁的战斗意志，有用吗？在大炮面前和纸有啥区别。</p>
<p>还真有用。</p>
<p>我们可以看看早期的红军活跃在什么地方，活跃在井冈山、陕甘宁边区等穷困山区。</p>
<p>这些地方有一个特点，经济落后，交通不便，易守难攻，<font color="red">别说国民党打不下来，就是红军自己来打，也打不下来。</font></p>
<p>谁能得到当地百姓的支持，谁才能在这样的地方落地生根。</p>
<p>那问题来了，这些地方的百姓，凭什么要支持红军？国民党明明更有钱，更有力量。</p>
<p>这就是共产主义理念的威力了，凭借宣传自己组织的理念，红军到了任何一处穷困的山区，都能迅速获得当地百姓的支持，从而落地生根，获得休养生息的机会。</p>
<font color="red">因为红军的理念，是为穷苦人夺天下。</font>

<p>每一个为了吃兵饷而给国民党打仗的士兵，只要进了解放军的军营，听上几节课，就会立刻调转枪口去打国民党，军饷什么的都好说，战斗力可以直接飙升10倍。</p>
<font color="red">思想，成了中国人民解放军最锋利的武器，所以解放军才可以做到越打越强，你说半个中国是靠共产主义的思想和理念凭空打下来的，都没什么错。</font>

<p>因为具备明确的理念，知道自己为何而战，解放军，才成为了中国的第一支真正的现代化军队。</p>
<hr>
<center><font size="6"> 9 </font></center>

<hr>
<font color="red">有了理念的组织，才是真正的组织，组织之间的强弱，完全取决于彼此的理念强弱，理念强，则组织强。</font>

<p>纵观全世界的战争史，我们会发现，实行共产主义的国家，在同等装备下，战斗力都碾压他国。</p>
<p>不管是实行选举制的英国和美国，还是实行独裁制的德国和日本，战斗力都不如共产主义国家。</p>
<p>在同等军力规模下，能击败共产主义国家的，唯有共产主义国家，累累案例证明，<font color="red">以共产主义理念组织起来的军队，世界最强，毋庸置疑。</font></p>
<font color="red">组织的理念一旦成型，就会成为组织的凝聚力，驱动整个组织滚滚向前。如果你能摧毁这个组织的理念，那整个组织就会凭空瓦解。</font>

<p>靠军事，是永远无法击败共产主义国家的，能击败他的，只有他自己。</p>
<font color="red">共产主义的组织理念是什么，是为穷苦人夺天下，如果失去了这个理念，整个组织就会凭空瓦解，不需要耗费一枪一弹。</font>

<p>苏联为什么亡，是因为发展重工业，忽视轻工业而亡国的么？是因为经济发展困难而亡国么？</p>
<p>当然不是，苏联亡国的唯一原因，就是苏联的领导层已经失去了自己的组织理念，贪污横行，为自己的奢靡生活而战，而不是为穷苦人而战。</p>
<p>晚期的苏联，已经变成了第二个国民党，组织理念丧失，为自己的私欲而活。</p>
<p>当一个共产主义组织，失去了共产主义的理念，下场是什么？</p>
<p>下场就是自行瓦解。</p>
<font color="red">谁为穷苦人的利益考虑，谁才是共产主义组织，至于这个组织叫什么名字，根本无足轻重。</font>

<p>中国改革开放后，修改了多项社会制度，放弃了激进的措施和手段，但是最核心的那个点，始终没有变。</p>
<p>中国不会因为经济困难而亡，也不会因为军事压力而亡，唯一能让中国瓦解的，就是内部贪腐。</p>
<font color="red">所以，中国历年的头等大事，就是反腐，任何事情和这件事一比，都是小事。</font>

<p>我今天所讲的事情，中学历史书上都有。但是历史书上只给结论，而不给过程，让很多人非常不以为然。</p>
<p>所以，我今天把中国军队的进化史给大家重新梳理一遍，让大家知道这些结论到底从何而来，有没有道理。</p>
<p>历史上，所有的共产主义国家都是强于军事，短于经济。</p>
<p>如今，有一个新型的共产主义国家，强于军事的同时，经济建设还冠绝全球，如果这个国家能长期坚持反腐，始终维持为穷苦人夺天下的共产主义理念不动摇。</p>
<font color="red">那可想而知，这个国家的未来会是多么的辉煌和强大。</font>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247520708&amp;idx=6&amp;sn=d64d61c09f787a474c66cc22cab7b9d0&amp;chksm=fe0ef9d2c97970c439fa6640551a7c078d7b057a14f8ab001dff142a49d53e551e87ff833fe8&amp;mpshare=1&amp;scene=1&amp;srcid=1031J4rYAiytWKKTHSav8HXk&amp;sharer_sharetime=1604107240029&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=825c145cf50a0d42caa0fe0c580414be70fe2f799391cec4d0a97a5f226e558938d9b1d7f321885d6a07995df895710d6be5e0d97a3034078700776c7123bce96c1b7d236430c57e2829ab02cb104e48c1bbd8411deb26cef6c6eaadce64bc6729d0a680f76b26094908083a469f7425edcdbc08cabc01607bcd54429d513607&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2o%2FXEpYYWYr9cK63HK8PqQ%3D&amp;pass_ticket=NTlpnWSWEMB1%2BCi74Gz7rgAjHkQxk8qN2m3DqWU59wowa%2BYDDgbvC4E5kfvf9YpC&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>历史</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客之后续SEO优化</title>
    <url>/archives/efed9114/</url>
    <content><![CDATA[<p><img src="/archives/efed9114/4.png" alt=" "><br>SEO (Search Engine Optimization)，即搜索引擎优化。简单来说，SEO就是您可以使用提升网站排名的所有方法的总称，SEO用于确保您的网站及其内容在搜索引擎结果页面（SERP）上的可见性。</p>
<h2 id="验证你的网站-让你博客被搜索引擎找到"><a href="#验证你的网站-让你博客被搜索引擎找到" class="headerlink" title="验证你的网站(让你博客被搜索引擎找到)"></a>验证你的网站(让你博客被搜索引擎找到)</h2><h3 id="查看你的博客是否被收入"><a href="#查看你的博客是否被收入" class="headerlink" title="查看你的博客是否被收入"></a>查看你的博客是否被收入</h3><p>在谷歌或者百度的搜索链接中，使用以下格式可以直接搜索自己的域名， 如果能搜索到就说明已经被收录，反之则没有。可以直接搜索自己的域名，或者加一些关键词来更好地判断，例如：<br><code>site: https://blog.hellshan.top</code></p>
<h3 id="提交我们的网站"><a href="#提交我们的网站" class="headerlink" title="提交我们的网站"></a>提交我们的网站</h3><p>若未被搜索引擎收录，则需进行以下配置，首先要让搜索引擎先验证我们对网站的所有权，两个搜索引擎提交的入口分别为：<br><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google Search Console</a><br><img src="/archives/efed9114/1.png" alt=" "><br><a href="https://ziyuan.baidu.com">百度站长平台</a><br><img src="/archives/efed9114/2.png" alt=" "><br>有多种验证方式，这里推荐 HTML 文件上传方式。下载 HTML 验证文件，拷贝到 Hexo/sources/ 文件夹下,为了使 hexo 不处理这两个验证文件，并且不生成关于这两个文件的 sitemap，我们需要打开验证文件，在最上面添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>然后执行 hexo 部署命令<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>最后返回验证页面，就可以查看验证是否通过了</p>
<h2 id="生成Sitemap"><a href="#生成Sitemap" class="headerlink" title="生成Sitemap"></a>生成Sitemap</h2><p>Sitemap即网站地图，它的作用在于便于搜索引擎更加智能地抓取网站。最简单和常见的sitemap形式，是XML文件，在其中列出网站中的网址以及关于每个网址的其他元数据</p>
<h3 id="安装sitemap生成插件"><a href="#安装sitemap生成插件" class="headerlink" title="安装sitemap生成插件"></a>安装sitemap生成插件</h3><p><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p>
<h3 id="编辑站点目录下的-config-yml，添加一下字段"><a href="#编辑站点目录下的-config-yml，添加一下字段" class="headerlink" title="编辑站点目录下的_config.yml，添加一下字段"></a>编辑站点目录下的_config.yml，添加一下字段</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hexo sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br></pre></td></tr></table></figure>
<p>之后在执行 hexo g 后， public目录下发现生成了 sitemap.xml和baidusitemap.xml 就表示配置成功了。</p>
<h2 id="提交sitemap"><a href="#提交sitemap" class="headerlink" title="提交sitemap"></a>提交sitemap</h2><h3 id="向谷歌提交"><a href="#向谷歌提交" class="headerlink" title="向谷歌提交"></a>向谷歌提交</h3><p>向谷歌提交 sitemap 比较简单，登录 Google Search Console ，选择已经验证过的站点，在抓取 -&gt; 站点地图 中，右上角可看到 添加 / 测试站点地图，添加 sitemap.xml 的链接即可，谷歌效率较高，一般当天或者第二天就能搜到微博了。如图：<br><img src="/archives/efed9114/3.png" alt=" "></p>
<h3 id="向百度提交"><a href="#向百度提交" class="headerlink" title="向百度提交"></a>向百度提交</h3><p>与谷歌类似，我们可以直接向百度交 sitemap，登录 百度站长平台，点击 网页抓取-&gt; 链接提交，在 自动提交中选择 sitemap，输入自己的域名加 baidusitemap.xml 即可，之后可查看 url 提取是否成功。<br>由于 GitHub 屏蔽了百度的爬虫，即使提交成功，百度知道这里有可供抓取的链接，也不一定能抓取成功。 首先我们先检测一下百度爬虫是否可以抓取网页。在百度站长平台网页抓取-&gt;抓取诊断 中，选择PC UA点击抓取 , 查看抓取状态， 如果显示 抓取失败， 则需要进一步的配置。</p>
<h3 id="主动推送和自动推送"><a href="#主动推送和自动推送" class="headerlink" title="主动推送和自动推送"></a>主动推送和自动推送</h3><p>百度提供了多种链接提交的方式，可以综合使用，互为补充。<br>    如何选择链接提交方式<br>    1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>    2、自动推送：最为便捷的提交方式，请将自动推送的 JS 代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>    3、sitemap：您可以定期将网站链接放到 sitemap 中，然后将 sitemap 提交给百度。百度会周期性的抓取检查您提交的 sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>    4、手动提交：一次性提交链接给百度，可以使用此种方式</p>
<p><strong>自动推送</strong><br>我这里用的python自动推送脚本（Mac环境）如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: LoveNight</span></span><br><span class="line"><span class="comment"># @Last Modified by:   LoveNight</span></span><br><span class="line"><span class="comment"># @Last Modified by:   Keith</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import msvcrt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hexo 博客专用，向百度站长平台提交所有网址</span></span><br><span class="line"><span class="string">本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。</span></span><br><span class="line"><span class="string">百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index</span></span><br><span class="line"><span class="string">主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</span></span><br><span class="line"><span class="string">从中找到自己的接口调用地址</span></span><br><span class="line"><span class="string">python环境：</span></span><br><span class="line"><span class="string">pip install beautifulsoup4</span></span><br><span class="line"><span class="string">pip install requests</span></span><br><span class="line"><span class="string">xcode-select --install  </span></span><br><span class="line"><span class="string">pip install lxml </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ❌❌❌ 抄的需要更改这个URL！！！❌❌❌</span></span><br><span class="line">url = <span class="string">&#x27;http://data.zz.baidu.com/urls?site=jimmyju.github.io&amp;token=6Q3qdoIrzAtnwLWj&#x27;</span></span><br><span class="line">baidu_sitemap = os.path.join(sys.path[<span class="number">0</span>], <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;baidusitemap.xml&#x27;</span>)</span><br><span class="line">google_sitemap = os.path.join(sys.path[<span class="number">0</span>], <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;sitemap.xml&#x27;</span>)</span><br><span class="line">sitemap = [baidu_sitemap, google_sitemap]</span><br><span class="line"><span class="keyword">assert</span> (os.path.exists(baidu_sitemap) <span class="keyword">or</span> os.path.exists(</span><br><span class="line">    google_sitemap)), <span class="string">&quot;没找到任何网站地图，请检查！&quot;</span></span><br><span class="line"><span class="comment"># 从站点地图中读取网址列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrls</span>():</span></span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> sitemap:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(_):</span><br><span class="line">            <span class="keyword">with</span> open(_, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                xml = f.read()</span><br><span class="line">        soup = BS(xml, <span class="string">&quot;xml&quot;</span>)</span><br><span class="line">        tags = soup.find_all(<span class="string">&quot;loc&quot;</span>)</span><br><span class="line">        urls += [x.string <span class="keyword">for</span> x <span class="keyword">in</span> tags]</span><br><span class="line">        <span class="keyword">if</span> _ == baidu_sitemap:</span><br><span class="line">            tags = soup.find_all(<span class="string">&quot;breadCrumb&quot;</span>, url=<span class="literal">True</span>)</span><br><span class="line">            urls += [x[<span class="string">&quot;url&quot;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> tags]</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"><span class="comment"># POST提交网址列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postUrls</span>(<span class="params">urls</span>):</span></span><br><span class="line">    urls = set(urls)  <span class="comment"># 先去重</span></span><br><span class="line">    print(<span class="string">&quot;一共提取出 %s 个网址&quot;</span> % len(urls))</span><br><span class="line">    print(urls)</span><br><span class="line">    data = <span class="string">&quot;\n&quot;</span>.join(urls)</span><br><span class="line">    <span class="keyword">return</span> requests.post(url, data=data).text</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls = getUrls()</span><br><span class="line">    result = postUrls(urls)</span><br><span class="line">    print(<span class="string">&quot;提交结果：&quot;</span>)</span><br><span class="line">    print(result)</span><br><span class="line"><span class="comment">#    msvcrt.getch()</span></span><br></pre></td></tr></table></figure>
<h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h2><p>robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br>在 source 目录下增加 rebots.txt 文件，网站生成后在网站的根目录(站点目录/public/)下。<br>（请将域名改为自己的网站）</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://你的域名/sitemap.xml</span><br><span class="line">Sitemap: https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>Allow表示允许被访问的，Disallow是不允许的意思。注意后面两个Sitemap就是网站地图了。而网站地图前面说了是给爬虫用的。这里配置在robots中。</p>
<h2 id="Url持久化"><a href="#Url持久化" class="headerlink" title="Url持久化"></a>Url持久化</h2><p>我们可以发现hexo默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。<br>这种链接对搜索爬虫是很不友好的，第一它的url结构超过了三层，太深了。<br>下面我推荐一种方式：<br>安装 hexo-abbrlink<br><code>npm install hexo-abbrlink --save</code><br>然后配置_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: :title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>之后部署一下，就看到你的链接的变化<br>如果看不到图片，则可把<br><code>permalink: archives/:abbrlink.html</code><br>改为<br><code>permalink: archives/:abbrlink/</code></p>
<h2 id="添加-nofollow-标签"><a href="#添加-nofollow-标签" class="headerlink" title="添加 nofollow 标签"></a>添加 nofollow 标签</h2><p>给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。<br>首先修改 footer.swig（your-hexo-site\themes\next\layout_partials)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://hexo.io&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://hexo.io&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/iissnan/hexo-theme-next&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;theme-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/iissnan/hexo-theme-next&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>再修改 sidebar.swig（your-hexo-site\themes\next\layout_macro）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; link &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; link &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cc-opacity&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cc-opacity&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span>&gt;</span>`</span><br></pre></td></tr></table></figure>
<p>优化都完成后可通过谷歌搜索文章标题，测试是否被收录及排名。</p>
<h2 id="页面关键字优化"><a href="#页面关键字优化" class="headerlink" title="页面关键字优化"></a>页面关键字优化</h2><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>文件路径是your-hexo-site\themes\next\layout\index.swig,打开编辑：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="keywords-关键词、关键字"><a href="#keywords-关键词、关键字" class="headerlink" title="keywords(关键词、关键字)"></a>keywords(关键词、关键字)</h3><p>keywords在你_config.yml配置文件中就有。注意的是除了根目录上的要修改以外还有主题里的。否则就会出现默认的keywords。</p>
<h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>description就是这个页面的描述，随便写什么。</p>
<h2 id="Next主题自带SEO优化选项"><a href="#Next主题自带SEO优化选项" class="headerlink" title="Next主题自带SEO优化选项"></a>Next主题自带SEO优化选项</h2><p>主题配置文件_config.yml中有个选项是seo，默认是false，改成true 即开启了seo优化，如改变博文title等，然后相同文件下有个关键字选项keywords填充上，写博文时最好每篇博文都加上keywords。hexo的根目录配置文件_config.yml中title、subtitle和description也建议填上。</p>
<p>参考链接<br><a href="https://fedoryx.github.io/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2-SEO-%E4%BC%98%E5%8C%96-%E8%B0%B7%E6%AD%8C%E7%AF%87/">Hexo 博客搜索 SEO 优化 — 谷歌篇</a><br><a href="https://madordie.github.io/post/use-hexo-setup-blog/">hexo的博客让百度收录</a><br><a href="http://www.dajipai.cc/">hexo博客SEO优化</a><br><a href="http://www.yuan-ji.me/Hexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98/">提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题</a></p>
<p><em>摘自：</em><br><em>作者：时光丶flies</em><br><em>链接：<a href="https://www.jianshu.com/p/c20bb9df1867">https://www.jianshu.com/p/c20bb9df1867</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>据说爱恩斯坦是中等学生，你享看看真实的史料么</title>
    <url>/archives/15b0611c/</url>
    <content><![CDATA[<p>原创 一棵青木 远方青木 10月13日</p>
<p><img src="/archives/15b0611c/1.png" alt=" "></p>
<p>就是数学那么差的爱因斯坦，经过自身的不懈努力，后来居然成为了举世闻名的大科学家，被列为20世纪人类科学家之首。</p>
<p>多么励志的一个故事。</p>
<p>这个故事在中国流传的如此之广，<strong>以至于连我小时候都听过并相信这就是事实。</strong></p>
<p>本意可能是励志，但副作用相当大，那就是<strong>读书无用论和应试教育无用论</strong>的兴起。</p>
<p>读书读得不好，考试考的不好，不用慌。</p>
<p>别说你以后可能当大老板，就算当大科学家，那也不是不可能。</p>
<p>你只是不适合考试而已，不代表你不适合知识。</p>
<p>是中国的应试教育害了你，如果你到了欧美，给你一个培养的环境，马上就能成才。</p>
<p>既然<strong>应试教育的成绩不能代表能力，甚至不能代表潜力。</strong></p>
<p>那我苦哈哈的去读书考试干嘛，学习那些完全无用的知识，纯粹浪费我的青春。</p>
<p>学英语有啥用？</p>
<p>学数学有啥用？</p>
<p>学物理有啥用？</p>
<p>反正以后买菜又用不到，会个加减乘除不就行了。</p>
<p>虽然我数学不及格，但只要我买菜够勤快，以后也能修炼成爱因斯坦。</p>
<p>那种一读书就犯困的人，绝对相信爱因斯坦小时候数学不及格。</p>
<p><strong>因为爱因斯坦考试成绩很差，最符合这种人的利益。</strong></p>
<p>横行中国数十年的谣言，如今被诺贝尔奖官方给戳破了。</p>
<p>近日，诺贝尔奖官方公布了爱因斯坦1896年就读于瑞士阿劳市高中的成绩单。</p>
<p>那一年，爱因斯坦17岁。</p>
<p><img src="/archives/15b0611c/2.png" alt=" "></p>
<p>瑞士的成绩制，6分是最高分，1分是最低分。</p>
<p>爱因斯坦有5科拿下了满分，也就是6分，分别是<strong>代数，几何，画法几何，物理和历史。</strong></p>
<p><img src="/archives/15b0611c/3.png" alt=" "></p>
<p>从成绩单中可以看到，爱因斯坦的文科确实不太好，法语甚至只拿了3分，但理科是爆炸强。</p>
<p>爱因斯坦的高中数学，不仅及格了，还拿下了满分。</p>
<p>我从小就很纳闷，既然爱因斯坦的物理和数学那么好，为什么考试会不及格。</p>
<p>做简单数学题都能做错的人，能解出如此复杂的方程式并率领人类揭示宇宙奥秘？</p>
<p>很矛盾啊，因为高级别的科学，容不下一丝错误，差之毫厘，得出的结论能谬以千里。</p>
<p>今天我终于知道答案了，人家爱因斯坦高中数学根本就是满分，一点错误都没有，当然不会犯差之毫厘这种错误。</p>
<p>那么高中数学满分的爱因斯坦，为人类做出了什么贡献呢？</p>
<p>简单的给大家列举一下。</p>
<p>普通贡献就不说了，主要说那些<strong>匪夷所思，颠覆三观的。</strong></p>
<h2 id="空间是可以扭曲的"><a href="#空间是可以扭曲的" class="headerlink" title="空间是可以扭曲的"></a>空间是可以扭曲的</h2><p>在正常人的认知中，空间是永恒不变的。</p>
<p>空间就是空间，只是一个概念而已，还能有啥？</p>
<p>但爱因斯坦说，空间是扭曲的，大质量的天体，会“压弯”周围的空间，导致附近的空间出现弯曲的现象。</p>
<p><img src="/archives/15b0611c/4.png" alt=" "></p>
<p>凭这个理论，爱因斯坦完善了牛顿的万有引力。</p>
<p>但这个结论，实在是太荒谬了，严重超出正常人的认知。</p>
<p>太阳扭曲了它周围的空间，你也扭曲了你周围的空间，我们周围的空间都是在不断波动的。</p>
<p>逗我呢。</p>
<p>但后来，人们证实了爱因斯坦的结论。</p>
<p>因为光线在经过恒星的时候，确实发生了偏转和弯曲。</p>
<p>光不是沿直线传播的，而是沿空间传播的。</p>
<p><strong>只要你能扭曲空间，你就可以扭曲光。</strong></p>
<p>根据引力可以扭曲空间的原理，爱因斯坦还预测，当一个巨大天体的质量发生剧烈改变时，其引力的剧烈改变会导致周围的时空畸变。</p>
<p>这种时空畸变差不多相当于向宇宙这个池塘里投入一颗石子，会导致时空波动，产生涟漪，而这种时空涟漪，理论上是可以被探测到的。</p>
<p>这就是鼎鼎大名的<strong>引力波</strong>，2016年宣布探测到引力波时，全球科学界都轰动了。</p>
<p>连A股，当时也跟风瞎炒了一番，也不知道那帮人知不知道什么叫引力波。</p>
<h2 id="时间是可以扭曲的"><a href="#时间是可以扭曲的" class="headerlink" title="时间是可以扭曲的"></a>时间是可以扭曲的</h2><p>爱因斯坦弄完了空间，又开始捣腾时间。</p>
<p>他又提出了一个观点，时间是可以扭曲的。</p>
<p>时间可以加速，也可以减速，减速到极致甚至可以静止。</p>
<p>简直是胡说八道。</p>
<p>但这个明显看起来是胡说八道的观点，又被人类给证实了。</p>
<p>1971年，4台被校准的铯原子钟被分别放在2架民航客机上，利用地球自转获得一个相对较高的宇宙速度。</p>
<p>一架自西向东飞，飞完之后发现和地面上的原子钟相比，快了273±7纳秒。</p>
<p>常规理论完全无法解释这一现象，但按照爱因斯坦的相对论，原子钟不仅会快，而且理论计算出会快275±21纳秒，和实验结果基本符合。</p>
<p>另一架飞机自东向西飞，飞完之后发现和地面上的原子钟相比，慢了59±10纳秒。</p>
<p>而按照相对论的理论值，应该慢40±23纳秒。</p>
<p>目前整个地球上，只有爱因斯坦的相对论，能解释铯原子钟的时间为什么发生了如此诡异的改变。</p>
<p>所以相对论，又称之为时空论。</p>
<h2 id="质量是可以扭曲的"><a href="#质量是可以扭曲的" class="headerlink" title="质量是可以扭曲的"></a>质量是可以扭曲的</h2><p>在常规人类的思想中，基本元素这种物质是永恒不变的。</p>
<p>你可以把面包消化成葡萄糖，但里面的碳元素永远是碳元素。</p>
<p>但爱因斯坦说，<strong>质量可以转化成能量，能量也可以转化成质量。</strong></p>
<p>不仅提出了这个胡说八道的理论，爱因斯坦还弄出了一个质能方程，说只需要损失一点点质量，就可以释放出大量的能量。</p>
<p>爱因斯坦用这个理论，解释了光速不变的原因，<strong>物质运动的极限速度就是光速，多余的能量会全部转化为质量。</strong></p>
<p>但这个理论，也让人类发明了原子弹。</p>
<p><strong>只需要一点点质量，就可以释放出恐怖到令人类难以置信的能量。</strong></p>
<p>爱因斯坦说空间可以扭曲，我们虽然证明了这个理论是对的，但不知道怎么利用。</p>
<p>爱因斯坦说时间可以扭曲，我们虽然证明了这个理论是对的，但更加不知道怎么利用。</p>
<p>爱因斯坦说质量可以扭曲，我们不仅证明了这个理论是对的，还找到了利用的办法。</p>
<p>这就是为什么核武器的震慑力如此之强的原因，普通武器的杀伤力连给核武器提鞋都不配。</p>
<p><strong>因为核武器是超越时代的武器，它本不应该出现在今天的人类社会里。</strong></p>
<p>人类的理论框架，落后于相对论整整一个时代。</p>
<p>所以依据人类目前理论框架制造出的武器，自然不可能和依据相对论制造出的核武器媲美。</p>
<p>如果有朝一日人类制造出了可以扭曲空间的防护盾，或者可以改变时间的能量罩。</p>
<p>那时候的核武器，才有可以克制的办法，<strong>因为大家是基于同一水平的理论框架制造出来的武器。</strong></p>
<h2 id="学霸的世界观"><a href="#学霸的世界观" class="headerlink" title="学霸的世界观"></a>学霸的世界观</h2><p>爱因斯坦以一己之力，把整个人类的理论物理水平提高了一个时代，提高到了一个匪夷所思的水平。</p>
<p>相对论的理论水平之超前，已经到了绝大多数人类都无法理解，甚至颠覆常识的地步。</p>
<p>人类科学家目前能做的，仅仅只是通过观测宇宙来证明相对论而已，远远没到能利用的地步。</p>
<p>直到今天，相对论都还有理论尚未被证明，因为人类始终无法观测到证据，那就是虫洞。</p>
<p><strong>爱因斯坦说，我们可以从虫洞这里撕裂时空，从时空的一头钻进去，从另外一头钻出来，从而实现超时空旅行。</strong></p>
<p>听起来好像就是胡说八道，但理论上确实无懈可击，现在只等人证明了。</p>
<p>谁能观测到虫洞存在的证据，谁就一定可以拿到诺贝尔奖。</p>
<p>很多人不理解现在的物理学家都在玩什么，天天在那里搞什么引力波、黑洞、虫洞，时空旅行，有意义吗？</p>
<p>这玩意有蛋用啊。</p>
<p>确实没蛋用，因为人类的其他理论和技术跟不上，所以导致这些东西都是空中楼阁，只能看看，无法利用。</p>
<p>但只要有人能找到利用的办法，那威力简直是太大了。</p>
<p>爱因斯坦在相对论里提出了那么多的理论，目前被人类利用到现实的，就是原子弹和氢弹。</p>
<p><strong>如果你能把爱因斯坦的其他理论也应用到现实，那你就拥有了可以和核武器相抗衡的武器。</strong></p>
<p>这个力量有多大，你自己想一想。</p>
<p>所以全人类的物理学家，现在都在研究那些虚无缥缈的东西，看起来远远没有研究汽车发动机的靠谱。</p>
<p><strong>并不是那些东西虚，只是太超前而已。</strong></p>
<p>1879年，爱因斯坦出生。<br>1896年，17岁的爱因斯坦高中毕业，母校瑞士阿劳市高中。<br>1900年，21岁的爱因斯坦大学毕业，母校瑞士苏黎世联邦理工学院。<br>1905年，26岁的爱因斯坦创立了狭义相对论。<br>1915年，36岁的爱因斯坦创立了广义相对论。</p>
<p>而如此牛X的爱因斯坦，却被声称高中数学不及格，当成了应试教育无用论的典型。</p>
<p>事实上，这个谣言并不是毫无根据的，因为爱因斯坦本人确实说过自己的数学不行，而且亲自写在自己的回忆录里。</p>
<p>1955年，76岁的爱因斯坦濒临垂暮，写了一本回忆录。</p>
<p>书中爱因斯坦是这么评价自己的学生阶段的：</p>
<blockquote>
<p>我很快发现，我能成为一个有中等成绩的学生也就该心满意足了。<br>我年轻的时候没有重视数学，这是一个我后来才很难过地发现的错误。</p>
</blockquote>
<p><strong>中等学生爱因斯</strong>，这就是爱因斯坦对自己学生阶段的评价。</p>
<p>垂暮之年的爱因斯坦，已经功成名就，这么一说纯粹就是谦逊而已。</p>
<p>类似的话其实很多。</p>
<p>比方说悔创阿里杰克马，比方说普通家庭马化腾。</p>
<p><strong>他们就说说而已，说是他们的自由，但真信了，那就是你的不对了。</strong></p>
<p>以爱因斯坦的高度，高中数学满分，那只是起点而已，没有在高中阶段就写出几篇世界级的数学论文，确实是没有重视数学。</p>
<p>和自己的物理造诣来比，数学确实不太好，中等成绩，都是年轻的时候没好好学害的。</p>
<p><strong>这就是学霸的思维和世界观。</strong></p>
<p>考试满分，才算拿到了学霸比拼的入场券。</p>
<p><strong>爱因斯坦认为的数学不太好，和你认为的数学不太好，那是两码事。</strong></p>
<p>文章已于2020-10-14修改</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMzc2OQ==&amp;mid=2247516842&amp;idx=1&amp;sn=718bb1c0c2c1f4d756ab18d62cffd4c5&amp;chksm=fe0eeabcc97963aa335f0e4b3642f1b8faa39db51dd55a8ae646150ca8fd46d2b2ee0dfe1e8c&amp;mpshare=1&amp;scene=1&amp;srcid=1014Th64z2XOEoIbkcK4uICU&amp;sharer_sharetime=1603954308557&amp;sharer_shareid=7e0a6865fcdd528f75fa09b6260538a2&amp;key=d11c8083f930d7c933758b0c7dd7f6fed6b7995e04eaa2a516e0a489103fb4bbd5e691316845d3bd46cb2486bde58d2fd3efcec458f3d9c00de3947b1ddb273d7cefcad890f9c123e50838f72cdea13609891d18c13a9ebdb0b1d2b68f99d0d5c6afc7af8a39dabe49d05fc1b7650cb734646932f6137f5d0848aa9f9af546ed&amp;ascene=1&amp;uin=OTU3Mzg5Njgx&amp;devicetype=Windows+10+x64&amp;version=62090538&amp;lang=zh_CN&amp;exportkey=A2tyhw63hjy8Roczzzo0Vw0%3D&amp;pass_ticket=7b4XTSF0CljrCq6CEf%2FM%2BnKBNIxMFIjzWlN4KDBEycaioHTKmEtFzns0mTC%2BmxZa&amp;wx_header=0##">阅读原文</a></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>人物</category>
      </categories>
      <tags>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql使用日志</title>
    <url>/archives/c6ba0622/</url>
    <content><![CDATA[<p><img src="/archives/c6ba0622/1.jpg" alt=" "></p>
<h2 id="postgres安装"><a href="#postgres安装" class="headerlink" title="postgres安装"></a>postgres安装</h2><p>postgres作为流行的关系型数据库，当然有多种安装方式，可以参考官方：<a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a><br>postgres初次安装后，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户。这里需要注意的是，同时还生成了一个名为postgres的Linux系统用户。可以使用postgres用户来生成其他用户和新数据库。</p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>docker安装可以指定POSTGRES_DB，POSTGRES_USER，POSTGRES_PASSWORD（password必须指定，否则创建容器后会报错）等，详见<a href="https://hub.docker.com/_/postgres">https://hub.docker.com/_/postgres</a>，如果不指定，则会跟常规安装一样，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户，还有postgres系统用户。指定了POSTGRES-DB，创建的容器内会生成指定数据库用户名来替代默认的postgres（超级用户）。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>切换用户：<br><code>su postgres</code><br>进入postgresql：<br><code>psql</code><br>或直接使用用户名参数登录：<br><code>psql -U postgres -d postgres</code><br>U是大写，需要-d指定数据库</p>
<h3 id="创建数据库用户和数据库并授权"><a href="#创建数据库用户和数据库并授权" class="headerlink" title="创建数据库用户和数据库并授权"></a>创建数据库用户和数据库并授权</h3><p>进入数据库控制台后：<br>创建用户<br><code>CREATE USER dbuser WITH PASSWORD &#39;password&#39;;</code><br>创建数据库<br><code>CREATE DATABASE exampledb OWNER dbuser;</code><br>授权<br><code>GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;</code></p>
<h3 id="使用shell命令行"><a href="#使用shell命令行" class="headerlink" title="使用shell命令行"></a>使用shell命令行</h3><p>创建数据库用户dbuser，并指定其为超级用户<br><code>sudo -u postgres createuser --superuser dbuser</code><br>在shell命令行下，创建数据库exampledb，并指定所有者为dbuser<br><code>sudo -u postgres createdb -O dbuser exampledb</code></p>
<h3 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h3><p>\h：查看SQL命令的解释，比如\h select。<br>\?：查看psql命令列表。<br>\l：列出所有数据库。<br>\c [database_name]：连接其他数据库。<br>\d：列出当前数据库的所有表格。<br>\d [table_name]：列出某一张表格的结构。<br>\du：列出所有用户。<br>\e：打开文本编辑器。<br>\conninfo：列出当前数据库和连接的信息。<br>\password：修改当前用户密码<br>\q：退出</p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>创建新表<br><code>CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);</code><br>插入数据<br><code>INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;);</code><br>选择记录<br><code>SELECT * FROM user_tbl;</code><br>更新数据<br><code>UPDATE user_tbl set name = &#39;李四&#39; WHERE name = &#39;张三&#39;;</code><br>删除记录<br><code>DELETE FROM user_tbl WHERE name = &#39;李四&#39; ;</code><br>添加栏位<br><code>ALTER TABLE user_tbl ADD email VARCHAR(40);</code><br>更新结构<br><code>ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;</code><br>更名栏位<br><code>ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;</code><br>删除栏位<br><code>ALTER TABLE user_tbl DROP COLUMN email;</code><br>表格更名<br><code>ALTER TABLE user_tbl RENAME TO backup_tbl;</code><br>删除表格<br><code>DROP TABLE IF EXISTS backup_tbl;</code></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署odoo14及postgresql</title>
    <url>/archives/18899723/</url>
    <content><![CDATA[<p><img src="/archives/18899723/1.png" alt=" "></p>
<h2 id="odoo简介和部署方式"><a href="#odoo简介和部署方式" class="headerlink" title="odoo简介和部署方式"></a>odoo简介和部署方式</h2><p>OpenERP的前身，开源，功能强大，更新版本到14，官方有几种安装方法，使用docker方法部署更简单，而官方使用docker compose的方式启动，我希望postgressql能够提供给多个应用使用，可以通过外部方法来访问，所以我这里用portainer部署。</p>
<h2 id="部署postgres"><a href="#部署postgres" class="headerlink" title="部署postgres"></a>部署postgres</h2><h3 id="下载portgres镜像"><a href="#下载portgres镜像" class="headerlink" title="下载portgres镜像"></a>下载portgres镜像</h3><p>首先确定好postgresql的版本，这里使用postgres:12，直接执行<code>docker pull postgres:12</code>下载镜像</p>
<h3 id="portainer上配置postgres容器参数"><a href="#portainer上配置postgres容器参数" class="headerlink" title="portainer上配置postgres容器参数"></a>portainer上配置postgres容器参数</h3><p>postgres docker官方镜像有参数说明：<a href="https://hub.docker.com/_/postgres?tab=description">https://hub.docker.com/_/postgres?tab=description</a>，根据odoo docker官网镜像说明，其中的yaml配置上环境参数只配置了下面几个，所以potainer上也设置这几个参数即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGDATA=/var/lib/postgresql/data/pgdata</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">odoo-db-data:/var/lib/postgresql/data/pgdata</span></span><br></pre></td></tr></table></figure>
<p>portainer对应配置：<br><img src="/archives/18899723/2.png" alt=" "></p>
<p>其中额外配置了port映射，postgres数据库端口默认是5432,使用宿主机的5432到docker主机的5432端口，PGDATA并没有配置，是默认生成的，与上面的有点不一样，手动配置了volume映射。<br>配置后生成container，可以在portainer上看到running。<br>使用navicat连接到数据库测试：<br><img src="/archives/18899723/3.png" alt=" "><br>测试成功！</p>
<h2 id="部署odoo"><a href="#部署odoo" class="headerlink" title="部署odoo"></a>部署odoo</h2><h3 id="下载odoo镜像"><a href="#下载odoo镜像" class="headerlink" title="下载odoo镜像"></a>下载odoo镜像</h3><p>使用最新镜像，最新版为14<br><code>docker pull odoo:latest</code></p>
<h3 id="portainer上配置odoo容器参数"><a href="#portainer上配置odoo容器参数" class="headerlink" title="portainer上配置odoo容器参数"></a>portainer上配置odoo容器参数</h3><p>官方docker-compose.yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">odoo:12.0</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mydb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8069:8069&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">HOST=mydb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">USER=odoo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">PASSWORD=myodoo</span></span><br></pre></td></tr></table></figure>
<p>portainer对应配置：<br><img src="/archives/18899723/4.png" alt=" "><br>配置后生成container，在浏览器输入<a href="http://宿主ip:8069">http://宿主ip:8069</a>访问，出现500错误。从portainer上查看日志，发现这里配置的odoo数据库需要初始化，需要运行odoo -i base强制初始化。这一步搞了我很久，网上也没有详细的解决方法，这里记录下解决方法。</p>
<ol>
<li>拷贝容器内的odoo.conf配置文件到本机：<br>先进入映射的volume配置文件目录运行：<br><code>docker exec home_odoo cat /etc/odoo/odoo.conf &gt; odoo.conf</code></li>
<li><p>修改配置文件，手动修改数据库连接参数：<br><code>vim odoo.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[options]</span><br><span class="line">db_host&#x3D;xxx</span><br><span class="line">db_port&#x3D;xxx</span><br><span class="line">db_name&#x3D;odoo_db</span><br><span class="line">db_user&#x3D;odoo</span><br><span class="line">db_password&#x3D;odoo</span><br></pre></td></tr></table></figure>
</li>
<li><p>从portainer进入odoo的容器执行：<br><code>odoo -i base -d odoo_db</code><br>这里没有指定用户执行，默认就是使用环境配置的odoo用户，也只有该用户执行才生效。</p>
</li>
</ol>
<p>执行完毕后，再次访问<a href="http://宿主ip:8069">http://宿主ip:8069</a>，就会出现登录界面啦。默认登陆用户名和密码都是admin，记得进入修改。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这里有必要记录下docker容器目录映射到宿主目录的权限问题，以免映射后出现权限报错。一般来说，生成容器后，里面的应用目录有固定的用户权限。如postgres，生成容器后，默认数据库目录属主和属组都是postgres，而查看其ID为999<br><img src="/archives/18899723/7.png" alt=" "><br>而回到宿主的对应映射目录，可以看到其ID是跟容器的用户ID一样的。<br><img src="/archives/18899723/8.png" alt=" "><br>其ID对应宿主的用户名字不一样，其实是LINUX使用ID号作为唯一权限代码。但宿主机上如果没有对应的ID号，则会显示容器的ID号。宿主机建立目录后且映射后，不要修改其属主和属组，不然权限就乱套了。也可以在宿主机上新建一个ID号如<code>useradd postgres -u 1000 -g 1000 -M -s /sbin/nologin</code>，专门给容器使用，在配置容器时，添加其environment参数如PUID=1000，PGID=1000，其参数名要看官方给出的名字来指定，让容器指定使用该ID号生成用户。这样无论从容器看还是宿主机看，都是postgres的名字了。</p>
<h2 id="odoo使用记录"><a href="#odoo使用记录" class="headerlink" title="odoo使用记录"></a>odoo使用记录</h2><h3 id="手动导入第三方安装包"><a href="#手动导入第三方安装包" class="headerlink" title="手动导入第三方安装包"></a>手动导入第三方安装包</h3><p>首先要启用开发者模式，点击设置，常规设置，到最下面，点击启用开发者模式<br><img src="/archives/18899723/5.png" alt=" "><br>启用后，进入应用，右上角取消搜索，就会显示全部的应用，在搜索base，可以见到base_import模块，安装下就会在菜单栏多一个导入模块，就可以手动导入第三方应用啦。<br><img src="/archives/18899723/6.png" alt=" "></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>使用denyhosts防止暴力破解ssh</title>
    <url>/archives/e14542ec/</url>
    <content><![CDATA[<p><img src="/archives/e14542ec/1.jpg" alt=" "></p>
<h2 id="下载安装denyhosts"><a href="#下载安装denyhosts" class="headerlink" title="下载安装denyhosts"></a>下载安装denyhosts</h2><p>github上有软件及安装说明，使用python开发的：<br><a href="https://github.com/denyhosts/denyhosts">https://github.com/denyhosts/denyhosts</a><br>当前最新版提供deb包和rpm包，方便debain/ubuntu和redhat/centos系统安装<br>这里我使用deb包：<br><code>wget https://github.com/denyhosts/denyhosts/releases/download/v3.1/denyhosts_3.1.2-2_all.deb</code><br>安装<br><code>dpkg -i denyhosts_3.1.2-2_all.deb</code></p>
<h3 id="路径说明"><a href="#路径说明" class="headerlink" title="路径说明"></a>路径说明</h3><p>默认安装路径：<br>配置文件denyhost.conf：/etc/denyhost.conf<br>执行文件denyhost.py: /usr/local/bin/denyhost.py<br>控制文件daemon-control-dist: /usr/local/bin/daemon-control-dist</p>
<h3 id="修改denyhost-conf"><a href="#修改denyhost-conf" class="headerlink" title="修改denyhost.conf"></a>修改denyhost.conf</h3><p><code>egrep -v &quot;^$|#&quot; /etc/denyhosts.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SECURE_LOG &#x3D; &#x2F;var&#x2F;log&#x2F;auth.log</span><br><span class="line">HOSTS_DENY &#x3D; &#x2F;etc&#x2F;hosts.deny</span><br><span class="line">PURGE_DENY &#x3D;</span><br><span class="line">BLOCK_SERVICE  &#x3D; sshd</span><br><span class="line">DENY_THRESHOLD_INVALID &#x3D; 5</span><br><span class="line">DENY_THRESHOLD_VALID &#x3D; 10</span><br><span class="line">DENY_THRESHOLD_ROOT &#x3D; 1</span><br><span class="line">DENY_THRESHOLD_RESTRICTED &#x3D; 1</span><br><span class="line">DETECT_DOVECOT_LOGIN_ATTEMPTS &#x3D; NO</span><br><span class="line">WORK_DIR &#x3D; &#x2F;var&#x2F;lib&#x2F;denyhosts</span><br><span class="line">ETC_DIR &#x3D; &#x2F;etc</span><br><span class="line">SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS&#x3D;YES</span><br><span class="line">HOSTNAME_LOOKUP&#x3D;NO</span><br><span class="line">LOCK_FILE &#x3D; &#x2F;run&#x2F;denyhosts.pid</span><br><span class="line">IPTABLES &#x3D; &#x2F;sbin&#x2F;iptables</span><br><span class="line">ALLOWED_HOSTS_HOSTNAME_LOOKUP&#x3D;NO</span><br><span class="line">AGE_RESET_VALID&#x3D;5d</span><br><span class="line">AGE_RESET_ROOT&#x3D;25d</span><br><span class="line">AGE_RESET_RESTRICTED&#x3D;25d</span><br><span class="line">AGE_RESET_INVALID&#x3D;10d</span><br><span class="line">DAEMON_LOG &#x3D; &#x2F;var&#x2F;log&#x2F;denyhosts</span><br><span class="line">DAEMON_SLEEP &#x3D; 30s</span><br><span class="line">DAEMON_PURGE &#x3D; 1h</span><br><span class="line">SYNC_UPLOAD &#x3D; no</span><br><span class="line">SYNC_DOWNLOAD &#x3D; no</span><br></pre></td></tr></table></figure>
<h3 id="修改daemon-control-dist"><a href="#修改daemon-control-dist" class="headerlink" title="修改daemon-control-dist"></a>修改daemon-control-dist</h3><p><code>vim /usr/local/bin/daemon-control-dist</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DENYHOSTS_BIN &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;denyhosts.py&quot;</span><br><span class="line">DENYHOSTS_LOCK &#x3D; &quot;&#x2F;run&#x2F;denyhosts.pid&quot;</span><br><span class="line">DENYHOSTS_CFG &#x3D; &quot;&#x2F;etc&#x2F;denyhosts.conf&quot;</span><br><span class="line"></span><br><span class="line">PYTHON_BIN &#x3D; &quot;&#x2F;usr&#x2F;bin&#x2F;env python&quot;</span><br></pre></td></tr></table></figure>
<p>新版本默认使用python3，这里改为python</p>
<h3 id="运行daemon-control-dist"><a href="#运行daemon-control-dist" class="headerlink" title="运行daemon-control-dist"></a>运行daemon-control-dist</h3><p>默认denyhost.py使用daemon-control-dist来控制，可以加入开机自动启动，这里先手动启动：<br><code>daemon-control-dist start</code><br>如果报module xxx not found，是python没有安装对应的库，需要手动安装下：<br><code>pip install xxx</code><br>使用python3的话就执行<br><code>pip3 install xxx</code><br>然后重新运行下就行</p>
<h3 id="查看hosts-deny"><a href="#查看hosts-deny" class="headerlink" title="查看hosts.deny"></a>查看hosts.deny</h3><p>被block的IP地址会放到/etc/hosts.deny里面，可以查看。</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK使用日志</title>
    <url>/archives/459ed231/</url>
    <content><![CDATA[<p><img src="/archives/459ed231/1.png" alt=" "></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>
<p>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。详细可参考Elasticsearch权威指南<br>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。<br>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。<br>Beats在这里是一个轻量级日志采集器，其实Beats家族有6个成员，早期的ELK架构中使用Logstash收集、解析日志，但是Logstash对内存、cpu、io等资源消耗比较高。相比 Logstash，Beats所占系统的CPU和内存几乎可以忽略不计<br>Redis是一个高性能的内存key-value数据库,非必需安装,可以防止数据丢失。缓存。</p>
<p>ELK Stack （5.0版本之后）—&gt; Elastic Stack == （ELK Stack + Beats）。目前Beats包含六种工具：</p>
<p>Packetbeat： 网络数据（收集网络流量数据）<br>Metricbeat： 指标 （收集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）<br>Filebeat： 日志文件（收集文件数据）<br>Winlogbeat： windows事件日志（收集 Windows 事件日志数据）<br>Auditbeat：审计数据 （收集审计日志）<br>Heartbeat：运行时间监控 （收集系统运行时的数据）</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="单机架构（适合少量日志）"><a href="#单机架构（适合少量日志）" class="headerlink" title="单机架构（适合少量日志）"></a>单机架构（适合少量日志）</h3><p><img src="/archives/459ed231/2.png" alt=" "><br>elasticsearch新版本已经可以对日志文件进行预处理，不用添加臃肿的logstash，filebeat直接输出到elasticsearch，使用ingest pipeline来解析日志文件，再保存索引。但该ingest process处理能力有限，只适合单机架构的少量日志。<br>详见官方文档：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html</a><br>官方给出比较简单直接粗暴的模板来生成索引，包含多个字段，已经完全满足你想要的一切信息，而且能根据索引快速生成漂亮的dashboard<br><strong>配置filebeat.yml</strong><br>只需在默认配置上module模块和output模块</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ============================== Filebeat modules ==============================</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">  <span class="comment"># Glob pattern for configuration loading</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set to true to enable config reloading</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Period on which files under path should be checked for changes</span></span><br><span class="line">  <span class="comment">#reload.period: 10s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------- Elasticsearch Output ----------------------------</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;elasticsearch服务器地址+端口&quot;</span>]</span><br><span class="line">  <span class="attr">pipeline:</span> <span class="string">geoip-info</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Protocol - either `http` (default) or `https`.</span></span><br><span class="line">  <span class="comment">#protocol: &quot;https&quot;</span></span><br></pre></td></tr></table></figure>
<p>ouput到elasticsearch的配置中添加pipeline: geoip-info，意味着使用elasticsearch的geoip pipeline，默认elasticsearch不存在这个pipeline，需要手动在kibana上添加。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT _ingest/pipeline/geoip-info</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Add geoip info&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;processors&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;client.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;client.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;source.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;source.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;destination.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;destination.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;server.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;server.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;host.ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target_field&quot;</span>: <span class="string">&quot;host.geo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ignore_missing&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/archives/459ed231/3.png" alt=" "><br>官方说明：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/filebeat-geoip.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/filebeat-geoip.html</a></p>
<p><strong>命令行配置开启对应模块</strong><br><code>filebeat modules enable nginx,system</code><br>这样就开启了nginx和system的模块，相当于修改了/etc/filebeat/modules.d/下的nginx.yml.disable，去掉.disable</p>
<p><strong>修改模块配置文件</strong><br><code>vim /etc/filebeat/modules.d/nginx.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="comment"># Access logs</span></span><br><span class="line">  <span class="attr">access:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="attr">var.paths:</span> [<span class="string">&quot;/app/nginx/logs/access.log&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Error logs</span></span><br><span class="line">  <span class="attr">error:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="attr">var.paths:</span> [<span class="string">&quot;/app/nginx/logs/error.log&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ingress-nginx controller logs. This is disabled by default. It could be used in Kubernetes environments to parse ingress-nginx logs</span></span><br><span class="line">  <span class="attr">ingress_controller:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>修改对应的日志文件路径，nginx最后一个ingress是在k8s上使用的，如果不是k8s环境，则配置为false</p>
<p><strong>命令行配置filebeat处理</strong><br><code>filebeat setup --pipelines --modules nginx,system</code><br>官方说明：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html">https://www.elastic.co/guide/en/beats/filebeat/7.9/load-ingest-pipelines.html</a></p>
<p><strong>运行filebeat并输出到屏幕</strong><br>可以先检查下配置文件和输出是否正常<br><code>filebeat test config</code></p>
<blockquote>
<p>Config OK</p>
</blockquote>
<p><code>filebeat test output</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elasticsearch: http:&#x2F;&#x2F;elastics.xxx.com...</span><br><span class="line">  parse url... OK</span><br><span class="line">  connection...</span><br><span class="line">    parse host... OK</span><br><span class="line">    dns lookup... OK</span><br><span class="line">    addresses: 127.0.0.1</span><br><span class="line">    dial up... OK</span><br><span class="line">  TLS... WARN secure connection disabled</span><br><span class="line">  talk to server... OK</span><br><span class="line">  version: 7.9.2</span><br></pre></td></tr></table></figure>
<p>运行filebeat并输出屏幕<br><code>filebeat -e -d &quot;publish&quot;</code></p>
<p>从屏幕可以看出详细的输出信息，最后到kibana上就会看到创建的pipeline<br><img src="/archives/459ed231/4.png" alt=" "><br>每个日志文件对应一个pipeline来处理，是通过filebeat的field.yml配置文件来生成的。<br>建立索引后，可以看到，从模板配置处理的索引含有非常多的字段（有4839个），完全满足我们想要的<br><img src="/archives/459ed231/5.png" alt=" "><br>打开discover，可以看到生成了geoip的相关信息，可以直接点击查看访问的IP分布<br><img src="/archives/459ed231/6.png" alt=" "><br><img src="/archives/459ed231/7.png" alt=" "></p>
<p><strong>配置dashboard</strong><br>filebeat提供很多官方的dashboard，通过修改配置文件来打开dashboard，前提需要kibana服务器可达。<br>修改filebeat.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ================================= Dashboards =================================</span></span><br><span class="line"><span class="comment"># These settings control loading the sample dashboards to the Kibana index. Loading</span></span><br><span class="line"><span class="comment"># the dashboards is disabled by default and can be enabled either by setting the</span></span><br><span class="line"><span class="comment"># options here or by using the `setup` command.</span></span><br><span class="line"><span class="attr">setup.dashboards.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================== Kibana ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.</span></span><br><span class="line"><span class="comment"># This requires a Kibana endpoint configuration.</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Kibana Host</span></span><br><span class="line">  <span class="comment"># Scheme and port can be left out and will be set to the default (http and 5601)</span></span><br><span class="line">  <span class="comment"># In case you specify and additional path, the scheme is required: http://localhost:5601/path</span></span><br><span class="line">  <span class="comment"># IPv6 addresses should always be defined as: https://[2001:db8::1]:5601</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;http://kibana.xxx.com:xxx&quot;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;xxxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行setup<br><code>filebeat setup --dashboards</code><br>回到kibana，打开dashboard，就会看到生成了很多dashboard模板<br><img src="/archives/459ed231/12.png" alt=" "><br>搜索nginx，就能生成nginx的dashboard<br><img src="/archives/459ed231/13.png" alt=" "></p>
<p>使用这种架构是方便，但是可以看到，索引的名字并不好分类和修改，都是默认生成的，而且不能自定义解析的字段，全部索引到到一个索引文件了，好在kibana的筛选功能够强大。如果用logstash的grok就不会有这个问题。</p>
<h3 id="中等量日志架构"><a href="#中等量日志架构" class="headerlink" title="中等量日志架构"></a>中等量日志架构</h3><p>先用logstash读取Nginx日志和系统日志写入kafka，再用logstash读取出来写入elasticsearch，适合日志量不是太多的架构。<br>其实用redis也可以，redis没必要开快照和持久化，数据写入es后redis的作用就完成了。当然很耗redis内存，一般8-16G。<br>后端可能几十台logstash往kafka写入，如果kafka内存居高不下，也就是前端的logstash读的太慢，要加logstash。直到平衡。<br><img src="/archives/459ed231/9.png" alt=" "></p>
<h3 id="海量日志架构"><a href="#海量日志架构" class="headerlink" title="海量日志架构"></a>海量日志架构</h3><p>官方传统，使用filebeat输出到kafka，再用logstasha读取处理写入elasticsearch，如果觉得卡，则可以用第二种<br><img src="/archives/459ed231/8.png" alt=" "><br><img src="/archives/459ed231/10.png" alt=" "></p>
<p>如果还是遇到性能瓶颈<br>使用filebeat收集日志，先转发到beat端的logstash1，然后logstash1转发到kafka，然后再由logstash2从kafka读取写到elasticsearch。<br><img src="/archives/459ed231/11.png" alt=" "></p>
<p><a href="https://mp.weixin.qq.com/s/F8TVva8tDgN0tNsUcLoySg">https://mp.weixin.qq.com/s/F8TVva8tDgN0tNsUcLoySg</a></p>
<p>整个系统一共含有10台主机（filebeat部署在客户端，不计算在内），其中Logstash有四台，Elasticsearch有二台，Kafka集群三台，kibana一台并配置Nginx代理。</p>
<p>架构解释：</p>
<p>（1）首先用户通过nginx代理访问ELK日志统计平台，这里的Nginx可以设置界面密码。<br>（2）Nginx将请求转发到kibana<br>（3）kibana到Elasticsearch中去获取数据，这里的Elasticsearch是两台做的集群，日志数据会随机保存在任意一台Elasticsearch服务器。<br>（4）Logstash1从Kafka中取出数据并发送到Elasticsearch中。<br>（5）Kafka服务器做日志数据的持久化保存，避免web服务器日志量过大的时候造成的数据收集与保存不一致而导致日志丢失，其中Kafka可以做集群，然后再由Logstash服务器从Kafka持续的取出数据。<br>（6）logstash2从Filebeat取出的日志信息，并放入Kafka中进行保存。<br>（7）Filebeat在客户端进行日志的收集。</p>
<p>注1：【Kafka的加入原因与作用】<br>整个架构加入Kafka，是为了让整个系统更好的分层，Kafka作为一个消息流处理与持久化存储软件，能够帮助我们在主节点上屏蔽掉多个从节点之间不同日志文件的差异，负责管理日志端（从节点）的人可以专注于向 Kafka里生产数据，而负责数据分析聚合端的人则可以专注于从 Kafka内消费数据。所以部署时要把Kafka加进去。<br>而且使用Kafka进行日志传输的原因还在于其有数据缓存的能力，并且它的数据可重复消费，Kafka本身具有高可用性，能够很好的防止数据丢失，它的吞吐量相对来说比较好并且使用广泛。可以有效防止日志丢失和防止logsthash挂掉。综合来说：它均衡了网络传输，从而降低了网络闭塞，尤其是丢失数据的可能性，</p>
<p>注2：【双层的Logstash作用】<br>这里为什么要在Kafka前面增加二台logstash呢？是因为在大量的日志数据写入时，容易导致数据的丢失和混乱，为了解决这一问题，增加二台logstash可以通过类型进行汇总分类，降低数据传输的臃肿。<br>如果只有一层的Logstash，它将处理来自不同客户端Filebeat收集的日志信息汇总，并且进行处理分析，在一定程度上会造成在大规模日志数据下信息的处理混乱，并严重加深负载，所以有二层的结构进行负载均衡处理，并且职责分工，一层汇聚简单分流，一层分析过滤处理信息，并且内层都有二台Logstash来保障服务的高可用性，以此提升整个架构的稳定性。</p>
<p>接下来分别说明原理与各个组件之间的交互（配置文件）。</p>
<p><em>部分摘自<a href="https://www.cnblogs.com/wangxu01/">https://www.cnblogs.com/wangxu01/</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用日志</title>
    <url>/archives/f65250ef/</url>
    <content><![CDATA[<p><img src="/archives/f65250ef/1.jpg" alt=" "></p>
<h2 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h2><p>安装configure编译环境：<br><code>yum install -y gcc gcc-c++ openssl-devel make</code><br>安装pcre库:<br><code>yum install -y pcre pcre-devel</code><br>pcre兼容正则表达式，安装pcre为了使nginx支持具备URI重写功能的Rewrite模块，如果不安装pcre库，则nginx无法使用rewrite模块功能，nginx的rewrite模块功能几乎是企业应用必须。<br>编译参数：<br><code>./configure --help</code><br>按需安装，如：</p>
<blockquote>
<p>—with-http_stub_status_module<br>—with-http_ssl_module</p>
</blockquote>
<p>查看已安装的模块（安装在/app下）：<br><code>/app/nginx/sbin/nginx -V</code><br>如果编译安装后需要再添加模块，则重新运行./configure添加，然后make即可，注意不要make install，这样会覆盖原文件。</p>
<h2 id="添加认证"><a href="#添加认证" class="headerlink" title="添加认证"></a>添加认证</h2><p>需要httpd-tools工具：<br><code>yum install -y httpd-tools</code><br>如果是debain或者ubuntu系统，则<br><code>apt install -y apache2-utils</code><br>添加密码文件：<br><code>htpasswd -cb /app/nginx/htpasswd abc 123456</code><br>在对应模块（server)下添加：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auth_basic</span> <span class="string">&quot;Restricted Access&quot;</span>;</span><br><span class="line"><span class="attribute">auth_basic_user_file</span> /app/nginx/htpasswd;</span><br></pre></td></tr></table></figure>
<h2 id="nginx模块功能"><a href="#nginx模块功能" class="headerlink" title="nginx模块功能"></a>nginx模块功能</h2><h3 id="proxy代理模块"><a href="#proxy代理模块" class="headerlink" title="proxy代理模块"></a>proxy代理模块</h3><p>ngx_http_proxy_module proxy代理模块，用于把请求后抛给服务器节点或upstream服务器池，例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">upstream</span> www_server_pools &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.0.0.7:80</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.0.0.8:80</span> weight=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www_server_pools;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="upstram负载均衡模块"><a href="#upstram负载均衡模块" class="headerlink" title="upstram负载均衡模块"></a>upstram负载均衡模块</h3><p>ngx_http_upstream_module 负载均衡模块，可以实现网站的负载均衡功能及节点的健康检查<br>看官网nginx document upstream模块</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> backend1.example.com       weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> backend2.example.com:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> unix:/tmp/backend3;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> backup1.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">    <span class="attribute">server</span> backup2.example.com:<span class="number">8080</span>   backup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        proxy_pass http://backend; (uptream的标签名）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>backend是模块名，随便起<br>server是http服务器<br>weight是权重，权重大的处理比例就多<br>backup是热备（高可用）</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理frp缓存加速</title>
    <url>/archives/dd6b12a/</url>
    <content><![CDATA[<p><img src="/archives/dd6b12a/1.jpg" alt=" "></p>
<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>由于frp的http和https，都是从用户的服务中完整输出数据的，这对于一些使用frp的用户，网络比较差/上传低，打开自己的这些服务，要加载大半天的。<br>我们可以使用nginx的反代缓存，把frp用户的http和https中的静态资源缓存到服务器本地，从而减少frp用户本身的网络资源请求访问，直接略过大部分，从而在服务器加速。<br>效果是拔群的！</p>
<h2 id="nginx反向代理缓存配置"><a href="#nginx反向代理缓存配置" class="headerlink" title="nginx反向代理缓存配置"></a>nginx反向代理缓存配置</h2><p>本例编译安装nginx，安装路径为/app/nginx<br>新建缓存目录<br><code>mkdir -pv /app/nginx/cache</code><br>赋予权限<br><code>chmod -R 775 /app/nginx/cache</code><br>修改nginx.conf<br><code>vim /app/nginx/conf/nginx.conf</code><br>在http{}模块里面添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">include</span>  extra/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure>
<p>新建vhost.conf:<br><code>vim /app/nginx/conf/extra/vhost.conf</code><br>我的配置文件如下，含多个https：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /app/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=frp_cache:<span class="number">100m</span> max_size=<span class="number">5g</span> inactive=<span class="number">30d</span>;</span><br><span class="line"><span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.xxx.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8680;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8680;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#ssl on;</span></span><br><span class="line">        <span class="attribute">server_name</span> a.xxx.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/esxi.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/esxi.hellshan.top.key;</span><br><span class="line">        <span class="comment">#ssl_trusted_certificate /app/cert/ca.cer;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:4443; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">                <span class="attribute">proxy_redirect</span> https://<span class="variable">$host</span>/ https://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#ssl on;</span></span><br><span class="line">        <span class="attribute">server_name</span> b.xxx.com;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/cloud.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/cloud.hellshan.top.key;</span><br><span class="line">        <span class="comment">#ssl_trusted_certificate /app/cert/ca.cer;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br><span class="line">                <span class="attribute">proxy_redirect</span> https://<span class="variable">$host</span>/ https://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)为需要进行缓存的静态资源，你可以添加或者修改。</p>
<p>proxy_cache_valid为服务器缓存，其中200 206 301 302 304为HTTP状态码（<a href="http://tool.chinaz.com/pagestatus/">http://tool.chinaz.com/pagestatus/</a>）<br>针对状态码缓存，而最后面的 30d 为缓存过期时间，当用户没有在这个有效时间内访问到这个资源，则会过期清除，直到用户重新访问到这个资源则重新缓存。<br>expires 为访问用户本地缓存<br>d 天数 h 小时 m 分钟 s 秒</p>
<p><a href="http://127.0.0.1:8680">http://127.0.0.1:8680</a>的8080端口为你frp.ini配置文件vhost_http_port = 8680端口<br><a href="http://127.0.0.1:8643">http://127.0.0.1:8643</a> 的8643端口为你frp.ini配置文件vhost_https_port = 8643端口<br>对应的frps.ini配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8680</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">8643</span></span><br></pre></td></tr></table></figure>
<p>其中的端口可以根据自己的需要修改。</p>
<p>配置成功后，并且访问目标网站，让nginx进行缓存，在/home/nginx/cache目录里会生成多个缓存目录和文件。</p>
<h2 id="对于nginx-https代理frp-https的理解"><a href="#对于nginx-https代理frp-https的理解" class="headerlink" title="对于nginx https代理frp https的理解"></a>对于nginx https代理frp https的理解</h2><p>我的理解是这样的：<br>如果使用了自定义域名，frp是根据$host值判断该往哪个内网服务转发请求的，因此转给frp的请求中一定要包含$host，否则frp无法正常处理请求。<br>因此以下2个配置很重要：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> https://<span class="variable">$host</span>:8643; <span class="comment">#通过域名访问frp服务</span></span><br></pre></td></tr></table></figure>
<p>proxy_pass中不能写成IP的形式。<br>举一个我的例子，我内网服务器10.1.1.8上部署着2个服务，elasticsearch和kibana，端口分别是9200和5601，我现在想要把这2个服务穿透出去，具体配置如下：<br>frps.ini中的主要配置：<br>xxx替换成自己的</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8680</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">8643</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7</span>xxx</span><br><span class="line"><span class="attr">dashboard_user</span> = xxx</span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxx</span><br><span class="line"><span class="attr">enable_prometheus</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">log_file</span> = /app/frp/frps.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">disable_log_color</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">detailed_errors_to_client</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">authentication_method</span> = token</span><br><span class="line"><span class="attr">authenticate_heartbeats</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">authenticate_new_work_conns</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">token</span> = hellshan.top</span><br><span class="line">oidc_client_id =</span><br><span class="line">oidc_client_secret =</span><br><span class="line">oidc_audience =</span><br><span class="line">oidc_token_endpoint_url =</span><br><span class="line"><span class="attr">allow_ports</span> = <span class="number">1</span>-<span class="number">65535</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">max_ports_per_client</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">tls_only</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">subdomain_host</span> = hellshan.top</span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后通过上边配置的nginx进行代理转发请求到frp上。<br>frpc.ini的配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = hellshan.top</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">protocal</span> = kcp</span><br><span class="line"><span class="attr">token</span> = hellshan.top</span><br><span class="line"></span><br><span class="line"><span class="section">[k3_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = k3</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[server2019_remote_control]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.11</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">42264</span></span><br><span class="line"><span class="attr">subdomain</span> = remote</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[pve_web_control]</span></span><br><span class="line"><span class="attr">type</span> = https</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8006</span></span><br><span class="line"><span class="attr">subdomain</span> = esxi</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[pve_ssh_control]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">22222</span></span><br><span class="line"><span class="attr">subdomain</span> = ssh</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[monitor_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.12</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = monitor</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[monitor_tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.12</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">10051</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">10051</span></span><br><span class="line"><span class="attr">subdomain</span> = monitor</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[kibana_web_congrol]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.13</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5601</span></span><br><span class="line"><span class="attr">subdomain</span> = kibana</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[elastics_web_congrol]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.13</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9200</span></span><br><span class="line"><span class="attr">subdomain</span> = elastics</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[portainer_web_control]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.1</span>.<span class="number">1.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">subdomain</span> = docker</span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="http强制跳转到https"><a href="#http强制跳转到https" class="headerlink" title="http强制跳转到https"></a>http强制跳转到https</h2><p>frp支持从http转为https，详细可以参考<a href="https://github.com/fatedier/frp#enable-https-for-local-http-service">https://github.com/fatedier/frp#enable-https-for-local-http-service</a>配置，因为我是用路由器作为frpc，而frpc需要添加证书目录才能生效，不好操作，故使用强大的Nginx来实现，在nginx的云主机上统一存放证书。<br>例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#=============================== for docker.hellshan.top ======================================</span></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> docker.hellshan.top;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span> docker.hellshan.top;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> /app/cert/docker.hellshan.top.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /app/cert/docker.hellshan.top.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span>:8680;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span>:8680;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-proto https;</span><br><span class="line">                <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">                <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">                <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">                <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">                <span class="attribute">add_header</span> X-Cache <span class="string">&#x27;<span class="variable">$upstream_cache_status</span> from <span class="variable">$host</span>&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里配置了两个server来实现跳转，http部分使用<code>rewrite ^(.*) https://$server_name$1 permanent;</code>作为重定向，然后下面跟https的配置，而下面的proxy_pass则要配置成http的，因为实际上是走http的协议，这样访问域名的时候，就会跳转到https。</p>
<p><em>部分转载自：<a href="http://www.wangxianfeng.cn/wordpress/2018/06/10/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86frp%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9Fhttphttps/">http://www.wangxianfeng.cn/wordpress/2018/06/10/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86frp%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9Fhttphttps/</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>拿来主义</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>干货满满！10分钟看懂Docker和K8S</title>
    <url>/archives/9915ca90/</url>
    <content><![CDATA[<p><img src="/archives/9915ca90/1.png" alt=" "></p>
<p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-1.jpg" alt=" "><br>这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-2.jpg" alt=" "><br>LXC，就是Linux容器虚拟技术（Linux container）<br>后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-3.jpg" alt=" "><br>Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p>
<p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p>
<p>什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。<br>! <a href="10分钟看懂Docker和K8S-4.jpg"></a><br>Open Source，开源</p>
<p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。</p>
<p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes正式决定，将Docker项目开源。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-5.jpg" alt=" "><br>Solomon Hykes（今年刚从Docker离职）</p>
<p>不开则已，一开惊人。</p>
<p>越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。</p>
<p>Docker的人气迅速攀升，速度之快，令人瞠目结舌。</p>
<p>开源当月，Docker 0.1版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p>
<p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。</p>
<p>Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc.。</p>
<p>Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。</p>
<p>在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-6.jpg" alt=" "><br>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-7.jpg" alt=" "><br>虚拟机，类似于“子电脑”</p>
<p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是相互隔离的，互不影响。</p>
<p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。</p>
<p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p>
<p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-8.jpg" alt=" "><br>沙箱</p>
<p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-9.jpg" alt=" "><br>容器和虚拟机的对比</p>
<p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p>
<p>我们具体来看看Docker。</p>
<p>大家需要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎。</p>
<p>想要搞懂Docker，其实看它的两句口号就行。</p>
<p>第一句，是“Build, Ship and Run”。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-10.jpg" alt=" "><br>也就是，“搭建、发送、运行”，三板斧。</p>
<p>举个例子：</p>
<p>我来到一片空地，想建个房子，于是我搬石头、砍木头、画图纸，一顿操作，终于把这个房子盖好了。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-11.jpg" alt=" "><br>结果，我住了一段时间，想搬到另一片空地去。这时候，按以往的办法，我只能再次搬石头、砍木头、画图纸、盖房子。</p>
<p>但是，跑来一个老巫婆，教会我一种魔法。</p>
<p>这种魔法，可以把我盖好的房子复制一份，做成“镜像”，放在我的背包里。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-12.jpg" alt=" "><br>等我到了另一片空地，就用这个“镜像”，复制一套房子，摆在那边，拎包入住。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-13.jpg" alt=" "><br>怎么样？是不是很神奇？</p>
<p>所以，Docker的第二句口号就是：“Build once，Run anywhere（搭建一次，到处能用）”。</p>
<p>Docker技术的三大核心概念，分别是：</p>
<p><strong>镜像（Image）</strong><br><strong>容器（Container）</strong><br><strong>仓库（Repository）</strong></p>
<p>我刚才例子里面，那个放在包里的“镜像”，就是Docker镜像。而我的背包，就是Docker仓库。我在空地上，用魔法造好的房子，就是一个Docker容器。</p>
<p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p>也就是说，每次变出房子，房子是一样的，但生活用品之类的，都是不管的。谁住谁负责添置。</p>
<p>每一个镜像可以变出一种房子。那么，我可以有多个镜像呀！</p>
<p>也就是说，我盖了一个欧式别墅，生成了镜像。另一个哥们可能盖了一个中国四合院，也生成了镜像。还有哥们，盖了一个非洲茅草屋，也生成了镜像。。。</p>
<p>这么一来，我们可以交换镜像，你用我的，我用你的，岂不是很爽？<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-14.jpg" alt=" "><br>于是乎，就变成了一个大的公共仓库。</p>
<p>负责对Docker镜像进行管理的，是Docker Registry服务（类似仓库管理员）。</p>
<p>不是任何人建的任何镜像都是合法的。万一有人盖了一个有问题的房子呢？</p>
<p>所以，Docker Registry服务对镜像的管理是非常严格的。</p>
<p>最常使用的Registry公开服务，是官方的Docker Hub，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p>
<p>好了，说完了Docker，我们再把目光转向K8S。</p>
<p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p>
<p>就在这个时候，K8S出现了。</p>
<p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong><br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-15.jpg" alt=" "><br>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p>
<p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——Google。</p>
<p>然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的Borg系统。</p>
<p>K8S是2014年6月由Google公司正式公布出来并宣布开源的。</p>
<p>同年7月，微软、Red Hat、IBM、Docker、CoreOS、Mesosphere和Saltstack等公司，相继加入K8S。</p>
<p>之后的一年内，VMware、HP、Intel等公司，也陆续加入。</p>
<p>2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p>
<p>目前，kubernetes的版本已经发展到V1.13。</p>
<p>K8S的架构，略微有一点复杂，我们简单来看一下。</p>
<p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p>
<p>这个集群主要包括两个部分：</p>
<p><strong>一个Master节点（主节点）</strong><br><strong>一群Node节点（计算节点）</strong><br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-16.jpg" alt=" "><br>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p>
<p>深入来看这两种节点。</p>
<p>首先是Master节点。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-17.jpg" alt=" "><br>Master节点包括API Server、Scheduler、Controller manager、etcd。</p>
<p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p>
<p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p>
<p>Controller manager负责管理控制器，相当于“大总管”。</p>
<p>然后是Node节点。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-18.jpg" alt=" "><br>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是Pod。</p>
<blockquote>
<p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。这段不太好理解，跳过吧。</p>
</blockquote>
<p>Docker，不用说了，创建容器的。</p>
<p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p>
<p>Kube-proxy，主要负责为Pod对象提供代理。</p>
<p>Fluentd，主要负责日志收集、存储与查询。</p>
<p>是不是有点懵？唉，三言两语真的很难讲清楚，继续跳过吧。</p>
<p>Docker和K8S都介绍完了，然而文章并没有结束。</p>
<p>接下来的部分，是写给核心网工程师甚至所有通信工程师看的。</p>
<p>从几十年前的1G，到现在的4G，再到将来的5G，移动通信发生了翻天覆地的变化，核心网亦是如此。</p>
<p>但是，如果你仔细洞察这些变化，会发现，所谓的核心网，其实本质上并没有发生改变，无非就是很多的服务器而已。不同的核心网网元，就是不同的服务器，不同的计算节点。</p>
<p>变化的，是这些“服务器”的形态和接口：形态，从机柜单板，变成机柜刀片，从机柜刀片，变成X86通用刀片服务器；接口，从中继线缆，变成网线，从网线，变成光纤。</p>
<p>就算变来变去，还是服务器，是计算节点，是CPU。</p>
<p>既然是服务器，那么就势必会和IT云计算一样，走上虚拟化的道路。毕竟，虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度，等等。</p>
<p>前几年，大家以为虚拟机是核心网的终极形态。目前看来，更有可能是容器化。这几年经常说的NFV（网元功能虚拟化），也有可能改口为NFC（网元功能容器化）。</p>
<p>以VoLTE为例，如果按以前2G/3G的方式，那需要大量的专用设备，分别充当EPC和IMS的不同网元。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-19.jpg" alt=" "><br>VoLTE相关的网元</p>
<p>而采用容器之后，很可能只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同网元的服务程序。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-20.jpg" alt=" "><br>这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。</p>
<p>简直完美！</p>
<p>5G时代，核心网采用微服务架构，也是和容器完美搭配——单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型。每个专能型，分配给一个隔离的容器，赋予了最大程度的灵活。<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-21.jpg" alt=" "><br>精细化分工</p>
<p>按照这样的发展趋势，在移动通信系统中，除了天线，剩下的部分都有可能虚拟化。核心网是第一个，但不是最后一个。虚拟化之后的核心网，与其说属于通信，实际上更应该归为IT。核心网的功能，只是容器中普通一个软件功能而已。</p>
<p>至于说在座的各位核心网工程师，恭喜你们，马上就要成功转型啦！<br><img src="/archives/9915ca90/10分钟看懂Docker和K8S-22.jpg" alt=" "></p>
<h2 id="k8s部署"><a href="#k8s部署" class="headerlink" title="k8s部署"></a>k8s部署</h2><p><em>来自知乎</em><br>前段时间刚在公司搭建完k8s环境，踩了一些坑，也有一些经验。这里给你推荐两个网站，你可以看情况使用：<br>第一个是：<br>kuboard.cn/<br>kuboard中有一系列的k8s基础知识点，适合初入k8s的人学习，从介绍-入门-进阶-高级-实战，一步一步，会对k8s整体的功能有些了解。同时还有安装Kubernetes和Kuboa（Kubernetes一款图形化管理界面）的教程，其中Kuboard安装后，占用的内存不是很大，适合个人玩家练手。<br>第二个是：<br>kubesphere.com.cn/<br>KubeSphere是青云开源的一款以Kubernetes 为内核的云原生分布式操作系统，可以看做也是一款图形化管理界面。选择KubeSphere有一下几点：<br>完全开源，github上<br>现在星星将近4K；<br>功能完善，包含了<br>devops、日志、告警等功能。</p>
<p><em>转自：<a href="https://my.oschina.net/jamesview/blog/2994112">https://my.oschina.net/jamesview/blog/2994112</a></em></p>
]]></content>
      <categories>
        <category>热点</category>
        <category>平台</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用记录</title>
    <url>/archives/5018439d/</url>
    <content><![CDATA[<p><img src="/archives/5018439d/hexo_git_3.PNG" alt=" "></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><h3 id="nodejs环境"><a href="#nodejs环境" class="headerlink" title="nodejs环境"></a>nodejs环境</h3><p>hexo基于node.js，需要在该环境下进行操作<br>本人在proxmox ve里面下载debain10-turnkey-nodejs模板，省去了搭建的烦恼<br>使用ssh工具到创建的容器上执行<br>修改npm为国内淘宝源：<br><code>npm config set registry https://registry.npm.taobao.org</code><br>更新npm版本<br><code>npm install -g npm</code><br>查看npm和node版本<br><code>npm -v</code><br><code>node -v</code><br>安装hexo-cli<br><code>npm install -g hexo-cli</code><br>查看hexo版本：<br><code>hexo -v</code></p>
<h3 id="github环境"><a href="#github环境" class="headerlink" title="github环境"></a>github环境</h3><p>注册github账号<br>新建仓库，仓库名应该为：用户名.github.io，以这种方式命名，github会自动认为是web项目，会自动建立custom_pages的选项，可以添加域名<br>回到容器上执行<br>设置user.name和user.email配置信息<br><code>git config --global user.name &quot;你的GitHub用户名&quot;</code><br><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code><br>生成ssh密钥文件<br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code><br>直接回车到最后<br>找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制<br>打开GitHub_Settings_keys 页面，新建new SSH Key<br>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ：<br><code>ssh git@github.com</code><br><img src="/archives/5018439d/hexo_git_1.PNG" alt=" "><br>如上则说明成功</p>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>部署到github上可以使用github自带的域名，需要自定义域名则需要到各大网站申请一个域名。默认可以用用户名.github.io来访问你的hexo博客。申请域名后，进行域名绑定：<br>如我的域名为blog.hellshan.top，添加解析为我的github用户名.github.io，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名即可</p>
<h2 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h2><p>执行<br><code>hexo init blog</code><br>会在当前目录下生成blog文件夹，也就是你hexo网站项目的名称<br>在blog根目录里的_config.yml文件称为站点配置文件，根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件<br>将我们的Hexo与GitHub关联起来：<br><code>cd blog/</code><br><code>vim _config.yml</code><br>最后一行修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@gitee.com:xxx/xxx.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>如图：<br><img src="/archives/5018439d/hexo_git_2.PNG" alt=" "><br>安装git部署插件：<br><code>npm install hexo-deployer-git --save</code><br>执行：<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>即提交成功，可以到你的github上看到</p>
<h3 id="编辑博客文章"><a href="#编辑博客文章" class="headerlink" title="编辑博客文章"></a>编辑博客文章</h3><p>可以使用在线markdown编辑器编辑，可写即可见：<a href="http://marxi.co/">http://marxi.co/</a>，编辑完保存md文件，然后传到blog/source/_posts/下在提交到github就行<br>也可以使用markdown工具进行编辑如vscode<br><strong>创建CNAME文件：</strong><br>上面在github上绑定了域名，还不会生效，需要在项目目录下建立CNAME文件才生效：<br><code>vim blog/source/CNAME</code><br>填上域名保存即可<br>再次运行<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br>本地浏览：<br><code>hexo s</code><br>本地浏览器输入IP:4000即可浏览</p>
<h3 id="使用其他主题"><a href="#使用其他主题" class="headerlink" title="使用其他主题"></a>使用其他主题</h3><p>在github上可以搜索Hexo的主题，下载下来放到theme文件夹，然后修改_config.yml中theme的名字即可</p>
<h2 id="关联到netlify加速hexo"><a href="#关联到netlify加速hexo" class="headerlink" title="关联到netlify加速hexo"></a>关联到netlify加速hexo</h2><ol>
<li>使用github账号登录netlify</li>
<li>安装步骤添加github托管的repository</li>
<li>手动更改netlify的域名，再自定义域名</li>
<li>修改阿里云域名cname为netlify的域名</li>
<li>取消github的自定义域名，清空后点save，会删除目录下的CNAME文件</li>
<li>删除hexo工作目录的CNAME文件，不然重新提交也会绑定</li>
</ol>
<p><img src="/archives/5018439d/4.png" alt=" "></p>
<p>测试：<a href="http://www.17ce.com">http://www.17ce.com</a></p>
<h2 id="hexo问题处理"><a href="#hexo问题处理" class="headerlink" title="hexo问题处理"></a>hexo问题处理</h2><h3 id="图片无法显示问题"><a href="#图片无法显示问题" class="headerlink" title="图片无法显示问题"></a>图片无法显示问题</h3><p>hexo默认无法自动处理文章插入本地图片，需要通过扩展插件支持<br>配置_config.yml里面的post_asset_folder:false这个选项设置为true:<br><code>vim blog/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">post_asset_folder:true</span></span><br></pre></td></tr></table></figure>
<p>安装hexo-asset-image：<br><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code><br>修改node_modules/hexo-asset-image/index.js，换成</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">getPosition</span>(<span class="selector-tag">str</span>, <span class="selector-tag">m</span>, <span class="selector-tag">i</span>) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="selector-tag">if</span>(<span class="selector-tag">config</span><span class="selector-class">.post_asset_folder</span>)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">    <span class="selector-tag">else</span></span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">    var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="selector-tag">ignoreWhitespace</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">xmlMode</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">lowerCaseTags</span>: <span class="selector-tag">false</span>,</span><br><span class="line">        <span class="selector-tag">decodeEntities</span>: <span class="selector-tag">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">            // For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">            var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">              // In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="selector-tag">if</span>(<span class="selector-tag">srcArray</span><span class="selector-class">.length</span> &gt; 1)</span><br><span class="line">                <span class="selector-tag">srcArray</span><span class="selector-class">.shift</span>();</span><br><span class="line">              src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">              $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">              <span class="selector-tag">console</span><span class="selector-class">.info</span>&amp;&amp;<span class="selector-tag">console</span><span class="selector-class">.info</span>(&quot;<span class="selector-tag">update</span> <span class="selector-tag">link</span> <span class="selector-tag">as</span><span class="selector-pseudo">:--</span>&gt;&quot;+<span class="selector-tag">config</span><span class="selector-class">.root</span> + <span class="selector-tag">link</span> + <span class="selector-tag">src</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="selector-tag">else</span>&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在/source/_posts文件夹内新建一个与博客名称.md同名的文件夹，把图片放入该文件夹，然后使用<code>![](xxx.png)</code>直接插入图片即可。其中[]可以填图片的说明，会在图片下面生成。<br>再次提交时，gihub就会自动生成相关文件夹和上传图片。</p>
<h3 id="markdown使用数学公式"><a href="#markdown使用数学公式" class="headerlink" title="markdown使用数学公式"></a>markdown使用数学公式</h3><p>hexo的默认md渲染器和标准不太一样，更接近与html格式，数学公式$之类的符号不能显示。同时使用的md语法可能在浏览器显示不正常。<br>首先更换新的渲染器：<br><code>npm uninstall hexo-renderer-marked --save</code><br><code>npm install hexo-renderer-kramed --save</code><br>在根目录下开始(node_modules\kramed\lib\rules\inline.js)<br>修改以下两处:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>
<h3 id="新增独立页面"><a href="#新增独立页面" class="headerlink" title="新增独立页面"></a>新增独立页面</h3><p>在博客目录下执行<code>hexo new page xxx</code>，会在source目录下生成一个对应名字的文件夹，里面有index.md文件。<br>node.js会把我们写的md文件转化为HTML文件（在博客根目录中的public文件中可以查看）。Hexo 使用 Markdown（或其他渲染引擎）解析文章，利用我们使用的主题生成静态网页。有时候我们想自定义一个页面，它不受hexo的主题渲染。<br>使用hexo中提供配置的跳过渲染。在博客根目录中的配置文件（注意不是主题的配置问文件）_config.yml，找到“skip_render”配置。如果想设置某页面文章跳过渲染，则可以设置为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">&quot;xxx/**&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>添加关键字：</strong><br>建立页面后,在主题配置文件_config.yml的menu下添加一项,如果没有关键字,则会显示index.xxx,需要手动添加下关键字<br>打开文档：blog/themes/next/languages/zh-Hans.yml，添加对应的mapping：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">时间轴</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br></pre></td></tr></table></figure>
<h3 id="kibana嵌入web"><a href="#kibana嵌入web" class="headerlink" title="kibana嵌入web"></a>kibana嵌入web</h3><p>上面设置独立页面后,取消渲染,就可以通过HTML代码来实现页面布局,可以添加kibana的dashboard,复制dashboard的链接,然后添加进html文件即可:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    html, body &#123; margin: 0; padding 0; width: 100%; height: 100%;&#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">iframe</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">99%</span>; &#125;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;链接&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="nodejs使用"><a href="#nodejs使用" class="headerlink" title="nodejs使用"></a>nodejs使用</h2><h3 id="npm-install-很慢或者出错"><a href="#npm-install-很慢或者出错" class="headerlink" title="npm install 很慢或者出错"></a>npm install 很慢或者出错</h3><p>手动下载安装包到~/.node-gyp/node版本号目录下再重新npm install就行</p>
<h3 id="npm-手动安装"><a href="#npm-手动安装" class="headerlink" title="npm 手动安装"></a>npm 手动安装</h3><p>查看最新版本，为二进制包：<br><a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a><br>下载最新版本：<br><code>wget https://nodejs.org/dist/latest-v14.x/node-v14.13.1-linux-x64.tar.gz</code><br>解压<br><code>tar xf https://nodejs.org/dist/latest-v14.x/node-v14.13.1-linux-x64.tar.gz</code><br>创建软链接：<br><code>ln -s node-v14.13.1-linux-x64 node</code><br>添加系统环境变量：<br><code>vim /etc/profile</code><br>最后添加上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set for nodejs</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/app/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>手动更新配置：<br><code>source /etc/profile</code><br>查看node版本<br><code>node -v</code><br><code>npm -v</code></p>
<h2 id="关于网站备案"><a href="#关于网站备案" class="headerlink" title="关于网站备案"></a>关于网站备案</h2><p>根据工信部要求，国内云主机建站80和443端口都需要备案，而且域名的www和主域名都要求能够访问，否则不能使用。申请域名后，可以在域名提供商控制台上添加绑定，可以添加www和@（直接解析主域名）的A记录，指向云主机IP。然后在云主机上搭建nginx，添加跳转：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.xxx.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://blog.xxx.com <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://blog.xxx.com <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>参考出处：</em><br><em><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></em><br><em><a href="https://blog.csdn.net/weixin_43769146/article/details/105066795">https://blog.csdn.net/weixin_43769146/article/details/105066795</a></em></p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>实践验证真理</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>PVE和LINUX使用日志</title>
    <url>/archives/8853d375/</url>
    <content><![CDATA[<p><img src="/archives/8853d375/1.jpg" alt=" "></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载proxmox 6.2镜像，基于dabain 10.5 buster（清华大学镜像站）：</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/">https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/</a></p>
<p>2.使用rufus软件写入ISO镜像到U盘，使用DD方式写入</p>
<h2 id="默认LVM分区处理"><a href="#默认LVM分区处理" class="headerlink" title="默认LVM分区处理"></a>默认LVM分区处理</h2><h3 id="pve删除lvm扩容根目录"><a href="#pve删除lvm扩容根目录" class="headerlink" title="pve删除lvm扩容根目录"></a>pve删除lvm扩容根目录</h3><p>先备份虚拟机</p>
<p>删除虚拟机</p>
<p>删除local-lvm：<br><code>lvremove pve/data</code></p>
<p>查看空闲空间：<br><code>vgdisplay pve | grep Free</code></p>
<p>增加分区空间：<br><code>lvextend -l +100%FREE -f pve/root</code></p>
<p><code>fsdisk -l</code></p>
<p>执行上边的扩容操作：<br><code>resize2fs /dev/mapper/pve-root</code></p>
<p>恢复已经备份的虚拟机</p>
<h2 id="更改为国内软件源"><a href="#更改为国内软件源" class="headerlink" title="更改为国内软件源"></a>更改为国内软件源</h2><h3 id="更改debain-apt源"><a href="#更改debain-apt源" class="headerlink" title="更改debain apt源"></a>更改debain apt源</h3><p><code>cp /etc/apt/source.list /etc/apt/source.list.bak</code></p>
<p><code>cat &gt; /etc/apt/source.list &lt;&lt;EOF</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-updates main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; buster-backports main contrib non-free</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security buster&#x2F;updates main contrib non-free</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="更改pve-apt源"><a href="#更改pve-apt源" class="headerlink" title="更改pve apt源"></a>更改pve apt源</h3><p><code>cp /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.bak</code></p>
<p><code>cat &gt; /etc/apt/sources.list.d/pve-enterprise.list&lt;&lt;EOF</code></p>
<p><code>deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian buster pve-no-subscription EOF</code></p>
<h3 id="更改pve-lxc镜像源"><a href="#更改pve-lxc镜像源" class="headerlink" title="更改pve lxc镜像源"></a>更改pve lxc镜像源</h3><p>查找设定下载源的文件：<br><code>grep -rn &quot;download.proxmox.com&quot; /usr/share/perl5/PVE/*</code>  </p>
<p><code>sed -i.bak &quot;s#http://download.proxmox.com/images#https://mirrors.ustc.edu.cn/proxmox/images#g&quot; /usr/share/perl5/PVE/APLInfo.pm</code></p>
<p><code>wget -O /var/lib/pve-manager/apl-info/mirrors.ustc.edu.cn https://mirrors.ustc.edu.cn/proxmox/images/aplinfo.dat</code></p>
<h2 id="备份系统"><a href="#备份系统" class="headerlink" title="备份系统"></a>备份系统</h2><p><code>tar pczvf ./sysback.tgz --exclude=/lost+found --exclude=/mnt --exclude=/srv --exclude=/proc --exclude=/run --exclude=/tmp --exclude=/sys --exclude=/meida --exclude=/mnt --exclude=/pve-directory /</code></p>
<p>注意目标目录要在最后，排除目录要在前面</p>
<h2 id="PVE开启直通"><a href="#PVE开启直通" class="headerlink" title="PVE开启直通"></a>PVE开启直通</h2><h3 id="打开直通"><a href="#打开直通" class="headerlink" title="打开直通"></a>打开直通</h3><p><em>前提：硬件支持并在UEFI或BIOS里面开启VT-D虚拟化</em></p>
<p>修改grub文件：<br><code>vim /etc/default/grub</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet&quot;</span><br><span class="line">#改为</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet intel_iommu&#x3D;on&quot;</span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>
<p>修改module文件<br><code>vim /etc/module</code><br>加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_virqfd</span><br><span class="line">vfio_pci</span><br><span class="line">vfio</span><br></pre></td></tr></table></figure>
<p>重启系统生效</p>
<h3 id="win10设置显卡直通"><a href="#win10设置显卡直通" class="headerlink" title="win10设置显卡直通"></a>win10设置显卡直通</h3><p>以下截图是我的win10硬件配置：</p>
<p><img src="/archives/8853d375/PVE_WIN10_CONFIG.PNG" alt=" "></p>
<p>下载虚拟化驱动的iso，虚拟机win10的驱动靠它了：<br><a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/</a></p>
<p>列出设备地址，确定显卡vendorID：<br><code>lspci -nn</code></p>
<blockquote>
<p>00:02.0 VGA compatible controller [0300]: Intel Corporation HD Graphics 610 [8086:5902] (rev 04)</p>
</blockquote>
<p>定义为GPU直通vfio设备，并防止VGA仲裁：<br><code>echo &quot;options vfio-pci ids=8086:5917 disable_vga&quot; &gt; /etc/modprobe.d/vfio.conf</code></p>
<p>禁止默认VGA驱动在启动时加载：<br><code>echo &quot;blacklist nvidia&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code></p>
<p><code>echo &quot;blacklist radeon&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code></p>
<p><code>echo &quot;blacklist nouveau&quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code></p>
<p>启动进入虚拟机即可</p>
<p><em>参考：<a href="https://star.us.org/Cs/win10-installation-and-gpu-passthrough-on-proxmox-6.html?replyTo=25">https://star.us.org/Cs/win10-installation-and-gpu-passthrough-on-proxmox-6.html?replyTo=25</a></em></p>
<h2 id="LXC使用"><a href="#LXC使用" class="headerlink" title="LXC使用"></a>LXC使用</h2><p>在配置的存储目录中，点击模板，可以看到里面有很多system模板和turnkey的应用模板，这样可以大大减少应用的部署时间而专注于业务上。</p>
<p>配置模板很简单，最后设置密码后启动即可。如果忘记密码，可以通过PVE主机进入进行修改：<br><code>ptc enter 容器ID名</code></p>
<p>再使用<br><code>passwd 用户名</code>修改</p>
<p><strong>ubuntu container ssh的问题：</strong></p>
<p>默认ubuntu不允许root进行ssh，可以新建一个用户，把用户添加到sudoer里面就行：<br><code>useradd 用户名 -d -s /bin/bash</code></p>
<p>使用passwd更改密码</p>
<p>添加用户到sudoer：<br><code>vim /etc/sudoer</code></p>
<p>或者：<br><code>visudoer</code></p>
<h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><p>安装docker:<br><code>apt install -y docker-ce docker-ce-cli</code></p>
<p>安装portainer：<br><code>docker volume create portainer_data</code><br><code>docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</code></p>
<h2 id="linux磁盘操作"><a href="#linux磁盘操作" class="headerlink" title="linux磁盘操作"></a>linux磁盘操作</h2><h3 id="新磁盘分区"><a href="#新磁盘分区" class="headerlink" title="新磁盘分区"></a>新磁盘分区</h3><p>分区工具：<br>目前使用最多的分区工具有fdisk和parted，区别是fdisk只支持mbr分区表，parted支持mbr和GPT分区表，大于2T的磁盘则需使用parted。</p>
<p>工具使用</p>
<p>fdisk:<br>先选定指定磁盘<br><code>fdisk /dev/sdx</code></p>
<p>按m则列出操作菜单，根据菜单操作新建分区</p>
<p>分区完毕后，w保存退出</p>
<p>使操作生效：保存退出后，fdisk需要运行partprobe生效：<br><code>partprobe /dev/sdx</code></p>
<p>这样，在/dev目录下就会生成一个sdx1的文件，对应就是该磁盘的第x个分区</p>
<p>最后，格式化分区，创建文件系统：<br><code>mkfs -t xfs /dev/sdx1</code></p>
<p>或：<br><code>mkfs.xfs /dev/sdx1</code></p>
<p>parted:</p>
<p>parted的操作与mysql的命令行操作有点相似，而且是即使生效的，不用partprobe。</p>
<p>运行parted后，按”?”可以跳出操作菜单，先选择要操作的设备：<br><code>select /dev/sdx</code></p>
<p>然后就可以根据菜单进行分区表类型选择和分区了</p>
<p>创建完毕后别忘了格式化分区来创建文件系统。</p>
<h3 id="磁盘或分区的克隆"><a href="#磁盘或分区的克隆" class="headerlink" title="磁盘或分区的克隆"></a>磁盘或分区的克隆</h3><p>有时候遇到磁盘的smart报警，这时候需要更换磁盘了，如何克隆？<br>这时候使用dd命令就可以：<br><code>dd if=/dev/sdb of=/dev/sdc</code></p>
<p>这样就相当于把sdb的磁盘克隆到sdc，再重新挂载就行。这个操作会把磁盘的所有信息（包括分区表）都克隆。也可以使用dd命令进行分区表的备份哦。</p>
<h3 id="磁盘克隆后的扩容"><a href="#磁盘克隆后的扩容" class="headerlink" title="磁盘克隆后的扩容"></a>磁盘克隆后的扩容</h3><p>克隆磁盘后，如果目标磁盘比原磁盘大，则有部分空间是没有分配的，这时需要手动扩容</p>
<p>这里使用sata磁盘dd命令克隆到nvme的磁盘，执行：<br><code>parted /dev/nvme0n1 print free</code></p>
<p>跟直接进入parted操作是一样的</p>
<p>显示信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Number  Start   End     Size    File system  Name Flags</span><br><span class="line">    1   17.4kB  1049kB  1031kB               bios_grub</span><br><span class="line">    2   1049kB  538MB   537MB   fat32        boot, esp</span><br><span class="line">    3   538MB   240GB   240GB                lvm</span><br><span class="line">    4   240GB   256GB   16.0GB  Free Space</span><br></pre></td></tr></table></figure>
<p>可以看到有16G是为分配的空闲空间，因为3号分区是lvm分区，执行如下命令：<br><code>parted /dev/nvme0n1 resizepart 3 100%</code></p>
<p>把剩余的空间分配给3号分区，重新执行：<code>parted /dev/nvme0n1 print free</code></p>
<p>可以看到已经划给3号分区</p>
<p>分区的空间修改了，也要刷新一下pv物理卷的大小，这样pv才能识别变动的空间：<br><code>pvresize /dev/nvme0n1p3</code></p>
<p>然后执行<code>pvdisplay</code>查看pv中free 项中是否显示了可用的空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--- Physical volume ---</span><br><span class="line">PV Name               /dev/nvme0n1p3</span><br><span class="line">VG Name               pve</span><br><span class="line">PV Size               237.97 GiB / not usable 696.50 KiB</span><br><span class="line">Allocatable           yes </span><br><span class="line">PE Size               4.00 MiB</span><br><span class="line">Total PE              60921</span><br><span class="line">Free PE               3816</span><br><span class="line">Allocated PE          57105</span><br><span class="line">PV UUID               C67jhF-xR8t-m7JY-RwcD-orbo-CSIc-E8tWIu</span><br></pre></td></tr></table></figure>
<p>可以看到有3816可以分配，然后执行：<br><code>lvextend -l +100%FREE pve/root</code></p>
<blockquote>
<p>Size of logical volume pve/root changed from &lt;215.07 GiB (55057 extents) to 229.97 GiB (58873 extents).<br>Logical volume pve/root successfully resized.</p>
</blockquote>
<p>其中pve/root是逻辑卷的目录，可以通过<code>lvdisplay</code>命令查看<br>最后执行手动扩展命令使文件系统生效，未扩展前使用<code>df -hT</code>查看/dev/mapper/pve-root大小：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filesystem           Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev                 devtmpfs  7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs                tmpfs     1.6G  3.0M  1.6G   1% /run</span><br><span class="line">/dev/mapper/pve-root ext4      212G  106G   97G  53% /</span><br><span class="line">tmpfs                tmpfs     7.8G   28M  7.8G   1% /dev/shm</span><br><span class="line">tmpfs                tmpfs     5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/nvme0n1p2       vfat      511M  328K  511M   1% /boot/efi</span><br><span class="line">/dev/sda1            ext4      916G  169G  702G  20% /srv/disk-wdc</span><br><span class="line">/dev/fuse            fuse      128M   20K  128M   1% /etc/pve</span><br></pre></td></tr></table></figure>
<p>使用ext4格式文件系统，就通过<code>resize2fs /dev/mapper/pve-root</code>进行手动生效：</p>
<blockquote>
<p>resize2fs 1.46.2 (28-Feb-2021)<br>Filesystem at /dev/mapper/pve-root is mounted on /; on-line resizing required<br>old_desc_blocks = 27, new_desc_blocks = 29<br>The filesystem on /dev/mapper/pve-root is now 60285952 (4k) blocks long.</p>
</blockquote>
<p>再次运行<code>df -hT</code>查看是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filesystem           Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev                 devtmpfs  7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs                tmpfs     1.6G  3.0M  1.6G   1% /run</span><br><span class="line">/dev/mapper/pve-root ext4      227G  106G  111G  49% /</span><br><span class="line">tmpfs                tmpfs     7.8G   28M  7.8G   1% /dev/shm</span><br><span class="line">tmpfs                tmpfs     5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/nvme0n1p2       vfat      511M  328K  511M   1% /boot/efi</span><br><span class="line">/dev/sda1            ext4      916G  169G  702G  20% /srv/disk-wdc</span><br><span class="line">/dev/fuse            fuse      128M   20K  128M   1% /etc/pve</span><br></pre></td></tr></table></figure>
<p>可以看到分区已经由212G扩展到227G，与上面print free的空间一致，说明扩展成功</p>
<p>另外如果是xfs格式的文件系统，可以使用<code>xfs_growfs</code>命令执行手动生效。</p>
<h3 id="xfs根目录在线扩容"><a href="#xfs根目录在线扩容" class="headerlink" title="xfs根目录在线扩容"></a>xfs根目录在线扩容</h3><p>从虚拟机上面增加磁盘容量后，不会马上应用到分区，需要手动设置<br>查看空闲空间容量：<br><code>parted /dev/sda</code></p>
<p><code>(parted) print free</code></p>
<p>显示信息：      </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Model: NUTANIX VDISK (scsi)</span><br><span class="line">Disk /dev/sda: 644GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    Type      File system     标志</span><br><span class="line">        32.3kB  1049kB  1016kB            Free Space</span><br><span class="line">    1   1049kB  3146kB  2097kB  primary</span><br><span class="line">    2   3146kB  213MB   210MB   primary   xfs             启动</span><br><span class="line">    3   213MB   8803MB  8590MB  primary   linux-swap(v1)</span><br><span class="line">    4   8803MB  537GB   528GB   extended</span><br><span class="line">    5   8804MB  537GB   528GB   logical   xfs</span><br><span class="line">        537GB   644GB   107GB             Free Space</span><br></pre></td></tr></table></figure>
<p>可以看到这里增加了107G</p>
<p>按q退出</p>
<p>安装软件：<br><code>yum install cloud-utils-growpart</code></p>
<p><code>growpart /dev/sda 5</code></p>
<p>如果有报错：</p>
<blockquote>
<p>unexpected output in sfdisk —version [sfdisk，来自 util-linux 2.23.2]</p>
</blockquote>
<p>则输入:<br><code>export LANG=en_US.UTF-8</code></p>
<p>重新运行:<br><code>growpart /dev/sda 5</code></p>
<blockquote>
<p>CHANGED: partition=5 start=17195008 old: size=1031380992 end=1048576000 new: size=1241096159 end=1258291167</p>
</blockquote>
<p>使用xfs_growfs命令扩容<br><code>xfs_growfs /dev/sda5</code></p>
<p>看到输出信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meta-data=/dev/sda5              isize=512    agcount=4, agsize=32230656 blks</span><br><span class="line">        =                       sectsz=4096  attr=2, projid32bit=1</span><br><span class="line">        =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=128922624, imaxpct=25</span><br><span class="line">        =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=62950, version=2</span><br><span class="line">        =                       sectsz=4096  sunit=1 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 128922624 to 155137019</span><br></pre></td></tr></table></figure>
<p>输入df -hT可以查看已经扩容</p>
]]></content>
      <categories>
        <category>学而时习之</category>
        <category>温故而知新</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>航拍中国S01E01海南</title>
    <url>/archives/d0a90ac1/</url>
    <content><![CDATA[<p><img src="/archives/d0a90ac1/1.png" alt=" "></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你见过什么样的中国<br>China… A truly vast and fascinating country<br>是 960 万平方公里的辽阔<br>Nine million 600 thousand square kilometres of land<br>还是 300 万平方公里的澎湃<br>Three million square kilometres of seas<br>是四季轮转的天地<br>And it’s never still… Changing with the rotation of the seasons<br>还是冰与火演奏的乐章<br>and the movements of ice and fire<br>像鸟儿一样,离开地面，冲上云霄,结果超乎你的想象<br>Soaring like a bird is to see things beyond your imagination<br>前往平时无法到达的地方<br>You visit places you never before have dreamed of<br>看见专属于高空的奇观<br>and see wonders of the heavenly kind<br>俯瞰这片朝夕相处的大地<br>And even familiar places<br>再熟悉的景象<br>when seen from up high<br>也变了一副模样<br>assume a completely different look<br>从身边的世界, 到远方的家园<br>We’ll take you to explore places near and far<br>从自然地理<br>to travers the realms of Nature and Man<br>到人文历史<br>beyond history and geography<br>50 分钟的空中旅程，前所未有的极致体验，从现在开始，和我们一起天际遨游<br>Join us, as we embark on a unique journeym, across the sky</p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>海南省位于中国版图的最南端<br>This is Hainan, China’s southernmost province<br>它带着南海众多岛屿<br>Hainan island<br>贡献了相当于中国陆地面积四分之一的广阔海域<br>with a contiguous sea area takes up the size one quarter of the whole country’s land area<br>南部的南沙群岛<br>Here, in the South China Sea, also lie the Nansha Islands<br>界定了中国最南的国界<br>which mark China’s southernmost point<br><img src="/archives/d0a90ac1/2.png" alt=" "><br>北部的琼州海峡，隔开了海南岛与内陆<br>while to the north the Qiongzhou Strait separates Hainan from the mainland<br><img src="/archives/d0a90ac1/3.png" alt=" "><br>我们的旅程从北部开始<br>It’s from there that our journey starts<br>探索火山如何塑造岛屿<br>First we’ll explore how volcanic activity shaped the island<br>前往一座洋溢着闯荡精神的城市<br>and then we’ll fly to a city bursting with pioneering drive<br>沿着北部海岸线<br>Along Hainan’s northern coastlines<br>邂逅三座风格迥异的灯塔<br>we’ll come across three lighthouses, each with its own distinctive style<br><img src="/archives/d0a90ac1/4.png" alt=" "><br>这是一条 30 公里宽的海峡<br>The Qiongzhou Strait is 30 kilometres in width<br><img src="/archives/d0a90ac1/5.png" alt=" "><br>它的南岸是中国第二大岛——海南岛<br>To the South is China’s second largest island: Hainan Island<br>海南岛本来是内陆的一部分<br>In prehistoric times, Hainan was part of the mainland<br>6000 万年前<br>Around sixty million years ago<br>地壳运动让部分陆地下陷，海水淹没了这里<br>some lower-lying land was submerged<br>形成了古琼州海峡<br>creating what we know today as the Qiongzhou Strait<br><img src="/archives/d0a90ac1/6.png" alt=" "><br>伴随着塌陷和海峡形成，火山开始喷发<br>Later, land collapes and volcanic eruptions<br>火山喷发物不断堆积，海南岛北部的面积随之扩大<br>caused Hainan Island’s northward expansion<br>在海南岛的北部<br>Evidence of the ancient volcanic activity can still be found<br>火山运动的痕迹随处可见<br>in northern parts of Hainan<br>这片面积仅有 108 平方公里的土地上<br>In an area just 108 square kilometres<br>坐落着 40 多座火山<br>there are more than 40 volcanoes<br>马鞍岭火山是其中的明星<br>among them Ma’anling is the star<br><img src="/archives/d0a90ac1/7.png" alt=" "><br>它由一座主火山，一座副火山<br>It consist of two relatively large craters<br>和两座小巧的寄生火山组合而成<br>and two smaller parasitic ones<br>就像父母带着自己的一双儿女<br>it’s like parents living with a pair of children<br>如今，植被已经把火山层层覆盖<br>Ma’anling is part of the Haikou Volcanic Cluster Global Geopark<br>人们在这里建造了公园<br>Today the volcano is covered with greenery<br>沿着火山缺口处的步行通道，可以一直走到 69米深的底部<br>From the foot to the summit is a pleasant, 69-metre walk<br>大约在13000年前，马鞍岭火山完成了最后一次喷发，随后陷入沉寂<br>Ma’anling last erupted around 13,000 years ago<br>但不能小看它的威力，这时一座休眠的火山<br>However, it’s not classified as extinct, but dormant<br>没有人知道<br>So, it’s possible that one day<br>它会在什么时候醒来<br>it may become active again<br>渡轮是往返于<br>It takes 50 minutes totravel by ferry<br>内陆和海南岛之间的班车，只需要50分钟<br>between the mainland and Hainan<br>就能横渡琼州海峡<br><img src="/archives/d0a90ac1/8.png" alt=" "><br>across the QiongzhouStrait<br>这时一艘载重量超过4000吨的轮船<br>This ferry is transporting automobiles<br>除了汽车和旅客，船舱之中还有一列，跟随它渡海的火车<br>There’s even a train in the ferry chamber<br>跨海前，火车被拆分开<br>Before the crossing, the train was divided into sections<br>装入船舱<br>so that it could be accommodated<br>渡轮靠岸后<br>In port<br>首先完成铁轨的对接<br>a railway lineextends to the ferry<br><img src="/archives/d0a90ac1/9.png" alt=" "><br>接着，列车车厢被拉出船舱<br>The carriages are moved onto it<br>重新组接成完整的火车<br>and coupled together again<br>海口是它们在海南岛旅程的第一站<br>The now-complete train’s first stop on Hainan Island is the city of Haikou<br>海口是海南岛离内陆最近的城市<br>Haikou is the closest city on Hainan island to the mainland<br><img src="/archives/d0a90ac1/10.png" alt=" "><br>90%的进出岛货物，都在海口中转<br>Ninety percent of goods entring and leaving the island pass through its port<br>全岛最大的淡水河，南渡江<br>The Nandu- the island’s longest freshwater river - empties into the sea here<br>从这里入海，“海口”因此得名<br>which gave the city its name: Haikou literally means “emptying into the sea”<br>在海口，有一条盛极一时的骑楼商业街<br>This is the once prosperous Qilou Business Street<br>一楼是店铺<br>The ground floors of the buildings lining it, areoccupied by shops<br>二楼以上是人们居住的地方<br>Above, are apartments<br>这部分向外探出<br>The street gets its name from the protruding structures<br>就像骑跨在人行道上，所以叫骑楼<br>Qilou means “street overhung by buildings”<br>这里是海南人，从东南亚带回来的建筑样式<br>This style of architecture originated in Southeast Asia<br>对于他们来说，大海并不意味着阻隔<br>Hainan people have never considered the sea to be abarrier<br>而是通往远方的道路<br>On the contrary, they view it as a pathway to the outside world<br><img src="/archives/d0a90ac1/12.png" alt=" "><br>从清代开始<br>For several centuries<br>这里就有下南洋的热潮<br>there has been a flourishing trade between Hainan and Southeast Asia<br>除开闯荡的人们，捎回不少新奇玩意儿<br>People here brought back new commodities<br>小到咖啡<br>such as coffee<br>大到骑楼这种设计<br>as well as the new styles of architecture<br>甚至连造房子的水泥，都是从南洋运回来的<br>They even introduced the use of cement in house-building<br>闯荡南洋的人们脚步未远<br>These days, the most popular sea routes<br>从内地驶来的轮船，已经响起靠岸的鸣笛<br>are those traveled by mainland people, coming to Hainan<br>1988年<br>In 1988<br>海南建省，并成立了中国最大的经济特区<br>Hainan was established as China’s largest special economic zone<br>自由与梦想<br>In no time<br>激励10万闯海人横跨海峡，从海口登录，踏上这座充满无限可能的海岛<br>tens of thousands of people began crossing the strait to Haikou<br>如同“闯关东”，“走西口”<br>Inspired by the boundless commercial potential offered by Hainan’s new status<br>当年的闯海人勇于冒险<br>they set up businesses on the island<br>走在了开放的前沿<br>By doing so, they were following an historical precedent in China<br>“下海”是他们贡献给那个时代<br>where people have traditionally moved to other parts of the country<br>最具代表行的流行词<br>in times of economic difficulties<br>即便是最靠近陆地的地方，海洋的力量也不可小觑<br>The power of the sea should never be understimated<br>北部是海南岛最凶险的海岸线之一<br>Hainan’s northern coastline is one of the most dangerous places<br>灯塔成为航海人，最演绎看到的老朋友<br>Here, to ensure that sailors reach the island safely<br><img src="/archives/d0a90ac1/13.png" alt="儋州市 兵马角灯塔"><br>这时海南灯塔中，最年长<br>This is Hainan’s oldest lighthouse<br>相貌也最出众的一座<br>With its distinctive red and blue stripes<br>它守望临高角已经120多年，红白条纹是它最明显的标识<br>it’s been a landmark of Lingao Cape for over 120 years<br><img src="/archives/d0a90ac1/14.png" alt="临高县 临高角灯塔"><br>临高角灯塔见证了不少历史<br>witnessing the history<br>1894年，法国人为了控制琼州海峡<br>It was built in 1894 by the French<br>而修建了它<br>to support them in their attempt to seize control of the Qiongzhou Strait<br>50多年后<br>Fifty years later<br>解放军在临高角艰难登陆<br>Hainan was liberated from nationalist control by the People’s Liberation Army<br>解放了海南<br>after soldiers landed here at Lingao Cape<br>激战过后，灯塔如旧<br>The lighthouse survived fierce fighting<br>但海南已经成为一个全新的世界<br>and stood intact to welcome a brand new Hainan<br>木兰头灯塔<br>Mulantou Lighthouse<br>守卫着一片危险的水域<br>overlooks a particularly dangerous stretch of water<br><img src="/archives/d0a90ac1/15.png" alt=" "><br>因为水流速度极快，不少船只在这里遇险<br>Over the years, the speed of the current here has caused difficulties for numerous ships</p>
]]></content>
      <categories>
        <category>杂志</category>
        <category>航拍中国</category>
      </categories>
      <tags>
        <tag>旅游</tag>
        <tag>航拍</tag>
      </tags>
  </entry>
</search>
